{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":""},{"location":"#\u4e3b\u9875","title":"\u4e3b\u9875","text":""},{"location":"blog/","title":"\u535a\u5ba2","text":""},{"location":"blog/#\u535a\u5ba2","title":"\u535a\u5ba2","text":""},{"location":"code/","title":"\u4ee3\u7801","text":""},{"location":"code/#\u4ee3\u7801","title":"\u4ee3\u7801","text":""},{"location":"code/algorithm/BitSetManipulate/","title":"\u4f4d\u8fd0\u7b97\u4e0e\u96c6\u5408","text":"","tags":["\u4f4d\u8fd0\u7b97","\u96c6\u5408","bitset"]},{"location":"code/algorithm/BitSetManipulate/#\u4f4d\u8fd0\u7b97\u4e0e\u96c6\u5408","title":"\u4f4d\u8fd0\u7b97\u4e0e\u96c6\u5408","text":"<p>\u4f4d\u8fd0\u7b97\u6280\u5de7:  </p> \u4f4d\u8fd0\u7b97\u6280\u5de7 C++<pre><code>// 1. x &amp; (-x) \u53d6\u51fa x \u6700\u53f3\u8fb9\u7684 1 (\u6811\u72b6\u6570\u7ec4\u4e2d\u7684lowbit\u51fd\u6570)\nint rightmost_one = x &amp; -x;  // \u4e5f\u53ef\u4ee5\u4f7f\u7528 __builtin_ctz(x) \u5b9e\u73b0 (count trailing zeros)\n// 2. \u5224\u65ad x \u662f\u5426\u4e3a 2 \u7684\u5e42\u6b21\u65b9\nbool is_power_of_two = x &gt; 0 &amp;&amp; (x &amp; (x - 1)) == 0;\n// 3. x &amp; (x - 1) \u5c06 x \u6700\u53f3\u8fb9\u7684 1 \u53d8\u6210 0\nint x_with_rightmost_one_removed = x &amp; (x - 1);\n// 4. x | (x + 1) \u5c06 x \u6700\u53f3\u8fb9\u7684 0 \u53d8\u6210 1\nint x_with_rightmost_zero_added = x | (x + 1);\n// 5. x ^ (x - 1) \u5c06 x \u6700\u53f3\u8fb9\u7684 1 \u548c\u5176\u540e\u9762\u7684 0 \u5168\u90e8\u53d8\u6210 1\nint x_with_rightmost_one_and_trailing_zeros_added = x ^ (x - 1);\n// 6. x ^ (x + 1) \u5c06 x \u6700\u53f3\u8fb9\u7684 0 \u548c\u5176\u540e\u9762\u7684 1 \u5168\u90e8\u53d8\u6210 0\nint x_with_rightmost_zero_and_trailing_ones_removed = x ^ (x + 1);\n</code></pre> <p>\u4f4d\u96c6\u5408\u64cd\u4f5c:</p> \u4f4d\u96c6\u5408\u64cd\u4f5c C++<pre><code>class BitSetManipulation {\n  unsigned U;  // NOLINT\n  int n;\n\n public:\n  explicit BitSetManipulation(unsigned n_) : n(n_) {}\n\n  unsigned Universal() const { return (1 &lt;&lt; n) - 1; }\n\n  // \u96c6\u5408\u8fd0\u7b97\n  void Intersection(unsigned V) { U = U &amp; V; }\n\n  void Union(unsigned V) { U = U | V; }\n\n  void SymmetricDifference(unsigned V) { U = U ^ V; }\n\n  void Difference(unsigned V) { U = U &amp; ~V; }\n\n  bool Contain(unsigned V) const {\n    // return (U | V) == V\n    return (U &amp; V) == V;\n  }\n\n  // \u5f53\u524d\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570\n  int Size() const { return __builtin_popcount(U); }\n\n  // \u5f53\u524d\u96c6\u5408\u7684\u6700\u5c0f\u5143\u7d20\n  int Minimum() const { return __builtin_ctz(U); }\n\n  // \u5143\u7d20\u8fd0\u7b97\n  unsigned ComplementarySet() const { return ~U; }\n\n  // \u5143\u7d20i\u662f\u5426\u5728\u96c6\u5408\u4e2d\n  bool BelongTo(unsigned i) const { return ((U &gt;&gt; i) &amp; 1) == 1; }\n\n  void Add(unsigned i) { U = U | (1 &lt;&lt; i); }\n\n  void Delete(unsigned i) { U = U &amp; (~(1 &lt;&lt; i)); }\n\n  void DeleteMinimum() { U = U &amp; (U - 1); }\n\n  void Traverse() const {\n    for (int i = 0; i &lt; n; i++) {\n      if (((U &gt;&gt; i) &amp; 1) != 0U) {  // i \u5728 s \u4e2d\n        // \u5904\u7406 i \u7684\u903b\u8f91\n      }\n    }\n  }\n\n  void AllSubset() const {\n    for (int s = 0; s &lt; (1 &lt;&lt; n); s++) {  // \u5168\u96c6\u7684\u6bcf\u4e2a\u5b50\u96c6\n      // \u5904\u7406 s \u7684\u903b\u8f91\n    }\n  }\n\n  void Subset() const {\n    // \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u975e\u7a7a\u5b50\u96c6\n    {\n      for (int sub = U; sub != 0; sub = (sub - 1) &amp; U) {\n        // \u5904\u7406 sub \u7684\u903b\u8f91\n      }\n    }\n    // \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u5b50\u96c6(\u5305\u62ec\u7a7a\u96c6)\n    {\n      int sub = U;\n      do {\n        // \u5904\u7406 sub \u7684\u903b\u8f91\n        sub = (sub - 1) &amp; U;\n      } while (sub != U);\n    }\n  }\n\n  void SubsetK(int k) const {\n    // \u4ece[1,...n-1]\u679a\u4e3e\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\n    int sub_set = (1 &lt;&lt; k) - 1;\n    while (sub_set &lt; (1 &lt;&lt; n)) {\n      // \u8fdb\u884c\u9488\u5bf9\u7ec4\u5408\u7684\u5904\u7406\n      int x = sub_set &amp; -sub_set, y = sub_set + x;\n      sub_set = ((sub_set &amp; ~y) / x &gt;&gt; 1) | y;\n    }\n  }\n};\n</code></pre> <p></p>","tags":["\u4f4d\u8fd0\u7b97","\u96c6\u5408","bitset"]},{"location":"code/algorithm/Discretization/","title":"\u79bb\u6563\u5316","text":"","tags":["discretization"]},{"location":"code/algorithm/Discretization/#\u79bb\u6563\u5316","title":"\u79bb\u6563\u5316","text":"<p>\u79bb\u6563\u5316\uff08\\text{Discretization}\uff09\u5c06\u8f83\u5927\u8303\u56f4\u7684\u6570\u503c\u6620\u5c04\u5230\u8f83\u5c0f\u8303\u56f4\u7684\u6574\u6570\uff0c\u901a\u5e38\u662f\u4ece 1 \u5f00\u59cb\u7684\u8fde\u7eed\u6574\u6570\u3002 \u79bb\u6563\u5316\u4e4b\u540e\u503c\u57df\u7f29\u5c0f\u5230\u548c\u6570\u636e\u89c4\u6a21\u76f8\u5f53\u7684\u8303\u56f4\u5185\uff0c\u4fbf\u4e8e\u4f7f\u7528\u57fa\u4e8e\u6570\u7ec4\u4e0b\u6807\u7684\u6570\u636e\u7ed3\u6784\uff08\u5982\u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u7b49\uff09\u8fdb\u884c\u9ad8\u6548\u5904\u7406\u3002</p> <p>\u79bb\u6563\u5316\u7684\u5e94\u7528\u573a\u666f</p> <p>\u79bb\u6563\u5316\u7684\u524d\u63d0\u662f\u53ea\u5173\u5fc3\u6570\u503c\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff0c\u800c\u4e0d\u5173\u5fc3\u5177\u4f53\u6570\u503c\u3002  </p> \u79bb\u6563\u5316 \u6392\u5e8f\u3001\u53bb\u91cd\u65e0\u91cd\u590d\u5143\u7d20 <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n \\log n), \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; discretize(const vector&lt;int&gt; &amp;nums) {\n  vector&lt;int&gt; sorted_nums = nums;\n  sort(sorted_nums.begin(), sorted_nums.end());\n  sorted_nums.erase(unique(sorted_nums.begin(), sorted_nums.end()), sorted_nums.end());\n  return sorted_nums;\n}\n\n// \u8fd4\u56de x \u5728\u79bb\u6563\u5316\u540e\u6570\u7ec4\u4e2d\u7684\u6392\u540d\uff08\u4ece1\u5f00\u59cb\uff09\nint get_rank(const vector&lt;int&gt; &amp;sorted_nums, int x) {\n  return lower_bound(sorted_nums.begin(), sorted_nums.end(), x) - sorted_nums.begin() + 1;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n \\log n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; discretize(const vector&lt;int&gt; &amp;nums) {\n  int n = nums.size();\n  vector&lt;int&gt; index(n);\n  // \u6620\u5c04\u81f3[0,n)\n  iota(index.begin(), index.end(), 0);\n  sort(index.begin(), index.end(), [&amp;](int i, int j) { return nums[i] &lt; nums[j]; });\n  vector&lt;int&gt; rank(n);\n  for (int i = 0; i &lt; n; ++i) { rank[index[i]] = i; }\n  return rank;\n}\n</code></pre>","tags":["discretization"]},{"location":"code/algorithm/Game/","title":"\u535a\u5f08","text":"","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#\u535a\u5f08","title":"\u535a\u5f08","text":"<p>\u535a\u5f08\u8bba\uff08\\text{Game Theory}\uff09\u662f\u4e00\u95e8\u7814\u7a76\u51b3\u7b56\u8005\u5728\u7279\u5b9a\u89c4\u5219\u4e0b\u5982\u4f55\u505a\u51fa\u6700\u4f18\u51b3\u7b56\u7684\u6570\u5b66\u7406\u8bba\u3002  </p> <p>\u535a\u5f08\u7684\u57fa\u672c\u8981\u7d20\u5305\u62ec\u53c2\u4e0e\u8005\uff08\\text{Players}\uff09\u3001\u7b56\u7565\uff08\\text{Strategies}\uff09\u548c\u6536\u76ca\uff08\\text{Payoffs}\uff09\u3002 \u535a\u5f08\u7684\u51e0\u79cd\u7c7b\u578b\uff1a  </p> <ul> <li>\u5b8c\u5168\u4fe1\u606f\u535a\u5f08\uff08\\text{Perfect Information Game}\uff09\uff1a\u6240\u6709\u53c2\u4e0e\u8005\u90fd\u77e5\u9053\u6e38\u620f\u7684\u6240\u6709\u5386\u53f2\u4fe1\u606f</li> <li>\u4e0d\u5b8c\u5168\u4fe1\u606f\u535a\u5f08\uff08\\text{Imperfect Information Game}\uff09\uff1a\u67d0\u4e9b\u4fe1\u606f\u5bf9\u90e8\u5206\u6216\u6240\u6709\u53c2\u4e0e\u8005\u662f\u672a\u77e5\u7684</li> <li>\u96f6\u548c\u535a\u5f08\uff08\\text{Zero-sum Game}\uff09\uff1a\u4e00\u4e2a\u53c2\u4e0e\u8005\u7684\u6536\u76ca\u5b8c\u5168\u6765\u81ea\u53e6\u4e00\u4e2a\u53c2\u4e0e\u8005\u7684\u635f\u5931</li> <li>\u975e\u96f6\u548c\u535a\u5f08\uff08\\text{Non-zero-sum Game}\uff09\uff1a\u53c2\u4e0e\u8005\u7684\u6536\u76ca\u53ef\u4ee5\u540c\u65f6\u589e\u52a0\u6216\u51cf\u5c11</li> </ul> <p>\u6b64\u5904\u53ea\u8ba8\u8bba\u6709\u9650\u7684\u5b8c\u5168\u4fe1\u606f\u96f6\u548c\u535a\u5f08\u3002  </p> <p>\u7b56\u6885\u6d1b\u5b9a\u7406</p> <p>\u5728\u6709\u9650\u7684\u5b8c\u5168\u4fe1\u606f\u96f6\u548c\u535a\u5f08\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u552f\u4e00\u7684\u7eb3\u4ec0\u5747\u8861\uff08\\text{Nash Equilibrium}\uff09\uff0c\u5373\u6bcf\u4e2a\u53c2\u4e0e\u8005\u90fd\u6709\u4e00\u4e2a\u6700\u4f18\u7b56\u7565\uff0c\u4f7f\u5f97\u5728\u5176\u4ed6\u53c2\u4e0e\u8005\u7b56\u7565\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u5355\u4e00\u53c2\u4e0e\u8005\u90fd\u65e0\u6cd5\u901a\u8fc7\u6539\u53d8\u81ea\u5df1\u7684\u7b56\u7565\u6765\u83b7\u5f97\u66f4\u9ad8\u7684\u6536\u76ca\u3002  \u4e00\u4e2a\u53cc\u65b9\u8f6e\u6d41\u884c\u52a8\u7684\u6e38\u620f\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:  </p> <ul> <li>\u5728\u6709\u9650\u6b65\u5185\u7ed3\u675f</li> <li>\u573a\u4e0a\u6240\u6709\u4fe1\u606f\u5bf9\u53cc\u65b9\u516c\u5f00\uff08\u5b8c\u5168\u4fe1\u606f\uff09</li> <li>\u6ca1\u6709\u968f\u673a\u56e0\u7d20\uff08\u786e\u5b9a\u6027\uff09</li> <li>\u6ca1\u6709\u5e73\u5c40\uff08\u96f6\u548c\uff09</li> <li>\u53cc\u65b9\u667a\u529b\u5747\u65e0\u9650\uff08\u7406\u6027\uff09</li> </ul> <p>\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u7b56\u7565\u6216\u540e\u624b\u5fc5\u80dc\u7b56\u7565</p>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#\u5df4\u4ec0\u535a\u5f08","title":"\u5df4\u4ec0\u535a\u5f08","text":"<p>\u5df4\u4ec0\u535a\u5f08\uff08\\text{Bash Game}\uff09\u901a\u5e38\u63cf\u8ff0\u4e3a\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u4ece\u4e00\u4e2a\u5806\u4e2d\u53d6\u8d70\u4e00\u5b9a\u6570\u91cf\u7684\u7269\u54c1\uff0c\u76ee\u6807\u662f\u907f\u514d\u6210\u4e3a\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\u7684\u73a9\u5bb6\u3002  </p> <p>\u5047\u8bbe\u6709 n \u4e2a\u7269\u54c1\uff0c\u6bcf\u6b21\u73a9\u5bb6\u53ef\u4ee5\u53d6\u8d70 1 \u5230 m \u4e2a\u7269\u54c1\u3002\u5219\u5148\u624b\u73a9\u5bb6\u7684\u5fc5\u80dc\u6761\u4ef6\u662f n \\bmod (m + 1) \\neq 0\u3002</p> \u4e3a\u4ec0\u4e48\uff1f <p>\u8bbe n \\bmod (m + 1) = k\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21\u884c\u52a8\u65f6\u53d6\u8d70 k \u4e2a\u7269\u54c1\uff0c\u4f7f\u5f97\u5269\u4f59\u7269\u54c1\u6570\u53d8\u4e3a n - k = t(m + 1), t \\geq 0\u3002 \u8fd9\u6837\uff0c\u65e0\u8bba\u540e\u624b\u73a9\u5bb6\u53d6\u8d70\u591a\u5c11\u4e2a\u7269\u54c1\uff08\u8bb0\u4e3a x, 1 \\leq x \\leq m\uff09\uff0c\u5148\u624b\u73a9\u5bb6\u90fd\u53ef\u4ee5\u5728\u4e0b\u4e00\u8f6e\u53d6\u8d70 m + 1 - x \u4e2a\u7269\u54c1\uff0c\u4f7f\u5f97\u6bcf\u6b21\u8f6e\u5230\u540e\u624b\u73a9\u5bb6\u65f6\uff0c\u5269\u4f59\u7269\u54c1\u6570\u603b\u662f (t - 1)(m + 1) \u7684\u5f62\u5f0f\u3002 \u6700\u7ec8\uff0c\u5f53\u7269\u54c1\u6570\u51cf\u5c11\u5230 0 \u65f6\uff0c\u540e\u624b\u73a9\u5bb6\u5c06\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\uff0c\u4ece\u800c\u5148\u624b\u73a9\u5bb6\u83b7\u80dc\u3002 \u5df4\u4ec0\u535a\u5f08\u7684\u5173\u952e\u5728\u4e8e\u901a\u8fc7\u63a7\u5236\u6bcf\u8f6e\u7ed3\u675f\u65f6\u7684\u7269\u54c1\u6570\uff0c\u4f7f\u5176\u4fdd\u6301\u5728\u7279\u5b9a\u7684\u6a21\u6570\u5173\u7cfb\u4e0b\uff0c\u4ece\u800c\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\u3002  </p> Roy&amp;October\u4e4b\u53d6\u77f3\u5b50 <p>n \u4e2a\u77f3\u5b50\uff0c\u4e24\u4eba\u8f6e\u6d41\u53d6\u77f3\u5b50\uff0c\u6bcf\u6b21\u53ef\u4ee5\u53d6 p^k \u4e2a\uff0c\u5176\u4e2d p \u4e3a\u8d28\u6570\uff0c\u53d6\u5b8c\u77f3\u5b50\u7684\u4eba\u83b7\u80dc\u3002\u95ee\u8c01\u80fd\u83b7\u80dc\u3002</p> Hint <p>n=1,2,3,4,5 \u65f6\u5148\u624b\u90fd\u80fd\u4e00\u6b21\u53d6\u5b8c\u83b7\u80dc\u3002n=6 \u65f6\u65e0\u8bba\u5148\u624b\u53d6 1,2,3,4,5 \u4e2a\uff0c\u540e\u624b\u90fd\u80fd\u53d6\u5b8c\u83b7\u80dc\u3002 \u5f53 n = 6k \u65f6\uff0c\u5148\u624b\u65e0\u8bba\u53d6 p^k \u4e2a\u77f3\u5b50\uff0c\u540e\u624b\u90fd\u80fd\u53d6 6k - p^k \u4e2a\u77f3\u5b50\uff0c\u4f7f\u5f97\u5269\u4f59\u77f3\u5b50\u6570\u53d8\u4e3a 6(k-1)\u3002 \u56e0\u6b64\uff0c\u5148\u624b\u7684\u5fc5\u80dc\u6761\u4ef6\u662f n \\bmod 6 \\neq 0\u3002</p> C++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n  int t, n;\n  cin &gt;&gt; t;\n  for (int i = 1; i &lt;= t; i++) {\n    cin &gt;&gt; n;\n    if (n % 6 == 0)\n      cout &lt;&lt; \"Roy wins!\" &lt;&lt; endl;\n    else\n      cout &lt;&lt; \"October wins!\" &lt;&lt; endl;\n  }\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#nim\u535a\u5f08","title":"Nim\u535a\u5f08","text":"<p>\\text{Nim} \u535a\u5f08\uff08\\text{Nim Game}\uff09\u901a\u5e38\u63cf\u8ff0\u4e3a\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u4ece\u591a\u4e2a\u5806\u4e2d\u53d6\u8d70\u7269\u54c1\uff0c\u76ee\u6807\u662f\u907f\u514d\u6210\u4e3a\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\u7684\u73a9\u5bb6\u3002</p> <p>\u5728 \\text{Nim} \u535a\u5f08\u4e2d\uff0c\u73a9\u5bb6\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u7684\u5806\u4e2d\u53d6\u8d70\u4efb\u610f\u6570\u91cf\u7684\u7269\u54c1\uff08\u81f3\u5c11 1 \u4e2a\uff09\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5806\u7684\u7269\u54c1\u6570\u91cf\u662f\u6709\u9650\u7684\u3002\u6e38\u620f\u7684\u80dc\u5229\u6761\u4ef6\u662f\u4f7f\u5bf9\u624b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u6709\u6548\u7684\u64cd\u4f5c\u3002</p> <p>\\text{Nim} \u535a\u5f08\u7684\u5173\u952e\u5728\u4e8e\u5f02\u6216\u8fd0\u7b97\u3002\u901a\u8fc7\u8ba1\u7b97\u6240\u6709\u5806\u7684\u7269\u54c1\u6570\u91cf\u7684\u5f02\u6216\u548c\uff08\\text{XOR}\uff09\uff0c\u53ef\u4ee5\u5224\u65ad\u5f53\u524d\u5c40\u9762\u662f\u5426\u4e3a\u5148\u624b\u5fc5\u80dc\u5c40\u9762\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u5f02\u6216\u548c\u4e0d\u4e3a 0\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u6709\u5fc5\u80dc\u7b56\u7565\uff1b\u5982\u679c\u5f02\u6216\u548c\u4e3a 0\uff0c\u5219\u540e\u624b\u73a9\u5bb6\u6709\u5fc5\u80dc\u7b56\u7565\u3002  </p> \u4e3a\u4ec0\u4e48\uff1f <p>\u8bbe\u6709 n \u5806\u7269\u54c1\uff0c\u5206\u522b\u4e3a a_1, a_2, \\ldots, a_n\u3002\u5b9a\u4e49\u5f02\u6216\u548c\u4e3a S = a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n\u3002  </p> <ul> <li>\u5982\u679c S = 0\uff0c\u5219\u5f53\u524d\u5c40\u9762\u4e3a\u540e\u624b\u5fc5\u80dc\u5c40\u9762\u3002\u65e0\u8bba\u5148\u624b\u73a9\u5bb6\u5982\u4f55\u64cd\u4f5c\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5f02\u6216\u548c\u53d8\u4e3a\u975e\u96f6\uff0c\u4ece\u800c\u4f7f\u5f97\u540e\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9002\u5f53\u7684\u64cd\u4f5c\u5c06\u5f02\u6216\u548c\u91cd\u65b0\u53d8\u4e3a\u96f6\u3002  </li> <li>\u5982\u679c S \\neq 0\uff0c\u5219\u5f53\u524d\u5c40\u9762\u4e3a\u5148\u624b\u5fc5\u80dc\u5c40\u9762\u3002\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u4e00\u4e2a\u5806\u5e76\u53d6\u8d70\u9002\u5f53\u6570\u91cf\u7684\u7269\u54c1\uff0c\u4f7f\u5f97\u65b0\u7684\u5f02\u6216\u548c\u53d8\u4e3a\u96f6\uff0c\u4ece\u800c\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\u3002  </li> </ul> <p>\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a  </p> <ol> <li>\u8ba1\u7b97\u5f53\u524d\u6240\u6709\u5806\u7684\u5f02\u6216\u548c S\u3002</li> <li>\u627e\u5230\u4e00\u4e2a\u5806 a_i\uff0c\u4f7f\u5f97 a_i \\oplus S &lt; a_i\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u53d6\u8d70 a_i - (a_i \\oplus S) \u4e2a\u7269\u54c1\uff0c\u53ef\u4ee5\u4f7f\u5f97\u65b0\u7684\u5f02\u6216\u548c\u53d8\u4e3a\u96f6\u3002</li> <li>\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u8f6e\u5230\u5bf9\u624b\u65f6\uff0c\u5f02\u6216\u548c\u4e3a\u96f6\uff0c\u5bf9\u624b\u65e0\u8bba\u5982\u4f55\u64cd\u4f5c\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5f02\u6216\u548c\u53d8\u4e3a\u975e\u96f6\uff0c\u4ece\u800c\u4f7f\u5f97\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u6301\u4f18\u52bf\u3002</li> </ol> <p>\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\uff0c\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u786e\u4fdd\u5728\u6bcf\u6b21\u8f6e\u5230\u81ea\u5df1\u65f6\uff0c\u5c40\u9762\u603b\u662f\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\uff0c\u6700\u7ec8\u8d62\u5f97\u6e38\u620f\u3002</p> \u3010\u6a21\u677f\u3011Nim \u6e38\u620f C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool nim_game(const vector&lt;int&gt; &amp;piles) {\n  int xor_sum = 0;\n  for (int stones : piles) { xor_sum ^= stones; }\n  return (xor_sum != 0);\n}\n\nvoid solve() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; piles(n);\n  for (int i = 0; i &lt; n; i++) { cin &gt;&gt; piles[i]; }\n  if (nim_game(piles)) {\n    cout &lt;&lt; \"Yes\\n\";\n  } else {\n    cout &lt;&lt; \"No\\n\";\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#\u53cd\u5c3c\u59c6\u535a\u5f08\u53cd\u5e38\u6e38\u620f","title":"\u53cd\u5c3c\u59c6\u535a\u5f08\uff08\u53cd\u5e38\u6e38\u620f\uff09","text":"<p>\u53cd\u5c3c\u59c6\u535a\u5f08\uff08\\text{Mis\u00e8re Nim}\uff09\u662f\u4e00\u79cd\u53d8\u4f53\u7684 \\text{Nim} \u535a\u5f08\uff0c\u89c4\u5219\u4e0e \\text{Nim} \u535a\u5f08\u7c7b\u4f3c\uff0c\u4f46\u80dc\u5229\u6761\u4ef6\u76f8\u53cd\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u53d6\u8d70\u7269\u54c1\u7684\u73a9\u5bb6\u8f93\u6389\u6e38\u620f\u3002</p> <p>\u5728\u53cd\u5c3c\u59c6\u535a\u5f08\u4e2d\uff0c\u73a9\u5bb6\u4ecd\u7136\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u7684\u5806\u4e2d\u53d6\u8d70\u4efb\u610f\u6570\u91cf\u7684\u7269\u54c1\uff08\u81f3\u5c11 1 \u4e2a\uff09\uff0c\u4f46\u76ee\u6807\u662f\u907f\u514d\u6210\u4e3a\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\u7684\u73a9\u5bb6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6700\u540e\u4e00\u4e2a\u53d6\u8d70\u7269\u54c1\u7684\u73a9\u5bb6\u8f93\u6389\u6e38\u620f\u3002</p> <p>\u53cd\u5c3c\u59c6\u535a\u5f08\u7684\u5206\u6790\u4e0e \\text{Nim} \u535a\u5f08\u7c7b\u4f3c\uff0c\u4f46\u9700\u8981\u8003\u8651\u7279\u6b8a\u60c5\u51b5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u53cd\u5c3c\u59c6\u535a\u5f08\u7684\u80dc\u5229\u6761\u4ef6\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u89c4\u5219\u6765\u5224\u65ad\uff1a</p> <ul> <li>\u5982\u679c\u6240\u6709\u5806\u7684\u7269\u54c1\u6570\u91cf\u5747\u4e3a 1<ul> <li>\u5982\u679c\u5806\u7684\u6570\u91cf\u4e3a\u5947\u6570\uff0c\u5219\u5f53\u524d\u5c40\u9762\u4e3a\u540e\u624b\u5fc5\u80dc\u5c40\u9762\u3002</li> <li>\u5982\u679c\u5806\u7684\u6570\u91cf\u4e3a\u5076\u6570\uff0c\u5219\u5f53\u524d\u5c40\u9762\u4e3a\u5148\u624b\u5fc5\u80dc\u5c40\u9762\u3002</li> </ul> </li> <li>\u5982\u679c\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5806\u7684\u7269\u54c1\u6570\u91cf\u5927\u4e8e 1\uff0c\u5219\u5f53\u524d\u5c40\u9762\u4e0e\u6807\u51c6\u7684 \\text{Nim} \u535a\u5f08\u76f8\u540c<ul> <li>\u5f02\u6216\u548c\u4e0d\u4e3a 0 \u65f6\uff0c\u5148\u624b\u73a9\u5bb6\u6709\u5fc5\u80dc\u7b56\u7565\uff1b</li> <li>\u5f02\u6216\u548c\u6070\u4e3a 0 \u65f6\uff0c\u540e\u624b\u73a9\u5bb6\u6709\u5fc5\u80dc\u7b56\u7565\u3002</li> </ul> </li> </ul> \u4e3a\u4ec0\u4e48\uff1f <p>\u8bbe\u6709 n \u5806\u7269\u54c1\uff0c\u5206\u522b\u4e3a a_1, a_2, \\ldots, a_n\u3002\u5b9a\u4e49\u5f02\u6216\u548c\u4e3a S = a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n\u3002  </p> <ul> <li>\u5982\u679c\u6240\u6709\u5806\u7684\u7269\u54c1\u6570\u91cf\u5747\u4e3a 1\uff0c\u5219\u6e38\u620f\u53d8\u4e3a\u4e24\u4eba\u8f6e\u6d41\u53d6\u8d70\u5355\u4e2a\u7269\u54c1\u7684\u6e38\u620f\u3002  <ul> <li>\u5f53\u5806\u7684\u6570\u91cf\u4e3a\u5947\u6570\u65f6\uff0c\u5148\u624b\u73a9\u5bb6\u65e0\u8bba\u5982\u4f55\u53d6\u8d70\u4e00\u4e2a\u7269\u54c1\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5269\u4f59\u5806\u7684\u6570\u91cf\u53d8\u4e3a\u5076\u6570\uff0c\u4ece\u800c\u4f7f\u5f97\u540e\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u53d6\u8d70\u4e00\u4e2a\u7269\u54c1\uff0c\u4f7f\u5f97\u5269\u4f59\u5806\u7684\u6570\u91cf\u518d\u6b21\u53d8\u4e3a\u5947\u6570\u3002\u6700\u7ec8\uff0c\u5f53\u53ea\u5269\u4e0b\u4e00\u4e2a\u5806\u65f6\uff0c\u5148\u624b\u73a9\u5bb6\u53ea\u80fd\u53d6\u8d70\u6700\u540e\u4e00\u4e2a\u7269\u54c1\uff0c\u4ece\u800c\u8f93\u6389\u6e38\u620f\u3002  </li> <li>\u5f53\u5806\u7684\u6570\u91cf\u4e3a\u5076\u6570\u65f6\uff0c\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u53d6\u8d70\u4e00\u4e2a\u7269\u54c1\uff0c\u4f7f\u5f97\u5269\u4f59\u5806\u7684\u6570\u91cf\u53d8\u4e3a\u5947\u6570\uff0c\u4ece\u800c\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\u3002\u6700\u7ec8\uff0c\u5f53\u53ea\u5269\u4e0b\u4e00\u4e2a\u5806\u65f6\uff0c\u540e\u624b\u73a9\u5bb6\u53ea\u80fd\u53d6\u8d70\u6700\u540e\u4e00\u4e2a\u7269\u54c1\uff0c\u4ece\u800c\u8f93\u6389\u6e38\u620f\u3002</li> </ul> </li> <li>\u5982\u679c\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5806\u7684\u7269\u54c1\u6570\u91cf\u5927\u4e8e 1\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u9002\u5f53\u7684\u64cd\u4f5c\u5c06\u5c40\u9762\u8f6c\u5316\u4e3a\u6807\u51c6\u7684 \\text{Nim} \u535a\u5f08\u5c40\u9762\u3002  <ul> <li>\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u4e00\u4e2a\u5806\u5e76\u53d6\u8d70\u9002\u5f53\u6570\u91cf\u7684\u7269\u54c1\uff0c\u4f7f\u5f97\u65b0\u7684\u5f02\u6216\u548c\u53d8\u4e3a\u96f6\uff0c\u4ece\u800c\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\u3002  </li> <li>\u8fd9\u6837\uff0c\u65e0\u8bba\u540e\u624b\u73a9\u5bb6\u5982\u4f55\u64cd\u4f5c\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5f02\u6216\u548c\u53d8\u4e3a\u975e\u96f6\uff0c\u4ece\u800c\u4f7f\u5f97\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u6301\u4f18\u52bf\u3002</li> </ul> </li> </ul> <p>\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\uff0c\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u786e\u4fdd\u5728\u6bcf\u6b21\u8f6e\u5230\u81ea\u5df1\u65f6\uff0c\u5c40\u9762\u603b\u662f\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\uff0c\u6700\u7ec8\u8d62\u5f97\u6e38\u620f\u3002</p> \u5c0f\u7ea6\u7ff0\u7684\u6e38\u620f C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool misere_nim_game(vector&lt;int&gt; &amp;piles) {\n  int xor_sum    = 0;\n  int count_ones = 0;  // \u53ea\u6709\u4e00\u9897\u77f3\u5934\u7684\u5806\u6570\n  for (int stones : piles) {\n    xor_sum ^= stones;\n    if (stones == 1) { count_ones++; }\n  }\n  if (count_ones == piles.size()) {  // \u5168\u662f\u5355\u77f3\u5806\n    return (count_ones % 2 == 0);    // \u77f3\u5934\u5806\u6570\u4e3a\u5076\u6570\u65f6\uff0c\u5148\u624b\u5fc5\u80dc\n  }\n  return (xor_sum != 0);  // \u5426\u5219\u4e0e\u666e\u901a\u5c3c\u59c6\u535a\u5f08\u76f8\u540c\n}\n\nvoid solve() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; piles(n);\n  for (int i = 0; i &lt; n; i++) { cin &gt;&gt; piles[i]; }\n  if (misere_nim_game(piles)) {\n    cout &lt;&lt; \"John\\n\";\n  } else {\n    cout &lt;&lt; \"Brother\\n\";\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#\u6590\u6ce2\u90a3\u5951\u535a\u5f08","title":"\u6590\u6ce2\u90a3\u5951\u535a\u5f08","text":"<p>\u6590\u6ce2\u90a3\u5951\u535a\u5f08\uff08\\text{Fibonacci Game}\uff09\u901a\u5e38\u63cf\u8ff0\u4e3a\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u4ece\u4e00\u4e2a\u5806\u4e2d\u53d6\u8d70\u7269\u54c1\uff0c\u76ee\u6807\u662f\u907f\u514d\u6210\u4e3a\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\u7684\u73a9\u5bb6\u3002</p> <p>\u5728\u6590\u6ce2\u90a3\u5951\u535a\u5f08\u4e2d\uff0c\u7b2c\u4e00\u6b21\u53ef\u4ee5\u53d6\u8d70\u4efb\u610f\u6570\u91cf\u7684\u7269\u54c1\uff08\u81f3\u5c11 1 \u4e2a\uff09\uff0c\u4f46\u4e0d\u80fd\u5168\u90e8\u53d6\u5b8c\u3002\u4e4b\u540e\u6bcf\u6b21\u73a9\u5bb6\u53ea\u80fd\u53d6\u8d70\u4e0d\u8d85\u8fc7\u4e0a\u4e00\u6b21\u73a9\u5bb6\u53d6\u8d70\u6570\u91cf\u7684\u7269\u54c1\u7684 2 \u500d\u3002\u6e38\u620f\u7684\u80dc\u5229\u6761\u4ef6\u662f\u4f7f\u5bf9\u624b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u6709\u6548\u7684\u64cd\u4f5c\u3002</p> \u9f50\u80af\u591a\u592b\u5b9a\u7406\uff08\\text{Zeckendorf's Theorem}\uff09 <p>\u6bcf\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u4e3a\u82e5\u5e72\u4e0d\u76f8\u90bb\u6590\u6ce2\u90a3\u5951\u6570\u4e4b\u548c\uff08\u4e0d\u5305\u62ec F_1 = 1 \u548c F_2 = 1\uff09\u3002  </p> <p>Example</p> <p>\u4f8b\u5982\uff0c100 = 89 + 8 + 3\uff0c\u5176\u4e2d 89, 8, 3 \u90fd\u662f\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u5728\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e2d\u4e0d\u76f8\u90bb\u3002</p> \u4e3a\u4ec0\u4e48\uff1f <p>\u8bbe\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e3a F_1 = 1, F_2 = 1, F_3 = 2, F_4 = 3, F_5 = 5, F_6 = 8, \\ldots\u3002 \u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 n\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u627e\u5230\u5176\u6590\u6ce2\u90a3\u5951\u8868\u793a\uff1a  </p> <ol> <li>\u627e\u5230\u6700\u5927\u7684\u6590\u6ce2\u90a3\u5951\u6570 F_k\uff0c\u4f7f\u5f97 F_k \\leq n </li> <li>\u5c06 n \u51cf\u53bb F_k\uff0c\u5f97\u5230\u65b0\u7684\u6570 n' = n - F_k </li> <li>\u91cd\u590d\u6b65\u9aa4 1 \u548c 2\uff0c\u76f4\u5230 n' \u4e3a 0 </li> </ol> <p>\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u6bcf\u6b21\u9009\u62e9\u7684\u6590\u6ce2\u90a3\u5951\u6570\u90fd\u662f\u6700\u5927\u7684\uff0c\u56e0\u6b64\u4e0d\u4f1a\u9009\u62e9\u76f8\u90bb\u7684\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u5426\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u76f8\u90bb\u7684\u6590\u6ce2\u90a3\u5951\u6570\u66ff\u6362\u4e3a\u5b83\u4eec\u7684\u548c\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u5927\u7684\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u8fdd\u53cd\u4e86\u9009\u62e9\u6700\u5927\u7684\u539f\u5219\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e0d\u76f8\u90bb\u6590\u6ce2\u90a3\u5951\u6570\u4e4b\u548c\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u8868\u793a\u7684\u552f\u4e00\u6027\u3002</p> <p>\u5f53\u524d\u5c40\u9762\u4e3a n \u4e2a\u7269\u54c1\u65f6\uff0c\u5148\u624b\u73a9\u5bb6\u7684\u5fc5\u80dc\u6761\u4ef6\u662f n \u4e0d\u662f\u6590\u6ce2\u90a3\u5951\u6570\u3002</p> \u4e3a\u4ec0\u4e48\uff1f <p>\u8bbe\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e3a F_1 = 1, F_2 = 1, F_3 = 2, F_4 = 3, F_5 = 5, F_6 = 8, \\ldots\u3002</p> <ul> <li>\u5982\u679c n \u662f\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u5373 n = F_k\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u65e0\u8bba\u53d6\u8d70\u591a\u5c11\u4e2a\u7269\u54c1\uff08\u8bb0\u4e3a x\uff0c\u5176\u4e2d 1 \\leq x &lt; F_k\uff09\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5269\u4f59\u7269\u54c1\u6570\u53d8\u4e3a F_k - x\u3002     \u6839\u636e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u6027\u8d28\uff0cF_k - x \u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e0d\u76f8\u90bb\u7684\u6590\u6ce2\u90a3\u5951\u6570\u4e4b\u548c\uff08\u9f50\u80af\u591a\u592b\u5b9a\u7406\uff09\u3002     \u56e0\u6b64\uff0c\u540e\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9002\u5f53\u7684\u64cd\u4f5c\uff0c\u5c06\u5269\u4f59\u7269\u54c1\u6570\u9010\u6b65\u51cf\u5c11\u5230\u4e0b\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u4ece\u800c\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\u3002  </li> <li>\u5982\u679c n \u4e0d\u662f\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u6570\u91cf x\uff0c\u4f7f\u5f97\u5269\u4f59\u7269\u54c1\u6570\u53d8\u4e3a\u4e0b\u4e00\u4e2a\u8f83\u5c0f\u7684\u6590\u6ce2\u90a3\u5951\u6570 F_m\uff08\u5176\u4e2d F_m &lt; n &lt; F_{m+1}\uff09\u3002     \u8fd9\u6837\uff0c\u65e0\u8bba\u540e\u624b\u73a9\u5bb6\u5982\u4f55\u64cd\u4f5c\uff0c\u90fd\u4f1a\u4f7f\u5f97\u5269\u4f59\u7269\u54c1\u6570\u53d8\u4e3a\u975e\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u4ece\u800c\u4f7f\u5f97\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u6301\u4f18\u52bf\u3002</li> </ul> <p>\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\uff0c\u5148\u624b\u73a9\u5bb6\u53ef\u4ee5\u786e\u4fdd\u5728\u6bcf\u6b21\u8f6e\u5230\u81ea\u5df1\u65f6\uff0c\u5c40\u9762\u603b\u662f\u5904\u4e8e\u6709\u5229\u4f4d\u7f6e\uff0c\u6700\u7ec8\u8d62\u5f97\u6e38\u620f\u3002</p> \u53d6\u77f3\u5b50\u6e38\u620f C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, max_n = -1;\n  vector&lt;int64_t&gt; n_values;\n  while (cin &gt;&gt; n) {\n    if (n == 0) { break; }\n    n_values.push_back(n);\n    max_n = max(max_n, n);\n  }\n\n  vector&lt;int64_t&gt; fib = {0, 1};\n  while (true) {\n    int64_t next = fib[fib.size() - 1] + fib[fib.size() - 2];\n    fib.push_back(next);\n    if (next &gt; max_n) { break; }\n  }\n\n  for (int64_t n : n_values) {\n    if (binary_search(fib.begin(), fib.end(), n)) {\n      cout &lt;&lt; \"Second win\\n\";\n    } else {\n      cout &lt;&lt; \"First win\\n\";\n    }\n  }\n  return 0;\n}\n</code></pre> <p>\u5982\u679c\u5141\u8bb8\u7b2c\u4e00\u6b21\u53d6\u5b8c\u6240\u6709\u7269\u54c1\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u5fc5\u80dc\u3002\u4f46\u662f\u5148\u624b\u60f3\u77e5\u9053\uff0c\u81ea\u5df1\u80fd\u5426\u901a\u8fc7\u7b2c\u4e00\u6b21\u4e0d\u53d6\u5b8c\u6240\u6709\u7269\u54c1\u7684\u65b9\u5f0f\uff0c\u786e\u4fdd\u81ea\u5df1\u5728\u540e\u7eed\u7684\u6e38\u620f\u4e2d\u4ecd\u7136\u5904\u4e8e\u5fc5\u80dc\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u5e94\u8be5\u81f3\u5c11\u53d6\u8d70\u591a\u5c11\u4e2a\u7269\u54c1\u5c31\u80fd\u786e\u4fdd\u81ea\u5df1\u5fc5\u80dc\u3002</p> <p>\u5c06 n \u5206\u89e3\u4e3a\u82e5\u5e72\u4e0d\u76f8\u90bb\u6590\u6ce2\u90a3\u5951\u6570\u4e4b\u548c n = F_{k_1} + F_{k_2} + \\ldots + F_{k_m}\uff0c\u5176\u4e2d F_{k1} &lt; F_{k2} &lt; \\ldots &lt; F_{km}\uff0c\u5219\u5148\u624b\u73a9\u5bb6\u81f3\u5c11\u9700\u8981\u53d6\u8d70 F_{k_1} \u4e2a\u7269\u54c1\uff0c\u624d\u80fd\u786e\u4fdd\u81ea\u5df1\u5904\u4e8e\u5fc5\u80dc\u4f4d\u7f6e\u3002  </p> \u4e3a\u4ec0\u4e48\uff1f <p>\u5c06\u77f3\u5b50\u603b\u6570\u5212\u5206\u4e3a\u82e5\u5e72\u4e0d\u76f8\u90bb\u7684\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u6bcf\u6b21\u53d6\u5f53\u524d\u6700\u5c0f\u7684\u6590\u6ce2\u90a3\u5951\u6570 f_i\uff0c\u4e0b\u4e00\u90e8\u5206\u7684\u6700\u5c0f\u503c\u4e3a f_{i+2}\u3002\u7531\u4e8e 2f_i &lt; f_{i+2}\uff0c\u4fdd\u8bc1\u4e86\u5212\u5206\u7684\u5408\u6cd5\u6027\u3002</p> <p>\u5148\u624b\u7b56\u7565\uff1a</p> <ul> <li>\u5148\u624b\u6bcf\u6b21\u53d6\u8d70\u5f53\u524d\u6700\u5c0f\u7684\u6590\u6ce2\u90a3\u5951\u6570</li> <li>\u7531\u4e8e\u540e\u624b\u65e0\u6cd5\u4e00\u6b21\u53d6\u8d70\u4e0b\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u540e\u624b\u53ea\u80fd\u53d6\u90e8\u5206\u77f3\u5b50</li> <li>\u53d6\u5b8c\u5f53\u524d\u90e8\u5206\u540e\uff0c\u5148\u624b\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u6309\u7167\u76f8\u540c\u7684\u7b56\u7565\u64cd\u4f5c</li> </ul> HRPA C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t fibonacci_game(int64_t n) {\n  if (n &lt;= 2) { return 1; }\n  vector&lt;int64_t&gt; fib = {1, 2};  // \u6590\u6ce2\u90a3\u5951\u6570\u5217\n  while (true) {\n    int64_t next = fib[fib.size() - 1] + fib[fib.size() - 2];\n    fib.push_back(next);\n    if (next &gt; n) { break; }\n  }\n  // \u5206\u89e3n, \u627e\u5230\u6700\u5c0f\u7684\u6590\u6ce2\u90a3\u5951\u6570\n  while (true) {\n    auto it = std::lower_bound(fib.begin(), fib.end(), n);  // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8en\u7684\u6590\u6ce2\u90a3\u5951\u6570\n    if (*it == n) { return n; }                             // n \u672c\u8eab\u5c31\u662f\u6590\u6ce2\u90a3\u5951\u6570\n    --it;                                                   // it \u6307\u5411\u5c0f\u4e8e n \u7684\u6700\u5927\u6590\u6ce2\u90a3\u5951\u6570\n    n -= *it;\n  }\n}\n\nint main() {\n  int64_t n;\n  cin &gt;&gt; n;\n  cout &lt;&lt; fibonacci_game(n) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#\u5a01\u4f50\u592b\u535a\u5f08","title":"\u5a01\u4f50\u592b\u535a\u5f08","text":"<p>\u5a01\u4f50\u592b\u535a\u5f08\uff08\\text{Wythoff's Game}\uff09\u901a\u5e38\u63cf\u8ff0\u4e3a\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u4ece\u4e24\u4e2a\u5806\u4e2d\u53d6\u8d70\u7269\u54c1\uff0c\u76ee\u6807\u662f\u907f\u514d\u6210\u4e3a\u65e0\u6cd5\u7ee7\u7eed\u53d6\u7269\u54c1\u7684\u73a9\u5bb6\u3002</p> <p>\u5728\u5a01\u4f50\u592b\u535a\u5f08\u4e2d\uff0c\u73a9\u5bb6\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u7684\u5806\u4e2d\u53d6\u8d70\u4efb\u610f\u6570\u91cf\u7684\u7269\u54c1\uff08\u81f3\u5c11 1 \u4e2a\uff09\uff0c\u6216\u8005\u4ece\u4e24\u4e2a\u5806\u4e2d\u540c\u65f6\u53d6\u8d70\u76f8\u540c\u6570\u91cf\u7684\u7269\u54c1\u3002\u6e38\u620f\u7684\u80dc\u5229\u6761\u4ef6\u662f\u4f7f\u5bf9\u624b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u6709\u6548\u7684\u64cd\u4f5c\u3002</p> <p></p> <p>\u7ed3\u8bba\uff1a</p> <p>\u5f53\u524d\u5c40\u9762 (a, b)\uff08a \\leq b\uff09\u4e3a\u540e\u624b\u5fc5\u80dc\u5c40\u9762\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u6574\u6570 k\uff0c\u4f7f\u5f97 a = \\lfloor k \\phi \\rfloor \u4e14 b = \\lfloor k \\phi^2 \\rfloor\uff0c\u5176\u4e2d \\phi = \\frac{1 + \\sqrt{5}}{2} \u662f\u9ec4\u91d1\u6bd4\u4f8b\u3002</p> <p>\u7531 \\phi^2 = \\phi + 1 \u53ef\u5f97b - a = \\lfloor k \\phi^2 \\rfloor - \\lfloor k \\phi \\rfloor = \\lfloor k (\\phi + 1) \\rfloor - \\lfloor k \\phi \\rfloor = \\lfloor k \\phi \\rfloor + k - \\lfloor k \\phi \\rfloor = k\u3002</p> <p>\u56e0\u6b64\uff0cb - a = k\u3002</p> <p></p> <p>\u5224\u65ad\u6761\u4ef6\uff1a</p> <p>a = \\lfloor k \\phi \\rfloor \\Longrightarrow a \\leq k \\phi \\lt a + 1 \\Longrightarrow 2a \\leq (1 + \\sqrt{5})k \\lt 2(a + 2)(1)</p> <ol> <li>n = \\lfloor x \\rfloor \\Longrightarrow n \\leq x \\lt n + 1</li> </ol> <p>\u5c06 k \u79fb\u9879\u5e76\u4e14\u4e24\u8fb9\u5e73\u65b9\u5f97\uff1a(2a - k)^{2} \\leq 5k^{2} \\lt (2(a + 1) - k)^{2}</p> \u53d6\u77f3\u5b50\u6e38\u620f |\u3010\u6a21\u677f\u3011\u5a01\u4f50\u592b\u535a\u5f08 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nbool wythoff_game(int64_t a, int64_t b) {\n  if (a &gt; b) { swap(a, b); }\n  int64_t k     = b - a;\n  int64_t left  = (2 * a - k) * (2 * a - k);\n  int64_t mid   = 5 * k * k;\n  int64_t right = (2 * (a + 1) - k) * (2 * (a + 1) - k);\n  // \u5148\u624b\u5fc5\u80dc\u5c40\u9762\n  return mid &lt; left || mid &gt;= right;  // \u7b49\u4ef7\u4e8e a != floor(k * phi)\n}\n\nint main() {\n  int64_t a, b;\n  cin &gt;&gt; a &gt;&gt; b;\n  if (a == 0 &amp;&amp; b == 0) {  // \u7279\u5224\n    cout &lt;&lt; 0 &lt;&lt; \"\\n\";\n    return 0;\n  }\n  cout &lt;&lt; (wythoff_game(a, b) ? 1 : 0) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/Game/#sg\u51fd\u6570","title":"SG\u51fd\u6570","text":"<p>\u5728\u7ec4\u5408\u535a\u5f08\u8bba\u4e2d\uff0cSG \u51fd\u6570\uff08\\text{Sprague-Grundy Function}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5206\u6790\u548c\u89e3\u51b3\u65e0\u504f\u535a\u5f08\uff08\\text{Impartial Game}\uff09\u7684\u6570\u5b66\u5de5\u5177\u3002SG \u51fd\u6570\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u6bcf\u4e2a\u5c40\u9762\u6620\u5c04\u5230\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u79f0\u4e3a\u8be5\u5c40\u9762\u7684\u683c\u6717\u7279\u503c\uff08\\text{Grundy Value}\uff09\u3002\u901a\u8fc7\u8ba1\u7b97\u683c\u6717\u7279\u503c\uff0c\u53ef\u4ee5\u5224\u65ad\u5f53\u524d\u5c40\u9762\u662f\u5fc5\u80dc\u5c40\u9762\u8fd8\u662f\u5fc5\u8d25\u5c40\u9762\u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u65e0\u5411\u56fe\u4e0a\u7684\u65e0\u7a77\u6e38\u620f\uff08\u5982\u53d6\u77f3\u5b50\u6e38\u620f\uff09\uff0c\u6bcf\u4e2a\u5c40\u9762\u90fd\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 SG \u503c\u3002</p> <p>SG \u503c\u7684\u9012\u63a8\u5b9a\u4e49\uff1a</p> <ul> <li>\u7ec8\u6b62\u5c40\u9762\uff08\u65e0\u6cd5\u518d\u8d70\uff09\u7684 SG \u503c\u4e3a 0</li> <li>\u975e\u7ec8\u6b62\u5c40\u9762\u7684 SG \u503c\u4e3a\u6240\u6709\u4e0b\u4e00\u6b65\u80fd\u5230\u8fbe\u7684\u5c40\u9762 SG \u503c\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\uff08MEX\uff09\u3002</li> </ul> <p>SG \u5b9a\u7406</p> <p>\u4e00\u4e2a\u7531\u82e5\u5e72\u5b50\u6e38\u620f\u7ec4\u6210\u7684\u5408\u6210\u6e38\u620f\u7684 SG \u503c\u4e3a\u5404\u5b50\u6e38\u620f SG \u503c\u7684\u5f02\u6216\u548c\u3002</p> <p>\u56e0\u6b64\uff0c\u5408\u6210\u6e38\u620f\u7684\u5148\u624b\u5fc5\u80dc\u6761\u4ef6\u662f\u5404\u5b50\u6e38\u620f SG \u503c\u7684\u5f02\u6216\u548c\u4e0d\u4e3a 0</p> <p>\u8ba1\u7b97 SG \u51fd\u6570</p> C++<pre><code>int get_sg(int state, const vector&lt;vector&lt;int&gt;&gt; &amp;moves, vector&lt;int&gt; &amp;sg) {\n  if (sg[state] != -1) { return sg[state]; }\n  unordered_set&lt;int&gt; next_sg;\n  for (int move : moves[state]) { next_sg.insert(get_sg(move, moves, sg)); }\n  int g = 0;\n  while (next_sg.contains(g)) { ++g; }\n  return sg[state] = g;\n}\n</code></pre>","tags":["\u535a\u5f08","Game Theory","\u5df4\u4ec0\u535a\u5f08","Bash Game","Nim\u535a\u5f08","Nim Game","\u53cd\u5c3c\u59c6\u535a\u5f08","\u53cd\u5e38\u6e38\u620f","Mis\u00e8re Nim","\u6590\u6ce2\u90a3\u5951\u535a\u5f08","Fibonacci Game","\u5a01\u4f50\u592b\u535a\u5f08","Wythoff's Game","SG\u51fd\u6570","Sprague-Grundy Function"]},{"location":"code/algorithm/MooreVoting/","title":"\u6469\u5c14\u6295\u7968","text":"","tags":["Moore Voting","Misra-Gries Algorithm"]},{"location":"code/algorithm/MooreVoting/#\u6469\u5c14\u6295\u7968","title":"\u6469\u5c14\u6295\u7968","text":"<p>\u6469\u5c14\u6295\u7968\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6570\u7ec4\u4e2d\u5bfb\u627e\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u5143\u7d20\u7684\u9ad8\u6548\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u62b5\u6d88\u4e0d\u540c\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6700\u7ec8\u627e\u5230\u53ef\u80fd\u7684\u5019\u9009\u5143\u7d20\u3002</p> \u591a\u6570\u5143\u7d20 C++<pre><code>class Solution {\n public:\n  int majorityElement(vector&lt;int&gt; &amp;nums) {\n    int candidate = nums[0];\n    int count     = 1;\n    for (int num : nums) {\n      if (count == 0) { candidate = num; }\n      count += (num == candidate) ? 1 : -1;\n    }\n    return candidate;\n  }\n};\n</code></pre>","tags":["Moore Voting","Misra-Gries Algorithm"]},{"location":"code/algorithm/MooreVoting/#misra-gries-\u7b97\u6cd5","title":"Misra-Gries \u7b97\u6cd5","text":"<p>Misra-Gries \u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6570\u636e\u6d41\u4e2d\u5bfb\u627e\u9891\u7e41\u5143\u7d20\u7684\u7b97\u6cd5\u3002\u4e0e\u6469\u5c14\u6295\u7968\u7b97\u6cd5\u7c7b\u4f3c\uff0c\u5b83\u4e5f\u4f7f\u7528\u4e86\u6295\u7968\u7684\u601d\u60f3\uff0c\u4f46\u5728\u5904\u7406\u6570\u636e\u6d41\u65f6\u66f4\u52a0\u9ad8\u6548\u3002</p>  \\begin{aligned} &amp;\\textbf{Algorithm } \\text{Misra-Gries}\\\\ &amp;\\quad t,d \\gets \\varnothing, 0\\\\ &amp;\\quad \\textbf{for } i=0 \\text{ to } n-1 \\textbf{ do}\\\\ &amp;\\qquad \\textbf{if } b_i \\notin t \\textbf{ then } t \\gets t \\cup \\{b_i\\},\\ d \\gets d+1\\\\ &amp;\\qquad \\textbf{else } t \\gets t \\cup \\{b_i\\},\\ d \\gets d\\\\ &amp;\\qquad \\textbf{if } d = k \\textbf{ then } \\text{delete } k \\text{ distinct values from } t;\\ \\text{update } d\\\\ &amp;\\quad \\textbf{end for} \\end{aligned}  <p>\u7b49\u4ef7\u5b9e\u73b0\uff1a</p>  \\begin{aligned} &amp;\\textbf{Algorithm } \\text{Misra-Gries}\\\\ &amp;\\quad T \\leftarrow \\varnothing,\\ \\text{counter map } C \\text{ (empty)}\\\\ &amp;\\quad \\textbf{for } i=0 \\text{ to } n-1 \\textbf{ do}\\\\ &amp;\\qquad \\textbf{if } b_i \\in T \\textbf{ then } C[b_i] \\leftarrow C[b_i]+1\\\\ &amp;\\qquad \\textbf{else if } |T| &lt; k-1 \\textbf{ then } T \\leftarrow T \\cup \\{b_i\\},\\ C[b_i]\\leftarrow 1\\\\ &amp;\\qquad \\textbf{else } \\text{for each } x\\in T:\\ C[x]\\leftarrow C[x]-1;\\ \\text{if } C[x]=0 \\text{ then } T\\leftarrow T\\setminus\\{x\\}\\\\ &amp;\\quad \\textbf{end for} \\end{aligned}  <p>\u5bfb\u627e\u6240\u6709\u51fa\u73b0\u8d85\u8fc7 n/k \u6b21\u7684\u5143\u7d20</p> <p>\u7ef4\u62a4 k-1 \u4e2a\u5019\u9009\u5143\u7d20\u53ca\u5176\u8ba1\u6570\u5668\uff0c\u56e0\u4e3a\u6700\u591a\u53ea\u80fd\u6709 k-1 \u4e2a\u5143\u7d20\u6ee1\u8db3\u8be5\u6761\u4ef6\u3002</p> \u591a\u6570\u5143\u7d20 C++<pre><code>class Solution {\npublic:\n  vector&lt;int&gt; majorityElement(vector&lt;int&gt; &amp;nums) {\n    int k = 3;  // Majority threshold is n/k\n    vector&lt;pair&lt;int, int&gt;&gt; candidates(k - 1, {0, 0});\n    for (int num : nums) { UpdateMajority(candidates, num); }\n    vector&lt;int&gt; result;\n    result.reserve(candidates.size());\n    for (auto [candidate, count] : candidates) {  // verify candidates\n      if (count == 0) { continue; }\n      count = 0;\n      for (int num : nums) {\n        if (num == candidate) { count++; }\n      }\n      if (count &gt; nums.size() / k) { result.push_back(candidate); }\n    }\n    return result;\n  }\n\n  void UpdateMajority(vector&lt;pair&lt;int, int&gt;&gt; &amp;candidates, int num) {\n    for (auto &amp;[candidate, count] : candidates) {  // Already a candidate\n      if (candidate == num &amp;&amp; count &gt; 0) {\n        count++;\n        return;\n      }\n    }\n    for (auto &amp;[candidate, count] : candidates) {  // Find an empty candidate slot\n      if (count == 0) {\n        candidate = num;\n        count     = 1;\n        return;\n      }\n    }\n    // Decrease count for all candidates\n    for (auto &amp;[candidate, count] : candidates) { count = max(0, count - 1); }\n  }\n};\n</code></pre> Buratsuta 3 <p>\u67e5\u8be2\u533a\u95f4\u5185\u6240\u6709\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e00\uff08\\lfloor \\frac{r - l + 1}{3} \\rfloor\uff09\u7684\u5143\u7d20\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;array&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int64_t K = 2;\n\nstruct segment_tree {\n  using PII       = pair&lt;int64_t, int64_t&gt;;  // (value, count)\n  using slot_type = array&lt;PII, K&gt;;\n  vector&lt;slot_type&gt; candidates;\n\n  explicit segment_tree(int64_t n) : candidates(n * 4) {}\n\n  static void update(slot_type &amp;now, int64_t candidate, int64_t count) {\n    while (count &gt; 0) {                  // \u63d2\u5165\u76f4\u5230count\u4e3a0\n      for (int64_t i = 0; i &lt; K; i++) {  // 1. \u5148\u5c1d\u8bd5\u5408\u5e76\n        if (now[i].first == candidate &amp;&amp; now[i].second &gt; 0) {\n          now[i].second += count;\n          return;\n        }\n      }\n      for (int64_t i = 0; i &lt; K; i++) {  // 2. \u5c1d\u8bd5\u63d2\u5165\u7a7a\u69fd\n        if (now[i].second == 0) {\n          now[i] = {candidate, count};\n          return;\n        }\n      }\n      // 3. \u6ca1\u6709\u7a7a\u69fd\uff0c\u5168\u90e8\u51cf\u53bb\u6700\u5c0f\u503c\n      int64_t min_val = count;\n      for (int64_t i = 0; i &lt; K; i++) { min_val = min(min_val, now[i].second); }\n      for (int64_t i = 0; i &lt; K; i++) { now[i].second -= min_val; }\n      count -= min_val;\n    }\n  }\n\n  void push_up(int64_t i) {  // \u5408\u5e76\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u5019\u9009\n    for (const auto &amp;[candidate, count] : candidates[2 * i]) {\n      if (count &gt; 0) { update(candidates[i], candidate, count); }\n    }\n    for (const auto &amp;[candidate, count] : candidates[2 * i + 1]) {\n      if (count &gt; 0) { update(candidates[i], candidate, count); }\n    }\n  }\n\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u5019\u9009\n      candidates[i][0] = {nums[left], 1};\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  slot_type query(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return candidates[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    slot_type left_res, right_res;\n    if (ql &lt;= mid) { left_res = query(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { right_res = query(ql, qr, 2 * i + 1, mid + 1, r); }\n    // \u5408\u5e76\u5de6\u53f3\u7ed3\u679c\n    slot_type res;\n    for (const auto &amp;[candidate, count] : left_res) {\n      if (count &gt; 0) { update(res, candidate, count); }\n    }\n    for (const auto &amp;[candidate, count] : right_res) {\n      if (count &gt; 0) { update(res, candidate, count); }\n    }\n    return res;\n  }\n};\n\nint solve() {\n  int64_t n, q;\n  cin &gt;&gt; n &gt;&gt; q;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  vector&lt;int64_t&gt; sorted_nums = nums;\n  sort(sorted_nums.begin() + 1, sorted_nums.end());\n  auto get_rank = [&amp;](int64_t v) {  // \u83b7\u53d6\u503c\u7684\u6392\u540d, \u4ece1\u5f00\u59cb\n    return lower_bound(sorted_nums.begin() + 1, sorted_nums.end(), v) - sorted_nums.begin();\n  };\n  vector&lt;vector&lt;int64_t&gt;&gt; indexs(n + 1);\n  // \u8bb0\u5f55\u6bcf\u4e2a\u6392\u540d\u5bf9\u5e94\u7684\u539f\u59cb\u4e0b\u6807\n  for (int64_t i = 1; i &lt;= n; i++) {\n    nums[i] = get_rank(nums[i]);\n    indexs[nums[i]].push_back(i);\n  }\n  // \u83b7\u53d6\u67d0\u4e2a\u6392\u540d\u5728[l, r]\u533a\u95f4\u5185\u7684\u51fa\u73b0\u6b21\u6570\n  auto get_count = [&amp;](int64_t rank, int64_t l, int64_t r) {\n    return (upper_bound(indexs[rank].begin(), indexs[rank].end(), r)\n            - lower_bound(indexs[rank].begin(), indexs[rank].end(), l));\n  };\n\n  segment_tree seg_tree(n);\n  seg_tree.build(1, 1, n, nums);\n  while ((q--) != 0) {\n    int64_t l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    auto candidates = seg_tree.query(l, r, 1, 1, n);\n    vector&lt;int64_t&gt; ans;\n    for (const auto &amp;[rank, _] : candidates) {\n      if (get_count(rank, l, r) &gt; (r - l + 1) / 3) { ans.push_back(rank); }\n    }\n    sort(ans.begin(), ans.end());\n    for (int64_t x : ans) { cout &lt;&lt; sorted_nums[x] &lt;&lt; \" \"; }\n    if (ans.empty()) { cout &lt;&lt; \"-1\"; }\n    cout &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["Moore Voting","Misra-Gries Algorithm"]},{"location":"code/algorithm/PrefixAndDifference/","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206","text":"","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u524d\u7f00\u548c\u4e0e\u5dee\u5206","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206","text":"","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u524d\u7f00\u548c","title":"\u524d\u7f00\u548c","text":"<p>\u524d\u7f00\u548c\uff08\\text{Prefix Sum}\uff09\u662f\u6307\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6240\u6709\u5143\u7d20\u7684\u7d2f\u52a0\u548c\u3002\u524d\u7f00\u548c\u6570\u7ec4\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u4efb\u610f\u5b50\u6570\u7ec4\u7684\u548c\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002  </p>","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u4e00\u7ef4\u4e0e\u4e8c\u7ef4\u524d\u7f00\u548c","title":"\u4e00\u7ef4\u4e0e\u4e8c\u7ef4\u524d\u7f00\u548c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u5176\u524d\u7f00\u548c\u6570\u7ec4 sum \u5b9a\u4e49\u4e3a\uff1a</p> <p>sum[i] =  \\begin{cases}  0, &amp; \\text{if } i = 0 \\\\  sum[i-1] + nums[i-1], &amp; \\text{if } i &gt; 0  \\end{cases} </p> <p>\u4f7f\u7528\u524d\u7f00\u548c\u6570\u7ec4\u8ba1\u7b97\u5b50\u6570\u7ec4 nums[i] \u5230 nums[j] \u7684\u548c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u5b9e\u73b0\uff1a sum(i, j) =  \\begin{cases}  sum[j + 1], &amp; \\text{if } i = 0 \\\\  sum[j + 1] - sum[i], &amp; \\text{if } i &gt; 0 \\end{cases} </p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 matrix\uff0c\u5176\u524d\u7f00\u548c\u6570\u7ec4 sum\u8868\u793a\u4ece\u77e9\u9635\u5de6\u4e0a\u89d2 (0, 0) \u5230\u4f4d\u7f6e (i-1, j-1) \u7684\u5b50\u77e9\u9635\u7684\u5143\u7d20\u548c\uff0c\u5b9a\u4e49\u4e3a\uff1a</p> <p>sum[i][j] =  \\begin{cases} 0, &amp; \\text{if } i = 0 \\text{ or } j = 0 \\\\[2ex] \\begin{aligned} &amp; sum[i-1][j] + sum[i][j-1] - \\\\ &amp; sum[i-1][j-1] + matrix[i-1][j-1], \\end{aligned} &amp; \\text{if } i &gt; 0 \\text{ and } j &gt; 0 \\end{cases} </p> <p>\u4f7f\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u6570\u7ec4\u8ba1\u7b97\u5b50\u77e9\u9635 (row1, col1) \u5230 (row2, col2) \u7684\u548c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u5b9e\u73b0\uff1a \\begin{aligned} sum(row1, col1, row2, col2) &amp;= sum[row2 + 1][col2 + 1] \\\\ &amp;- sum[row1][col2 + 1] - sum[row2 + 1][col1] \\\\ &amp;+ sum[row1][col1] \\\\ \\end{aligned} </p> \u524d\u7f00\u548c \u4e00\u7ef4\u524d\u7f00\u548c\u4e8c\u7ef4\u524d\u7f00\u548c C++<pre><code>struct NumArray {\n  std::vector&lt;int&gt; sum;\n\n  explicit NumArray(std::vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    sum.resize(n + 1, 0);\n    for (int i = 0; i &lt; n; ++i) { sum[i + 1] = sum[i] + nums[i]; }\n  }\n\n  int sumRange(int left, int right) { return sum[right + 1] - sum[left]; }\n};\n</code></pre> C++<pre><code>struct NumMatrix {\n  std::vector&lt;std::vector&lt;int&gt;&gt; sum;\n\n  explicit NumMatrix(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;matrix) {\n    int m = matrix.size();\n    if (m == 0) { return; }\n    int n = matrix[0].size();\n    sum.resize(m + 1, std::vector&lt;int&gt;(n + 1, 0));\n    for (int i = 0; i &lt; m; ++i) {\n      for (int j = 0; j &lt; n; ++j) {\n        sum[i + 1][j + 1] = sum[i][j + 1] + sum[i + 1][j] - sum[i][j] + matrix[i][j];\n      }\n    }\n  }\n\n  int sumRegion(int row1, int col1, int row2, int col2) {\n    return sum[row2 + 1][col2 + 1] - sum[row1][col2 + 1] - sum[row2 + 1][col1] + sum[row1][col1];\n  }\n};\n</code></pre>","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u9ad8\u9636\u524d\u7f00\u548c","title":"\u9ad8\u9636\u524d\u7f00\u548c","text":"<p>\u9ad8\u9636\u524d\u7f00\u548c\u662f\u6307\u5bf9\u524d\u7f00\u548c\u6570\u7ec4\u8fdb\u884c\u591a\u6b21\u524d\u7f00\u548c\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u4e00\u9636\u524d\u7f00\u548c\uff1aS_1(i) = a[1] + a[2] + \\dots + a[i]</li> <li>\u4e8c\u9636\u524d\u7f00\u548c\uff1aS_2(i) = S_1(1) + S_1(2) + \\dots + S_1(i)</li> <li>\u9ad8\u9636\u524d\u7f00\u548c\uff1aS_k(i) = \\sum_{j=1}^i S_{k-1}(j)</li> </ul> <p>\u5c55\u5f00\u53ef\u5f97\uff1aS_k(i) = \\sum_{j=1}^i \\left( \\sum_{t=1}^j S_{k-2}(t) \\right) = \\dots = \\sum_{j=1}^i a[j] \\cdot P(k, i, j) \u5176\u4e2d\uff0cP(k, i, j) \u8868\u793a\u7ec4\u5408\u7cfb\u6570\uff08\u5373 a[j] \u5728 S_k(i) \u4e2d\u7684\u8d21\u732e\u6b21\u6570\uff09\u3002 \u5177\u4f53\u5730\uff0cP(k, i, j) = \\binom{i - j + k - 1}{k - 1}\uff0c\u8868\u793a\u4ece i - j + k - 1 \u4e2a\u4f4d\u7f6e\u4e2d\u9009\u62e9 k - 1 \u4e2a\u4f4d\u7f6e\u7684\u7ec4\u5408\u6570\u3002 \u901a\u8fc7\u5c55\u5f00 P(k, i, j)\uff0c\u53ef\u4ee5\u5c06\u539f\u5f0f\u5316\u4e3a\u591a\u9879\u5f0f\u5f62\u5f0f\uff0c\u4f7f\u7528 k \u4e2a\u6811\u72b6\u6570\u7ec4\uff08BIT\uff09 \u7ef4\u62a4\u4ee5\u4e0b\u524d\u7f00\u548c\uff1a \\sum a[j]\u3001 \\sum j \\cdot a[j]\u3001\\sum j^2 \\cdot a[j]\u3001...\u3001\\sum j^{k-1} \\cdot a[j]\uff0c\u4ece\u800c\u5b9e\u73b0\u9ad8\u9636\u524d\u7f00\u548c\u7684\u9ad8\u6548\u67e5\u8be2\u548c\u66f4\u65b0\u3002  </p> \u4e09\u9636\u524d\u7f00\u548c\u7684\u5177\u4f53\u5c55\u5f00 <p>\u5c55\u5f00 P(3, i, j)\uff1a</p>  P(3, i, j) = \\frac{(i - j + 2)(i - j + 1)}{2} = \\frac{1}{2}\\left((i+1)(i+2) - (2i+3)j + j^2\\right)  <p>\u56e0\u6b64\uff0c\u4e09\u9636\u524d\u7f00\u548c S_3(i) \u53ef\u8868\u793a\u4e3a\uff1a</p>  \\begin{aligned} S_3(i) &amp; = \\frac{1}{2} \\sum_{j=1}^i a[j] \\cdot \\left((i+1)(i+2) - (2i+3)j + j^2\\right) \\\\ &amp; = \\frac{1}{2} \\left( (i+1)(i+2) \\sum_{j=1}^i a[j] - (2i+3) \\sum_{j=1}^i j \\cdot a[j] + \\sum_{j=1}^i j^2 \\cdot a[j] \\right) \\end{aligned}","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u5dee\u5206\u6570\u7ec4","title":"\u5dee\u5206\u6570\u7ec4","text":"<p>\u5dee\u5206\u6570\u7ec4\uff08\\text{Difference Array}\uff09\u662f\u6307\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4e0e\u5176\u524d\u4e00\u4e2a\u5143\u7d20\u7684\u5dee\u503c\u3002\u5dee\u5206\u6570\u7ec4\u53ef\u4ee5\u5feb\u901f\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\u64cd\u4f5c\uff0c\u907f\u514d\u91cd\u590d\u4fee\u6539\u3002  </p>","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u4e00\u7ef4\u4e0e\u4e8c\u7ef4\u5dee\u5206\u6570\u7ec4","title":"\u4e00\u7ef4\u4e0e\u4e8c\u7ef4\u5dee\u5206\u6570\u7ec4","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u5176\u5dee\u5206\u6570\u7ec4 diff \u5b9a\u4e49\u4e3a\uff1a diff[i] =  \\begin{cases} nums[0], &amp; \\text{if } i = 0 \\\\ nums[i] - nums[i-1], &amp; \\text{if } i &gt; 0 \\end{cases} </p> <p>\u4f7f\u7528\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b9e\u73b0\uff1a \u5bf9\u4e8e\u533a\u95f4 [i, j] \u8fdb\u884c\u66f4\u65b0 val:  </p> <ol> <li>\u5c06 diff[i] \u589e\u52a0 val\uff0c\u8868\u793a\u4ece\u4f4d\u7f6e i \u5f00\u59cb\u7684\u6240\u6709\u5143\u7d20\u589e\u52a0 val </li> <li>\u5c06 diff[j + 1] \u51cf\u5c11 val\uff0c\u8868\u793a\u4ece\u4f4d\u7f6e j + 1 \u5f00\u59cb\u7684\u6240\u6709\u5143\u7d20\u51cf\u5c11 val </li> <li>\u6700\u540e\uff0c\u901a\u8fc7\u524d\u7f00\u548c\u8ba1\u7b97\u51fa\u66f4\u65b0\u540e\u7684\u6570\u7ec4 nums </li> </ol> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4 matrix\uff0c\u5176\u5dee\u5206\u6570\u7ec4 diff \u5b9a\u4e49\u4e3a\uff1a diff[i][j] =  \\begin{cases} matrix[0][0], &amp; \\text{if } i = 0 \\text{ and } j = 0 \\\\[2ex] matrix[i][0] - matrix[i-1][0], &amp; \\text{if } i &gt; 0 \\text{ and } j = 0 \\\\[2ex] matrix[0][j] - matrix[0][j-1], &amp; \\text{if } i = 0 \\text{ and } j &gt; 0 \\\\[2ex] \\begin{aligned} &amp; matrix[i][j] - matrix[i-1][j] - \\\\ &amp; matrix[i][j-1] + matrix[i-1][j-1], \\end{aligned} &amp; \\text{if } i &gt; 0 \\text{ and } j &gt; 0 \\end{cases} </p> <p>\u4f7f\u7528\u4e8c\u7ef4\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b9e\u73b0\uff1a \u5bf9\u4e8e\u5b50\u77e9\u9635 [(row1, col1), (row2, col2)] \u8fdb\u884c\u66f4\u65b0:  </p> <ol> <li>\u5c06 diff[row1][col1] \u589e\u52a0 val </li> <li>\u5c06 diff[row1][col2 + 1] \u51cf\u5c11 val </li> <li>\u5c06 diff[row2 + 1][col1] \u51cf\u5c11 val </li> <li>\u5c06 diff[row2 + 1][col2 + 1] \u589e\u52a0 val </li> <li>\u6700\u540e\uff0c\u901a\u8fc7\u524d\u7f00\u548c\u8ba1\u7b97\u51fa\u66f4\u65b0\u540e\u7684\u6570\u7ec4 matrix </li> </ol> \u5dee\u5206\u6570\u7ec4 \u4e00\u7ef4\u5dee\u5206\u6570\u7ec4\u4e8c\u7ef4\u5dee\u5206\u6570\u7ec4 C++<pre><code>struct NumArray {\n  std::vector&lt;int&gt; diff;\n\n  explicit NumArray(const std::vector&lt;int&gt; &amp;nums) : diff(nums.size() + 1) {\n    diff[0] = nums[0];\n    for (int i = 1; i &lt; nums.size(); ++i) { diff[i] = nums[i] - nums[i - 1]; }\n    diff[nums.size()] = -nums.back();\n  }\n\n  void Modify(int left, int right, int val) {\n    diff[left]      += val;\n    diff[right + 1] -= val;\n  }\n\n  void Recover(std::vector&lt;int&gt; &amp;nums) {\n    nums[0] = diff[0];\n    for (int i = 1; i &lt; nums.size(); ++i) { nums[i] = nums[i - 1] + diff[i]; }\n  }\n};\n</code></pre> C++<pre><code>struct NumMatrix {\n  std::vector&lt;std::vector&lt;int&gt;&gt; diff;\n\n  explicit NumMatrix(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;matrix)\n      : diff(matrix.size() + 1, std::vector&lt;int&gt;(matrix[0].size() + 1)) {\n    for (int i = 0; i &lt; matrix.size(); ++i) {\n      for (int j = 0; j &lt; matrix[i].size(); ++j) { Modify(i, j, i, j, matrix[i][j]); }\n    }\n  }\n\n  void Modify(int row1, int col1, int row2, int col2, int val) {\n    diff[row1][col1]         += val;\n    diff[row1][col2 + 1]     -= val;\n    diff[row2 + 1][col1]     -= val;\n    diff[row2 + 1][col2 + 1] += val;\n  }\n\n  void Recover(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;matrix) {\n    int m        = matrix.size();\n    int n        = matrix[0].size();\n    matrix[0][0] = diff[0][0];\n    for (int i = 1; i &lt; m; ++i) { matrix[i][0] = matrix[i - 1][0] + diff[i][0]; }\n    for (int j = 1; j &lt; n; ++j) { matrix[0][j] = matrix[0][j - 1] + diff[0][j]; }\n    for (int i = 1; i &lt; m; ++i) {\n      for (int j = 1; j &lt; n; ++j) {\n        matrix[i][j] = diff[i][j] + matrix[i][j - 1] + matrix[i - 1][j] - matrix[i - 1][j - 1];\n      }\n    }\n  }\n};\n</code></pre>","tags":["prefix","difference"]},{"location":"code/algorithm/PrefixAndDifference/#\u9ad8\u9636\u5dee\u5206\u6570\u7ec4","title":"\u9ad8\u9636\u5dee\u5206\u6570\u7ec4","text":"<p>\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u662f\u6307\u5bf9\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u591a\u6b21\u5dee\u5206\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u3002\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u53ef\u4ee5\u5feb\u901f\u8fdb\u884c\u590d\u6742\u7684\u533a\u95f4\u66f4\u65b0\u64cd\u4f5c\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u5176\u9ad8\u9636\u5dee\u5206\u6570\u7ec4 D_k \u5b9a\u4e49\u4e3a\uff1a  </p> <ul> <li>\u4e00\u9636\u5dee\u5206\u6570\u7ec4\uff1aD_1[i] = nums[i] - nums[i-1] </li> <li>\u4e8c\u9636\u5dee\u5206\u6570\u7ec4\uff1aD_2[i] = D_1[i] - D_1[i-1] </li> <li>\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\uff1aD_k[i] = D_{k-1}[i] - D_{k-1}[i-1]</li> </ul> \u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217\u7684\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u66f4\u65b0 <p>\u5728\u533a\u95f4\u5185\u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u76f8\u5e94\u7684\u66f4\u65b0\u6765\u5b9e\u73b0\u3002</p> <p>\u5bf9\u6570\u7ec4 nums \u7684\u533a\u95f4 [l, r] \u52a0\u4e0a\u9996\u9879\u4e3a s\uff0c\u516c\u5dee\u4e3a d \u7684\u7b49\u5dee\u6570\u5217\uff0c\u5373\u76f8\u5f53\u4e8e\u52a0\u4e0a f(i) = s + (i - l) \\cdot d\u3002</p> <p>\u5047\u8bbe\u521d\u59cb\u6570\u7ec4\u4e3a [0, 0, 0, 0, 0, 0, 0, 0]\uff0c\u5bf9\u533a\u95f4 [1, 5] \u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5373\u539f\u6570\u7ec4\u53d8\u6210 [0, f(l), f(l+1), f(l+2), f(l+3), f(r=l+4), 0, 0]\u3002</p> <p>\u8ba1\u7b97\u4e00\u9636\u5dee\u5206\u6570\u7ec4\uff1a</p>  \\begin{array}{c|l|l|c} \\hline i &amp; \\text{\u8ba1\u7b97\u516c\u5f0f} &amp; \\text{\u8868\u8fbe\u5f0f} &amp; \\text{\u7ed3\u679c} \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; f(l) - 0 &amp; s &amp; s \\\\ 2 &amp; f(l+1) - f(l) &amp; (s + d) - s &amp; d \\\\ 3 &amp; f(l+2) - f(l+1) &amp; (s + 2d) - (s + d) &amp; d \\\\ 4 &amp; f(l+3) - f(l+2) &amp; (s + 3d) - (s + 2d) &amp; d \\\\ 5 &amp; f(l+4) - f(l+3) &amp; (s + 4d) - (s + 3d) &amp; d \\\\ 6 &amp; 0 - f(r = l+4) &amp; -f(r) &amp; -f(r) \\\\ 7 &amp; 0 - 0 &amp; 0 &amp; 0 \\\\ \\hline \\end{array}  <p>\u8ba1\u7b97\u4e8c\u9636\u5dee\u5206\u6570\u7ec4\uff1a</p>  \\begin{array}{c|l|l|c} \\hline i &amp; \\text{\u8ba1\u7b97\u516c\u5f0f} &amp; \\text{\u8868\u8fbe\u5f0f} &amp; \\text{\u7ed3\u679c} \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; f(l) - 0 &amp; s - 0 &amp; s \\\\ 2 &amp; f(l+1) - f(l) - f(l) &amp; (s + d) - s - s &amp; d - s \\\\ 3 &amp; f(l+2) + f(l) - 2f(l+1) &amp; d - d &amp; 0 \\\\ 4 &amp; f(l+3) + f(l+1) - 2f(l+2) &amp; d - d &amp; 0 \\\\ 5 &amp; f(l+4) + f(l+2) - 2f(l+3) &amp; d - d &amp; 0 \\\\ 6 &amp; -f(r) - d &amp; -(e + d) &amp; -f(r+1) \\\\  7 &amp; 0 - (-f(r)) &amp; 0 - (-f(r)) &amp; f(r) \\\\ \\hline \\end{array}  <p>\u4e8c\u9636\u5dee\u5206\u6570\u7ec4\u7684\u66f4\u65b0\u64cd\u4f5c</p> <ol> <li>D_2[l] = D_2[l] + s</li> <li>D_2[l + 1] = D_2[l + 1] + d - s</li> <li>D_2[r + 1] = D_2[r + 1] - (d + e) = D_2[r + 1] - f(r + 1)</li> <li>D_2[r + 2] = D_2[r + 2] + e = D_2[r + 2] + f(r)</li> </ol> \u4e09\u6b65\u5fc5\u6740 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u6240\u6709\u5143\u7d20\u5747\u4e3a 0\u3002\u9700\u8981\u5904\u7406 m \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\uff1a\u5bf9\u533a\u95f4 [l, r] \u4e0a\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u9996\u9879\u4e3a s\uff0c\u672b\u9879\u4e3a e \u7684\u7b49\u5dee\u6570\u5217\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct arithmetic {\n  int n;\n  vector&lt;int64_t&gt; d1, d2;\n\n  explicit arithmetic(int n) : n(n), d1(n + 3, 0), d2(n + 3, 0) {}\n\n  // [l, r] \u52a0\u4e0a\u9996\u9879 s\u3001\u516c\u5dee d \u7684\u7b49\u5dee\u6570\u5217, \u76f8\u5f53\u4e8e f(i) = s + (i - l) * d\n  void add(int l, int r, int64_t s, int64_t d) {\n    int64_t e  = s + (r - l) * d;\n    d2[l]     += s;\n    d2[l + 1] += d - s;\n    d2[r + 1] -= d + e;  // \u5b9e\u9645\u4e0a\u5c31\u662f\u672b\u9879\u7684\u4e0b\u4e00\u9879\n    d2[r + 2] += e;\n  }\n\n  // \u6062\u590d\u539f\u59cb\u6570\u7ec4\n  void recover(vector&lt;int64_t&gt; &amp;nums) {\n    for (int i = 1; i &lt;= n; ++i) {\n      d2[i]   = (d2[i] + d2[i - 1]);\n      d1[i]   = (d1[i] + d1[i - 1] + d2[i]);\n      nums[i] = (nums[i] + d1[i]);\n    }\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  arithmetic a(n);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t l, r, s, e;\n    cin &gt;&gt; l &gt;&gt; r &gt;&gt; s &gt;&gt; e;\n    int64_t d = (e - s) / (r - l);\n    a.add(l, r, s, d);\n  }\n  vector&lt;int64_t&gt; nums_a(n + 1, 0);\n  a.recover(nums_a);\n  int64_t xor_sum = 0, max_val = 0;\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    xor_sum ^= nums_a[i];\n    max_val  = max(max_val, nums_a[i]);\n  }\n  cout &lt;&lt; xor_sum &lt;&lt; ' ' &lt;&lt; max_val &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> \u533a\u95f4\u52a0\u4e8c\u6b21\u51fd\u6570\u5217\u7684\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u66f4\u65b0 <p>\u5728\u533a\u95f4\u5185\u52a0\u4e0a\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570\u5217\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u76f8\u5e94\u7684\u66f4\u65b0\u6765\u5b9e\u73b0\u3002</p> <p>\u5bf9\u6570\u7ec4 nums \u7684\u533a\u95f4 [l, r] \u52a0\u4e0a\u9996\u9879\u4e3a s\uff0c\u4e00\u6b21\u9879\u7cfb\u6570\u4e3a d\uff0c\u4e8c\u6b21\u9879\u7cfb\u6570\u4e3a c \u7684\u4e8c\u6b21\u51fd\u6570\u5217\uff0c\u5373\u76f8\u5f53\u4e8e\u52a0\u4e0a f(i) = s + (i - l) \\cdot d + (i - l)^2 \\cdot c\u3002</p> <p>\u5047\u8bbe\u521d\u59cb\u6570\u7ec4\u4e3a [0, 0, 0, 0, 0, 0, 0, 0]\uff0c\u5bf9\u533a\u95f4 [1, 4] \u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5373\u539f\u6570\u7ec4\u53d8\u6210 [0, f(l), f(l+1), f(l+2), f(r = l+3), 0, 0, 0]\u3002</p> <p>\u8ba1\u7b97\u4e00\u9636\u5dee\u5206\u6570\u7ec4\uff1a</p>  \\begin{array}{c|l|l|c} \\hline i &amp; \\text{\u8ba1\u7b97\u516c\u5f0f} &amp; \\text{\u8868\u8fbe\u5f0f} &amp; \\text{\u7ed3\u679c} \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; f(l) - 0 &amp; s - 0 &amp; s \\\\ 2 &amp; f(l+1) - f(l) &amp; (s + d + c) - s &amp; d + c \\\\ 3 &amp; f(l+2) - f(l+1) &amp; (s + 2d + 4c) - (s + d + c) &amp; d + 3c \\\\ 4 &amp; f(l+3) - f(l+2) &amp; (s + 3d + 9c) - (s + 2d + 4c) &amp; d + 5c \\\\ 5 &amp; 0 - f(r = l+3) &amp; -f(r) = -(s + 3d + 9c) &amp; -f(r) \\\\ 6 &amp; 0 &amp; 0 &amp; 0 \\\\ 7 &amp; 0 &amp; 0 &amp; 0 \\\\ \\hline \\end{array}  <p>\u8ba1\u7b97\u4e8c\u9636\u5dee\u5206\u6570\u7ec4\uff1a</p>  \\begin{array}{c|l|l|c} \\hline i &amp; \\text{\u8ba1\u7b97\u516c\u5f0f} &amp; \\text{\u8868\u8fbe\u5f0f} &amp; \\text{\u7ed3\u679c} \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; D_1[1] - 0 &amp; s - 0 &amp; s \\\\ 2 &amp; D_1[2] - D_1[1] &amp; (d + c) - s &amp; d + c - s \\\\ 3 &amp; D_1[3] - D_1[2] &amp; (d + 3c) - (d + c) &amp; 2c \\\\ 4 &amp; D_1[4] - D_1[3] &amp; (d + 5c) - (d + 3c) &amp; 2c \\\\ 5 &amp; D_1[5] - D_1[4] &amp; -f(r) - (d + 5c) &amp; -f(r) - (d + 5c) \\\\ 6 &amp; D_1[6] - D_1[5] &amp; 0 - (-f(r)) &amp; f(r) \\\\ 7 &amp; 0 &amp; 0 &amp; 0 \\\\ \\hline \\end{array}  <p>\u8ba1\u7b97\u4e09\u9636\u5dee\u5206\u6570\u7ec4\uff1a</p>  \\begin{array}{c|l|l|c} \\hline i &amp; \\text{\u8ba1\u7b97\u516c\u5f0f} &amp; \\text{\u8868\u8fbe\u5f0f} &amp; \\text{\u7ed3\u679c} \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; D_2[1] - 0 &amp; s - 0 &amp; s \\\\ 2 &amp; D_2[2] - D_2[1] &amp; (d + c - s) - s &amp; d + c - 2s \\\\ 3 &amp; D_2[3] - D_2[2] &amp; 2c - (d + c - s) &amp; s + c - d \\\\ 4 &amp; D_2[4] - D_2[3] &amp; 2c - 2c &amp; 0 \\\\ 5 &amp; D_2[5] - D_2[4] &amp; (-f(r) - (d + 5c)) - 2c = -(s + 4d + 16c) &amp; -f(r+1) \\\\ 6 &amp; D_2[6] - D_2[5] &amp; f(r) + (f(r) + d + 5c + 2c) -2c &amp; f(r) + f(r+1) -2c \\\\ 7 &amp; 0 - D_2[6] &amp; 0 - f(r) &amp; -f(r) \\\\ \\hline \\end{array}  <p>\u4e09\u9636\u5dee\u5206\u6570\u7ec4\u7684\u66f4\u65b0\u64cd\u4f5c</p> <p>Not Tested</p> <ol> <li>D_3[l] = D_3[l] + s</li> <li>D_3[l + 1] = D_3[l + 1] + d + c - 2s </li> <li>D_3[l + 2] = D_3[l + 2] + s + c - d </li> <li>D_3[r + 1] = D_3[r + 1] - f(r + 1) </li> <li>D_3[r + 2] = D_3[r + 2] + f(r + 1) + f(r) - 2c </li> <li>D_3[r + 3] = D_3[r + 3] - f(r)</li> </ol> \u5c0fw\u7684\u7cd6\u679c <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u6240\u6709\u5143\u7d20\u5747\u4e3a 0\u3002\u9700\u8981\u5904\u7406 m \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6709\u4e09\u79cd\u7c7b\u578b\uff1a</p> <ol> <li>\u5bf9\u533a\u95f4 [pos, n] \u4e0a\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u5e38\u6570 1\u3002</li> <li>\u5bf9\u533a\u95f4 [pos, n] \u4e0a\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u9996\u9879\u4e3a 1\uff0c\u516c\u5dee\u4e3a 1 \u7684\u7b49\u5dee\u6570\u5217\u3002</li> <li>\u5bf9\u533a\u95f4 [pos, n] \u4e0a\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a\u9996\u9879\u4e3a 1 \u7684\u5e73\u65b9\u6570\u5217\uff0c\u5373 1, 4, 9, 16, \\dots\u3002</li> </ol> <p>\u6700\u7ec8\u8f93\u51fa\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\uff0c\u7ed3\u679c\u5bf9 10^9 + 7 \u53d6\u6a21\u3002</p> \u5dee\u5206\u6570\u7ec4\u5b9e\u73b0\u53ea\u5173\u6ce8\u9996\u9879 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int mod = 1e9 + 7;\n\nstruct range_add_constant {\n  int n;\n  vector&lt;int64_t&gt; d1;\n\n  explicit range_add_constant(int n) : n(n), d1(n + 2, 0) {}\n\n  // [l, r] \u52a0\u4e0a\u5e38\u6570 c\n  void add(int l, int r, int64_t c) {\n    d1[l]     += c;\n    d1[r + 1] -= c;\n  }\n\n  // \u6062\u590d\u539f\u59cb\u6570\u7ec4\n  void recover(vector&lt;int64_t&gt; &amp;nums) {\n    for (int i = 1; i &lt;= n; ++i) {\n      d1[i]   = (d1[i] + d1[i - 1]) % mod;\n      nums[i] = (nums[i] + d1[i]) % mod;\n    }\n  }\n};\n\nstruct range_add_arithmetic {\n  int n;\n  vector&lt;int64_t&gt; d1, d2;\n\n  explicit range_add_arithmetic(int n) : n(n), d1(n + 3, 0), d2(n + 3, 0) {}\n\n  // [l, r] \u52a0\u4e0a\u9996\u9879 s\u3001\u516c\u5dee d \u7684\u7b49\u5dee\u6570\u5217, \u76f8\u5f53\u4e8e f(i) = s + (i - l) * d\n  void add(int l, int r, int64_t s, int64_t d) {\n    int64_t e  = s + (r - l) * d;\n    d2[l]     += s;\n    d2[l + 1] += d - s;\n    d2[r + 1] -= d + e;\n    d2[r + 2] += e;\n  }\n\n  // \u6062\u590d\u539f\u59cb\u6570\u7ec4\n  void recover(vector&lt;int64_t&gt; &amp;nums) {\n    for (int i = 1; i &lt;= n; ++i) {\n      d2[i]   = (d2[i] + d2[i - 1]) % mod;\n      d1[i]   = (d1[i] + d1[i - 1] + d2[i]) % mod;\n      nums[i] = (nums[i] + d1[i]) % mod;\n    }\n  }\n};\n\nstruct range_add_quadratic {\n  int n;\n  vector&lt;int64_t&gt; d1, d2, d3;\n\n  explicit range_add_quadratic(int n) : n(n), d1(n + 4, 0), d2(n + 4, 0), d3(n + 4, 0) {}\n\n  // [l, r] \u4e0a\u52a0\u4e0a s + d*(i-l) + c*(i-l)^2\n  void add(int l, int r, int64_t s, int64_t d, int64_t c) {\n    auto f       = [&amp;](int64_t x) { return s + d * (x - l) + c * (x - l) * (x - l); };\n    int64_t e    = f(r);\n    int64_t e_1  = f(r + 1);\n    d3[l]       += s;\n    d3[l + 1]   += d + c - 2 * s;\n    d3[l + 2]   += s + c - d;\n    d3[r + 1]   -= e_1;\n    d3[r + 2]   += e_1 + e - 2 * c;\n    d3[r + 3]   -= e;\n  }\n\n  void recover(vector&lt;int64_t&gt; &amp;nums) {\n    for (int i = 1; i &lt;= n; i++) {\n      d3[i]   = (d3[i] + d3[i - 1]) % mod;\n      d2[i]   = (d2[i] + d2[i - 1] + d3[i]) % mod;\n      d1[i]   = (d1[i] + d1[i - 1] + d2[i]) % mod;\n      nums[i] = (nums[i] + d1[i]) % mod;\n    }\n  }\n};\n\nvoid solve() {\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  range_add_constant a(n);\n  range_add_arithmetic b(n);\n  range_add_quadratic c(n);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t type, pos;\n    cin &gt;&gt; type &gt;&gt; pos;\n    if (type == 1) {\n      a.add(pos, n, 1);\n    } else if (type == 2) {\n      b.add(pos, n, 1, 1);\n    } else {\n      c.add(pos, n, 1, 2, 1);\n    }\n  }\n  vector&lt;int64_t&gt; nums_a(n + 1, 0), nums_b(n + 1, 0), nums_c(n + 1, 0);\n  a.recover(nums_a);\n  b.recover(nums_b);\n  c.recover(nums_c);\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    cout &lt;&lt; (nums_a[i] + nums_b[i] + nums_c[i]) % mod;\n    if (i != n) { cout &lt;&lt; ' '; }\n  }\n  cout &lt;&lt; '\\n';\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre> <p>Hint</p> <p>\u7531\u4e8e\u64cd\u4f5c\u5747\u4e3a\u5728\u533a\u95f4 [pos, n] \u4e0a\u8fdb\u884c\uff0c\u56e0\u6b64\u53ea\u9700\u5173\u6ce8\u9996\u9879\u7684\u53d8\u5316\u5373\u53ef\u3002\u56e0\u4e3a\u5927\u4e8e n \u7684\u4f4d\u7f6e\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int mod = 1e9 + 7;\n\nvoid solve() {\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; a(n + 2), b(n + 2), c(n + 2);\n\n  auto recover = [&amp;](vector&lt;int64_t&gt; &amp;nums, int64_t rounds) {\n    for (int64_t i = 1; i &lt;= rounds; ++i) {\n      for (int64_t i = 1; i &lt;= n; ++i) { nums[i] = (nums[i - 1] + nums[i]) % mod; }\n    }\n  };\n  // \u56e0\u4e3a\u603b\u662f\u5bf9 a,b,c \u64cd\u4f5c\u5230 n \u4f4d\u7f6e\uff0c\u6240\u4ee5\u76f4\u63a5\u53ea\u7ef4\u62a4\u5f00\u59cb\u4f4d\u7f6e\u7684\u5dee\u5206\u6570\u7ec4\n  // \u6700\u540e\u6062\u590d\u65f6\uff0c\u5148\u5bf9 a \u505a\u4e00\u6b21\u524d\u7f00\u548c\uff0c\u518d\u5bf9 b \u505a\u4e24\u6b21\u524d\u7f00\u548c\uff0c\u6700\u540e\u5bf9 c \u505a\u4e09\u6b21\u524d\u7f00\u548c\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t type, pos;\n    cin &gt;&gt; type &gt;&gt; pos;\n    if (type == 1) {\n      a[pos] += 1;\n    } else if (type == 2) {\n      b[pos] += 1;  // \u9996\u9879\u4e3a1\uff0c\u516c\u5dee\u4e3a1, d - s = 0, \u6240\u4ee5\u4e0d\u9700\u8981\u66f4\u65b0 pos+1 \u4f4d\u7f6e\n    } else {\n      c[pos]     += 1;  // \u9996\u9879\u4e3a1\uff0c\u4e8c\u6b21\u9879\u7cfb\u6570\u4e3a1, d=2, c=1\n      c[pos + 1] += 1;  // pos+1 \u4f4d\u7f6e\u52a0\u4e0a1, pos+2 \u4f4d\u7f6e\u52a0\u4e0a0\n    }\n  }\n  recover(a, 1);\n  recover(b, 2);\n  recover(c, 3);\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    cout &lt;&lt; (a[i] + b[i] + c[i]) % mod;\n    if (i != n) { cout &lt;&lt; ' '; }\n  }\n  cout &lt;&lt; '\\n';\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre> <p>\u52a8\u6001\u533a\u95f4\u66f4\u65b0\u4e0e\u67e5\u8be2</p> <p>\u524d\u7f00\u548c\u4e0e\u5dee\u5206\u6570\u7ec4\u4e3b\u8981\u7528\u4e8e\u9759\u6001\u6570\u7ec4\u7684\u533a\u95f4\u67e5\u8be2\u4e0e\u66f4\u65b0\u64cd\u4f5c\u3002\u5bf9\u4e8e\u52a8\u6001\u6570\u7ec4\uff0c\u53ef\u4ee5\u7ed3\u5408\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff08BIT\uff09\u5b9e\u73b0\u9ad8\u6548\u7684\u533a\u95f4\u67e5\u8be2\u4e0e\u66f4\u65b0\u64cd\u4f5c\u3002</p>","tags":["prefix","difference"]},{"location":"code/algorithm/Sort/","title":"\u6392\u5e8f\u7b97\u6cd5","text":"","tags":["\u6392\u5e8f","sort","\u57fa\u6570\u6392\u5e8f","Radix Sort"]},{"location":"code/algorithm/Sort/#\u6392\u5e8f\u7b97\u6cd5","title":"\u6392\u5e8f\u7b97\u6cd5","text":"","tags":["\u6392\u5e8f","sort","\u57fa\u6570\u6392\u5e8f","Radix Sort"]},{"location":"code/algorithm/Sort/#\u57fa\u6570\u6392\u5e8f","title":"\u57fa\u6570\u6392\u5e8f","text":"<p>\u57fa\u6570\u6392\u5e8f\uff08\\text{Radix Sort}\uff09\u5c06\u5f85\u6392\u5e8f\u7684\u5143\u7d20\u62c6\u5206\u4e3a k \u4e2a\u5173\u952e\u5b57\uff0c\u9010\u4e00\u5bf9\u5404\u4e2a\u5173\u952e\u5b57\u6392\u5e8f\u540e\u5b8c\u6210\u5bf9\u6240\u6709\u5143\u7d20\u7684\u6392\u5e8f\u3002</p> \u57fa\u6570\u6392\u5e8f <p>\u57fa\u6570\u6392\u5e8f\u9002\u7528\u4e8e\u6574\u6570\u6392\u5e8f\uff0c\u5c24\u5176\u662f\u5f53\u6574\u6570\u7684\u8303\u56f4\u8f83\u5927\u800c\u6570\u91cf\u8f83\u5c11\u65f6\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(d \\cdot (n + k))\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n + k)\u3002</p> C++<pre><code>void radix_sort(vector&lt;int&gt; &amp;arr, int base = 10) {\n  int n       = arr.size();\n  int min_val = *min_element(arr.begin(), arr.end());\n  // \u5148\u5c06\u6240\u6709\u6570\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\u53d8\u4e3a\u975e\u8d1f\u6570, \u56e0\u4e3a\u57fa\u6570\u6392\u5e8f\u53ea\u80fd\u5904\u7406\u975e\u8d1f\u6570\n  for_each(arr.begin(), arr.end(), [&amp;](int &amp;x) { x -= min_val; });\n  int max_val   = *max_element(arr.begin(), arr.end());\n  int max_digit = 0;  // \u6700\u5927\u4f4d\u6570\n  while (max_val != 0) {\n    max_digit++;\n    max_val /= base;\n  }\n\n  // \u57fa\u6570\u6392\u5e8f\n  vector&lt;int&gt; output(n);\n  vector&lt;int&gt; count(base, 0);\n  for (int offset = 1; max_digit &gt; 0; offset *= base, max_digit--) {\n    fill(count.begin(), count.end(), 0);\n    // \u7edf\u8ba1\u6bcf\u4e2a\u6876\u7684\u5143\u7d20\u4e2a\u6570\n    for (int i = 0; i &lt; n; i++) { count[(arr[i] / offset) % base]++; }\n    // \u8ba1\u7b97\u6bcf\u4e2a\u6876\u7684\u7ed3\u675f\u4f4d\u7f6e\n    for (int i = 1; i &lt; base; i++) { count[i] += count[i - 1]; }\n    for (int i = n - 1; i &gt;= 0; i--) {\n      int &amp;pos        = count[(arr[i] / offset) % base];  // \u83b7\u53d6\u6876\u7684\u7ed3\u675f\u4f4d\u7f6e\n      output[pos - 1] = arr[i];                           // \u653e\u5165\u5bf9\u5e94\u6876\u4e2d\n      pos--;                                              // \u8be5\u6876\u7ed3\u675f\u4f4d\u7f6e\u524d\u79fb\n    }\n    arr = output;\n  }\n  // \u5c06\u6240\u6709\u6570\u52a0\u4e0a\u6700\u5c0f\u503c\uff0c\u6062\u590d\u539f\u503c\n  for_each(arr.begin(), arr.end(), [&amp;](int &amp;x) { x += min_val; });\n}\n</code></pre>","tags":["\u6392\u5e8f","sort","\u57fa\u6570\u6392\u5e8f","Radix Sort"]},{"location":"code/algorithm/DC/BinarySearch/","title":"\u4e8c\u5206\u67e5\u627e","text":"","tags":["\u5206\u6cbb","Divide and Conquer","\u4e8c\u5206\u67e5\u627e","Binary Search","\u4e09\u5206","Ternary Search"]},{"location":"code/algorithm/DC/BinarySearch/#\u4e8c\u5206\u67e5\u627e","title":"\u4e8c\u5206\u67e5\u627e","text":"<p>\u4e8c\u5206\u67e5\u627e\uff08\\text{Binary Search}\uff09\u662f\u4e00\u79cd\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u7279\u5b9a\u5143\u7d20\u7684\u9ad8\u6548\u7b97\u6cd5\u3002\u5b83\u901a\u8fc7\u53cd\u590d\u5c06\u641c\u7d22\u533a\u95f4\u51cf\u534a\u6765\u7f29\u5c0f\u67e5\u627e\u8303\u56f4\uff0c\u4ece\u800c\u5927\u5927\u63d0\u9ad8\u67e5\u627e\u6548\u7387\u3002  </p>","tags":["\u5206\u6cbb","Divide and Conquer","\u4e8c\u5206\u67e5\u627e","Binary Search","\u4e09\u5206","Ternary Search"]},{"location":"code/algorithm/DC/BinarySearch/#\u4e8c\u5206\u67e5\u627e_1","title":"\u4e8c\u5206\u67e5\u627e","text":"\u5347\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e target \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u95ed\u533a\u95f4\u5de6\u95ed\u53f3\u5f00\u5f00\u533a\u95f4 C++<pre><code>int lower_bound(const vector&lt;int&gt; &amp;nums, int target) {\n  int left = 0, right = nums.size() - 1;\n  while (left &lt;= right) {  // \u5faa\u73af\u7ed3\u675f\u65f6\u6709 L = R + 1\n    int mid = left + (right - left) / 2;\n    if (nums[mid] &lt; target) {\n      left = mid + 1;  // [mid+1, right]\n    } else {\n      right = mid - 1;  // [left, mid-1]\n    }\n  }\n  return left;  // return right + 1;\n}\n</code></pre> C++<pre><code>int lower_bound(const vector&lt;int&gt; &amp;nums, int target) {\n  int left = 0, right = nums.size();\n  while (left &lt; right) {  // \u5faa\u73af\u7ed3\u675f\u65f6\u6709 L = R\n    int mid = left + (right - left) / 2;\n    if (nums[mid] &lt; target) {\n      left = mid + 1;  // [mid+1, right)\n    } else {\n      right = mid;  // [left, mid)\n    }\n  }\n  return left;  // return right;\n}\n</code></pre> C++<pre><code>int lower_bound(const vector&lt;int&gt; &amp;nums, int target) {\n  int left = -1, right = nums.size();\n  while (left + 1 &lt; right) {  // \u5faa\u73af\u7ed3\u675f\u65f6\u6709 L + 1 = R\n    int mid = left + (right - left) / 2;\n    if (nums[mid] &lt; target) {\n      left = mid;  // (mid, right)\n    } else {\n      right = mid;  // (left, mid)\n    }\n  }\n  return right;  // return left + 1;\n}\n</code></pre> <p>\u5e38\u89c1\u7684\u56db\u79cd\u60c5\u51b5\u8f6c\u5316\u4e3a\u4e8c\u5206\u67e5\u627e\uff1a  </p> <ul> <li>\\geq x\uff1a\u4f7f\u7528\u4e0a\u8ff0\u4e8c\u5206\u67e5\u627e\u5373\u53ef</li> <li>\\gt x\uff1a\u7b49\u4ef7\u4e8e \\geq x + 1\uff0c \u5bf9\u4e8e\u975e\u6574\u6570\u6765\u8bf4\u5c31\u662f\u504f\u5e8f\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e x \u7684\u5143\u7d20</li> <li>\\lt x\uff1a\u7b49\u4ef7\u4e8e (\\geq x) - 1\uff0c \u5b9e\u9645\u4e0a\u5c31\u662f\u7b2c\u4e00\u4e2a \\geq x \u7684\u4f4d\u7f6e\u5de6\u8fb9\u4e00\u4e2a</li> <li>\\leq x\uff1a\u7b49\u4ef7\u4e8e (\\gt x) - 1\uff0c \u5b9e\u9645\u4e0a\u5c31\u662f\u7b2c\u4e00\u4e2a \\gt x \u7684\u4f4d\u7f6e\u5de6\u8fb9\u4e00\u4e2a</li> </ul> <code>std::lower_bound</code> <p>Return value Iterator to the first element of the range <code>[first, last)</code> not ordered before value, or last if no such element is found.  Unlike <code>std::binary_search</code>, <code>std::lower_bound</code> does not require <code>operator&lt;</code> or <code>comp</code> to be asymmetric (i.e., <code>a &lt; b</code> and <code>b &lt; a</code> always have different results). In fact, it does not even require <code>value &lt; *iter</code> or <code>comp(value, *iter)</code> to be well-formed for any iterator iter in <code>[first, last)</code>.</p> <p><code>std::lower_bound</code> \u67e5\u627e\u7b2c\u4e00\u4e2a\"\u5927\u4e8e\u7b49\u4e8e\"\u76ee\u6807\u503c\u7684\u5143\u7d20\u4f4d\u7f6e\u3002</p> <code>std::upper_bound</code> <p>Return value Iterator to the first element of the range <code>[first, last)</code> ordered after value, or last if no such element is found.  For any iterator iter in <code>[first, last)</code>, <code>std::upper_bound</code> requires <code>value &lt; *iter</code> and <code>comp(value, *iter)</code> to be well-formed, while <code>std::lower_bound</code> requires <code>*iter &lt; value</code> and <code>comp(*iter, value)</code> to be well-formed instead.</p> <p><code>std::upper_bound</code> \u67e5\u627e\u7b2c\u4e00\u4e2a\"\u5927\u4e8e\"\u76ee\u6807\u503c\u7684\u5143\u7d20\u4f4d\u7f6e\u3002</p> <code>std::binary_search</code> <p>Return value <code>true</code> if there is an element in the range <code>[first, last)</code> that is equivalent to value, and <code>false</code> otherwise. <code>std::binary_search</code> only checks whether an equivalent element exists. To obtain an iterator to that element (if exists), <code>std::lower_bound</code> should be used instead.</p> <p><code>std::binary_search</code> \u7528\u4e8e\u5224\u65ad\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002</p> <p>\u5229\u7528 <code>std::lower_bound</code> \u548c <code>std::upper_bound</code> \u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u3002\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49<code>bool</code>\u51fd\u6570<code>check(mid)</code> \u6765\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u3002 \u5bf9\u4e8e\u5de6\u8fb9\u6ee1\u8db3\uff0c\u53f3\u8fb9\u4e0d\u6ee1\u8db3\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u628a <code>check(mid)</code> \u6539\u6210 <code>!check(mid)</code>\u3002  </p> <p>Tip</p> <p>\u67e5\u627e\u6ee1\u8db3\u6700\u5927\u5316\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u5316\u6700\u5927\u503c\u7684\u9898\u76ee\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u679a\u4e3e\u7b54\u6848\u3002</p>","tags":["\u5206\u6cbb","Divide and Conquer","\u4e8c\u5206\u67e5\u627e","Binary Search","\u4e09\u5206","Ternary Search"]},{"location":"code/algorithm/DC/BinarySearch/#\u4e09\u5206\u67e5\u627e","title":"\u4e09\u5206\u67e5\u627e","text":"<p>\u4e09\u5206\u67e5\u627e\u7684\u601d\u60f3\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\uff0c\u4f46\u5b83\u5c06\u641c\u7d22\u533a\u95f4\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u4ece\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u66f4\u5feb\u5730\u627e\u5230\u76ee\u6807\u503c\u3002\u4e09\u5206\u901a\u5e38\u7528\u4e8e\u5bfb\u627e\u51fd\u6570\u7684\u6781\u503c\u70b9\uff08\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\uff09\u3002</p> \u4e09\u5206 <p>\u7ed9\u5b9a\u4e00\u4e2a n \u6b21\u591a\u9879\u5f0f f(x) = a_n x^n + a_{n-1} x^{n-1} + ... + a_1 x + a_0\uff0c\u4ee5\u53ca\u4e00\u4e2a\u533a\u95f4 [l, r]\uff0c\u4fdd\u8bc1\u5728\u8303\u56f4 [l,r] \u5185\u5b58\u5728\u4e00\u70b9 x\uff0c\u4f7f\u5f97 [l,x] \u4e0a\u5355\u8c03\u589e\uff0c[x,r] \u4e0a\u5355\u8c03\u51cf\u3002\u8bd5\u6c42\u51fa x \u7684\u503c\u3002</p> C++<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdint&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve() {}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  double l, r;\n  cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;\n  vector&lt;double&gt; nums(n + 1);\n  for (int64_t i = n; i &gt;= 0; --i) { cin &gt;&gt; nums[i]; }\n\n  auto f = [&amp;](double x) {\n    double res = 0.0;\n    for (int64_t i = n; i &gt;= 0; --i) { res += nums[i] * pow(x, i); }\n    return res;\n  };\n\n  double left = l, right = r;\n  while (abs(right - left) &gt; 1e-12) {\n    double m1 = left + (right - left) / 3.0;   // 1/3 \u70b9\n    double m2 = right - (right - left) / 3.0;  // 2/3 \u70b9\n    if (f(m1) &gt; f(m2)) {                       // \u7531\u4e8e\u53f3\u4fa7\u5355\u8c03\u51cf\uff0c\u5de6\u4fa7\u5355\u8c03\u589e, \u6781\u5927\u503c\u5728\u5de6\u4fa7\n      right = m2;\n    } else {  // \u6781\u5927\u503c\u5728\u53f3\u4fa7\n      left = m1;\n    }\n  }\n  cout &lt;&lt; fixed &lt;&lt; setprecision(5) &lt;&lt; (left + right) / 2.0 &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> Closest Moment <p>\u6709\u4e24\u6761\u7ebf\u6bb5\uff0c\u7ebf\u6bb5 1 \u7684\u8d77\u70b9\u4e3a (s_{1x}, s_{1y})\uff0c\u7ec8\u70b9\u4e3a (g_{1x}, g_{1y})\uff1b\u7ebf\u6bb5 2 \u7684\u8d77\u70b9\u4e3a (s_{2x}, s_{2y})\uff0c\u7ec8\u70b9\u4e3a (g_{2x}, g_{2y})\u3002\u4e24\u6761\u7ebf\u6bb5\u5206\u522b\u4ee5\u5300\u901f\u4ece\u8d77\u70b9\u8fd0\u52a8\u5230\u7ec8\u70b9\uff0c\u6c42\u5728\u8fd0\u52a8\u8fc7\u7a0b\u4e2d\u4e24\u6761\u7ebf\u6bb5\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u3002</p> Hint <p>\u8bbe\u7ebf\u6bb5 1 \u7684\u957f\u5ea6\u4e3a len_1\uff0c\u7ebf\u6bb5 2 \u7684\u957f\u5ea6\u4e3a len_2\uff0c\u4e0d\u59a8\u8bbe len_1 \\geq len_2\u3002 \u7ebf\u6bb5 1 \u6309\u7167\u7ebf\u6bb5 2 \u7684\u957f\u5ea6\u6bd4\u4f8b\u53d6\u4e2d\u70b9 mid\uff0c\u5219\u7ebf\u6bb5 1 \u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a(s_1, mid) \u548c (mid, g_1)\u3002 \u5206\u522b\u8ba1\u7b97 (s_1, mid) \u4e0e\u7ebf\u6bb5 2 \u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4ee5\u53ca\u7ebf\u6bb5 (mid, g_1) \u4e0e\u70b9 g_2 \u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff08\u6b64\u65f6\u8f83\u77ed\u7ebf\u6bb5\u5df2\u505c\u6b62\u79fb\u52a8\uff09\uff0c\u4e8c\u8005\u7684\u8f83\u5c0f\u503c\u5373\u4e3a\u6240\u6c42\u3002 \u8ba1\u7b97\u7ebf\u6bb5\u4e0e\u7ebf\u6bb5\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e09\u5206\u6cd5\u3002</p> <p>\u8ba1\u7b97\u70b9\u4e0e\u7ebf\u6bb5\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u65f6\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a\u8ba1\u7b97\u7ebf\u6bb5\u4e0e\u539f\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5373\u5c06\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u51cf\u53bb\u8be5\u70b9\u7684\u5750\u6807\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing Pdd = pair&lt;double, double&gt;;\n\nPdd sub(const Pdd &amp;a, const Pdd &amp;b) { return {a.first - b.first, a.second - b.second}; }\n\ndouble dist(const Pdd &amp;a, const Pdd &amp;b) {\n  Pdd d = sub(a, b);\n  return sqrt(d.first * d.first + d.second * d.second);\n}\n\nPdd internal_division(const Pdd &amp;a, const Pdd &amp;b,\n                      double p) {  // a + (b - a) * p\n  return {a.first + (b.first - a.first) * p, a.second + (b.second - a.second) * p};\n}\n\nconst int NUM_ITERATION = 60;\n\n// \u8ba1\u7b97\u7ebf\u6bb5 AB \u4e0e\u539f\u70b9\u6700\u77ed\u8ddd\u79bb\ndouble dist_segment_and_origin(const Pdd &amp;a, const Pdd &amp;b) {\n  auto f   = [&amp;](double t) { return dist(internal_division(a, b, t), {0.0, 0.0}); };\n  double l = 0.0, r = 1.0;\n  for (int i = 0; i &lt; NUM_ITERATION; ++i) {\n    double m1 = (2 * l + r) / 3.0;\n    double m2 = (l + 2 * r) / 3.0;\n    if (f(m1) &lt; f(m2)) {  // \u6781\u5c0f\u503c\u5728\u5de6\u4fa7\n      r = m2;\n    } else {  // \u6781\u5c0f\u503c\u5728\u53f3\u4fa7\n      l = m1;\n    }\n  }\n  return f((l + r) / 2.0);\n}\n\nvoid solve() {\n  vector&lt;Pdd&gt; s(2), g(2);\n  cin &gt;&gt; s[0].first &gt;&gt; s[0].second &gt;&gt; g[0].first &gt;&gt; g[0].second;\n  cin &gt;&gt; s[1].first &gt;&gt; s[1].second &gt;&gt; g[1].first &gt;&gt; g[1].second;\n\n  // \u4fdd\u8bc1 (s[0], g[0]) \u662f\u8f83\u957f\u7ebf\u6bb5\n  double len0 = dist(s[0], g[0]);\n  double len1 = dist(s[1], g[1]);\n  if (len0 &lt; len1) {\n    swap(s[0], s[1]);\n    swap(g[0], g[1]);\n    swap(len0, len1);\n  }\n\n  // \u957f\u7ebf\u6bb5\u6309\u77ed\u7ebf\u6bb5\u957f\u5ea6\u6bd4\u4f8b\u53d6\u4e2d\u70b9\n  Pdd mid_point = internal_division(s[0], g[0], len1 / len0);\n\n  // \u4e09\u5206\u6cd5\u5206\u522b\u8ba1\u7b97\u4e24\u6bb5\u8ddd\u79bb\n  // (s[0],mid_point) \u4e0a\u7684\u79fb\u52a8\u70b9\u5230\u7ebf\u6bb5 (s[1],g[1]) \u7684\u6700\u5c0f\u503c\n  double d1 = dist_segment_and_origin(sub(s[0], s[1]), sub(mid_point, g[1]));\n  // (mid_point,g[0]) \u4e0a\u7684\u79fb\u52a8\u70b9\u5230\u6700\u540e (s[1],g[1]) \u7684\u6700\u5c0f\u503c\n  double d2 = dist_segment_and_origin(sub(mid_point, g[1]), sub(g[0], g[1]));\n\n  cout &lt;&lt; fixed &lt;&lt; setprecision(15) &lt;&lt; min(d1, d2) &lt;&lt; \"\\n\";\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","\u4e8c\u5206\u67e5\u627e","Binary Search","\u4e09\u5206","Ternary Search"]},{"location":"code/algorithm/DC/CDQ/","title":"CDQ\u5206\u6cbb","text":"","tags":["\u5206\u6cbb","Divide and Conquer","CDQ","Divide and Conquer"]},{"location":"code/algorithm/DC/CDQ/#cdq\u5206\u6cbb","title":"CDQ\u5206\u6cbb","text":"<p>\\text{CDQ} \u5206\u6cbb\u662f\u901a\u8fc7\u5c06\u95ee\u9898\u5212\u5206\u4e3a\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u6765\u7b80\u5316\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5e76\u5728\u5408\u5e76\u7ed3\u679c\u65f6\u8fdb\u884c\u5fc5\u8981\u7684\u8c03\u6574\u3002</p> <p>\\text{CDQ} \u5206\u6cbb\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e00\u4e9b\u9700\u8981\u5904\u7406\u5927\u91cf\u6570\u636e\u7684\u590d\u6742\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u8ba1\u7b97\u9006\u5e8f\u5bf9\u3001\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u5bf9\u8ba1\u6570\u7b49\u95ee\u9898\u4e2d\u3002\u5e38\u89c1\u7684\u5e94\u7528\u5305\u62ec\uff1a</p> <ul> <li>\u70b9\u5bf9\u8ba1\u6570\u95ee\u9898</li> <li>\u4e00\u7ef4\u52a8\u6001\u89c4\u5212\u7684\u4f18\u5316</li> <li>\u79bb\u7ebf\u67e5\u8be2\u95ee\u9898</li> </ul>","tags":["\u5206\u6cbb","Divide and Conquer","CDQ","Divide and Conquer"]},{"location":"code/algorithm/DC/CDQ/#\u9006\u5e8f\u5bf9","title":"\u9006\u5e8f\u5bf9","text":"<p>\u9006\u5e8f\u5bf9\u662f\u6307\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u524d\u9762\u7684\u5143\u7d20\u5927\u4e8e\u540e\u9762\u7684\u5143\u7d20\u7684\u60c5\u51b5\u3002\u8ba1\u7b97\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u5e38\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u5305\u62ec\u5f52\u5e76\u6392\u5e8f\u548c\u6811\u72b6\u6570\u7ec4\u3002</p> \u9006\u5e8f\u5bf9 \u5206\u6cbb\u6811\u72b6\u6570\u7ec4 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  auto solve = [&amp;](auto &amp;&amp;self, int low, int high) -&gt; int64_t {\n    if (low &gt;= high) { return 0; }\n    int mid = low + ((high - low) / 2);\n    // \u5148\u9012\u5f52\u8ba1\u7b97\u5de6\u53f3\u5b50\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\n    int64_t count = self(self, low, mid) + self(self, mid + 1, high);\n    vector&lt;int&gt; merge(high - low + 1);\n    // \u8ba1\u7b97\u8de8\u8d8a\u5de6\u53f3\u5b50\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u5e76\u5408\u5e76, \u5e76\u4e14\u6392\u5e8f\n    int i = low, j = mid + 1, k = 0;\n    while (i &lt;= mid &amp;&amp; j &lt;= high) {\n      if (nums[i] &lt;= nums[j]) {\n        merge[k++] = nums[i++];\n      } else {\n        merge[k++]  = nums[j++];\n        count      += mid - i + 1;  // \u9006\u5e8f\u5bf9\n      }\n    }\n    while (i &lt;= mid) { merge[k++] = nums[i++]; }\n    while (j &lt;= high) { merge[k++] = nums[j++]; }\n    for (int p = 0; p &lt; merge.size(); ++p) { nums[low + p] = merge[p]; }\n    return count;\n  };\n\n  int64_t ans = solve(solve, 0, n - 1);\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p>\u901a\u8fc7\u79bb\u6563\u5316\u6570\u7ec4\u5143\u7d20\u5e76\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u9891\u7387\u7edf\u8ba1\uff0c\u53ef\u4ee5\u5728 O(n \\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8ba1\u7b97\u3002</p> <p>\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u6811\u72b6\u6570\u7ec4\u901a\u5e38\u66f4\u4e3a\u7b80\u6d01\u548c\u9ad8\u6548\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), tree(n + 1) {}\n\n  void point_add(int64_t x, int64_t delta) {\n    for (; x &lt;= n; x += lowbit(x)) { tree[x] += delta; }\n  }\n\n  int64_t sum(int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  int64_t range_sum(int64_t x, int64_t y) { return sum(y) - sum(x - 1); }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  int64_t n;\n  vector&lt;int64_t&gt; tree;\n};\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  vector&lt;int&gt; sorted_nums = nums;\n  sort(sorted_nums.begin(), sorted_nums.end());\n\n  auto get_rank = [&amp;](int num) {\n    return lower_bound(sorted_nums.begin(), sorted_nums.end(), num) - sorted_nums.begin() + 1;\n  };\n\n  int64_t ans = 0;\n  BIT bit(n);\n  for (int64_t i = n - 1; i &gt;= 0; --i) {\n    int rank  = get_rank(nums[i]);\n    ans      += bit.range_sum(1, rank - 1);\n    bit.point_add(rank, 1);\n  }\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","CDQ","Divide and Conquer"]},{"location":"code/algorithm/DC/CDQ/#\u70b9\u5bf9\u8ba1\u6570","title":"\u70b9\u5bf9\u8ba1\u6570","text":"<p>\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\u7684\u601d\u8def\uff0c\\text{CDQ} \u5206\u6cbb\u5c06\u6570\u7ec4\u9012\u5f52\u5730\u5212\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u8ba1\u7b97\u6bcf\u90e8\u5206\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\uff0c\u7136\u540e\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u8de8\u8d8a\u5de6\u53f3\u90e8\u5206\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u3002\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u63d0\u9ad8\u6548\u7387\u3002</p> <p>\\text{CDQ} \u5206\u6cbb\u89e3\u51b3\u70b9\u5bf9\u8ba1\u6570\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u9ad8\u6548\u5730\u8ba1\u7b97\u8de8\u8d8a\u5de6\u53f3\u90e8\u5206\u7684\u70b9\u5bf9\u6570\u91cf\u3002\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u5c06\u6570\u7ec4\u9012\u5f52\u5730\u5212\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u76f4\u5230\u6bcf\u90e8\u5206\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20</li> <li>\u70b9\u5bf9 (i,j) \u53ef\u4ee5\u5212\u5206\u4e3a\u4e09\u7c7b\uff1a<ul> <li>\u5b8c\u5168\u5728\u5de6\u534a\u90e8\u5206\u7684\u70b9\u5bf9\uff1ai,j \\in [low, mid]</li> <li>\u5b8c\u5168\u5728\u53f3\u534a\u90e8\u5206\u7684\u70b9\u5bf9\uff1ai,j \\in [mid+1, high]</li> <li>\u8de8\u8d8a\u5de6\u53f3\u4e24\u90e8\u5206\u7684\u70b9\u5bf9\uff1ai \\in [low, mid], j \\in [mid+1, high]</li> </ul> </li> <li>\u9012\u5f52\u8ba1\u7b97\u5de6\u53f3\u4e24\u90e8\u5206\u7684\u70b9\u5bf9\u6570\u91cf</li> <li>\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u53cc\u6307\u9488\u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff08\u5982\u6811\u72b6\u6570\u7ec4\uff09\u6765\u9ad8\u6548\u5730\u8ba1\u7b97\u8de8\u8d8a\u5de6\u53f3\u90e8\u5206\u7684\u70b9\u5bf9\u6570\u91cf</li> </ol> \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f <p>\u6709 n \u4e2a\u70b9 (a_i, b_i, c_i)\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u652f\u914d\u70b9\u6570\u91cf\u3002\u70b9 p_1 \u652f\u914d\u70b9 p_2 \u5f53\u4e14\u4ec5\u5f53 a_1 \\leq a_2, b_1 \\leq b_2, c_1 \\leq c_2\u3002\u5bf9\u4e8e\u6bcf\u4e2a k\uff0c\u8f93\u51fa\u6709\u591a\u5c11\u70b9\u7684\u652f\u914d\u70b9\u6570\u91cf\u4e3a k\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), tree(n + 1) {}\n\n  void point_add(int64_t x, int64_t delta) {\n    for (; x &lt;= n; x += lowbit(x)) { tree[x] += delta; }\n  }\n\n  int64_t sum(int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  int64_t n;\n  vector&lt;int64_t&gt; tree;\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  // (a, b, c, i), i \u4e3a\u539f\u59cb\u4e0b\u6807\n  vector&lt;vector&lt;int&gt;&gt; nums(n + 1, vector&lt;int&gt;(4, 0));\n  vector&lt;int&gt; res(n + 1, 0);  // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u652f\u914d\u70b9\u6570\u91cf\n  for (int i = 1; i &lt;= n; i++) {\n    cin &gt;&gt; nums[i][0] &gt;&gt; nums[i][1] &gt;&gt; nums[i][2];\n    nums[i][3] = i;  // \u8bb0\u5f55\u539f\u59cb\u4e0b\u6807\n  }\n  // \u6309\u7167 a, b, c \u4e09\u4e2a\u7ef4\u5ea6\u6392\u5e8f\n  sort(nums.begin() + 1, nums.end());\n  auto equal = [&amp;](int x, int y) {\n    return nums[x][0] == nums[y][0] &amp;&amp; nums[x][1] == nums[y][1] &amp;&amp; nums[x][2] == nums[y][2];\n  };\n  for (int l = 1, r = 1; l &lt;= n; l = r) {  // \u5904\u7406\u76f8\u540c\u70b9\n    while (r &lt;= n &amp;&amp; equal(r, l)) { ++r; }\n    for (int i = l; i &lt; r; ++i) {      // \u4e00\u7ec4\u5185\u524d\u9762\u7684\u70b9\u5728CDQ\u4e2d\u4e0d\u4f1a\u8ba1\u7b97\u5b83\u4e4b\u540e\u7684\u70b9\n      res[nums[i][3]] += (r - i - 1);  // \u5148\u52a0\u4e0a\u76f8\u540c\u70b9\u7684\u6570\u91cf\n    }\n  }\n\n  BIT bit(k);\n  auto merge = [&amp;](int left, int mid, int right) {\n    int j = left;\n    for (int i = mid + 1; i &lt;= right; ++i) {\n      while (j &lt;= mid &amp;&amp; nums[j][1] &lt;= nums[i][1]) {\n        bit.point_add(nums[j][2], 1);\n        ++j;\n      }\n      res[nums[i][3]] += bit.sum(nums[i][2]);\n    }\n    // \u6e05\u7a7a BIT\n    for (int i = left; i &lt; j; ++i) { bit.point_add(nums[i][2], -1); }\n    // \u6839\u636e b \u7ef4\u5ea6\u6392\u5e8f\n    sort(nums.begin() + left, nums.begin() + right + 1,\n         [&amp;](const vector&lt;int&gt; &amp;a, const vector&lt;int&gt; &amp;b) { return a[1] &lt; b[1]; });\n  };\n\n  auto cdq = [&amp;](auto &amp;&amp;self, int left, int right) -&gt; void {\n    if (left &gt;= right) { return; }\n    int mid = (left + right) / 2;\n    self(self, left, mid);\n    self(self, mid + 1, right);\n    merge(left, mid, right);\n  };\n\n  cdq(cdq, 1, n);\n\n  vector&lt;int64_t&gt; answer(n, 0);\n  for (int i = 1; i &lt;= n; ++i) { ++answer[res[i]]; }\n  for (int i = 0; i &lt; n; ++i) { cout &lt;&lt; answer[i] &lt;&lt; \"\\n\"; }\n  return 0;\n}\n</code></pre> Range Knapsack Query <p>\u6709 n \u4ef6\u7269\u54c1\u548c q \u4e2a\u67e5\u8be2\u3002\u6bcf\u4ef6\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\u3002\u6bcf\u4e2a\u67e5\u8be2\u7ed9\u51fa\u4e09\u4e2a\u6574\u6570 (l, r, c)\uff0c\u8868\u793a\u5728\u533a\u95f4 [l, r] \u5185\u9009\u62e9\u82e5\u5e72\u7269\u54c1\u653e\u5165\u5bb9\u91cf\u4e3a c \u7684\u80cc\u5305\u4e2d\uff0c\u6c42\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; weight(n + 1), value(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; weight[i] &gt;&gt; value[i]; }\n  int q;\n  cin &gt;&gt; q;\n  vector&lt;tuple&lt;int, int, int&gt;&gt; query;\n  int max_c = 0;\n  for (int i = 0; i &lt; q; i++) {\n    int l, r, c;\n    cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;\n    query.emplace_back(l, r, c);\n    max_c = max(max_c, c);\n  }\n\n  auto update = [&amp;](const vector&lt;int64_t&gt; &amp;pre, vector&lt;int64_t&gt; &amp;next, int i) {\n    for (int j = 0; j &lt;= max_c; j++) {\n      next[j] = pre[j];\n      if (j &gt;= weight[i]) { next[j] = max(next[j], pre[j - weight[i]] + value[i]); }\n    }\n  };\n\n  vector dp(n + 1, vector&lt;int64_t&gt;(max_c + 1));\n  vector&lt;int64_t&gt; ans(q);\n  auto cdq = [&amp;](auto &amp;&amp;cdq, int l, int r, const vector&lt;int&gt; &amp;qid) -&gt; void {\n    if (l == r) {          // \u53ea\u6709\u4e00\u4e2a\u7269\u54c1\n      for (int i : qid) {  // \u6b64\u65f6\u5fc5\u987b\u6709 ql == l &amp;&amp; qr == r\n        auto [ql, qr, c] = query[i];\n        ans[i]           = (c &gt;= weight[l] ? value[l] : 0);  // \u80fd\u5426\u653e\u5f97\u4e0b\n      }\n      return;\n    }\n    int m = (l + r) / 2;                  // \u5212\u5206\u4e3a [l, m] \u548c [m+1, r]\n    fill(dp[m].begin(), dp[m].end(), 0);  // \u521d\u59cb\u5316\u4e2d\u70b9\u72b6\u6001\n    // \u8ba1\u7b97\u53f3\u534a\u90e8\u5206\u72b6\u6001, \u4ece\u4e2d\u70b9\u5411\u53f3\u63a8\u8fdb, dp[i](m &lt; i &lt;= r) \u8868\u793a [m+1, i]\n    // \u7269\u54c1\u7684\u6700\u4f18\u89e3\n    for (int i = m + 1; i &lt;= r; i++) { update(dp[i - 1], dp[i], i); }\n    // \u8ba1\u7b97\u5de6\u534a\u90e8\u5206\u72b6\u6001, \u4ece\u4e2d\u70b9\u5411\u5de6\u63a8\u8fdb, dp[i](l &lt;= i &lt;= m) \u8868\u793a [i, m]\n    // \u7269\u54c1\u7684\u6700\u4f18\u89e3\n    for (int j = weight[m]; j &lt;= max_c; j++) { dp[m][j] = value[m]; }\n    for (int i = m - 1; i &gt;= l; i--) { update(dp[i + 1], dp[i], i); }\n    // \u5206\u914d\u67e5\u8be2\n    vector&lt;int&gt; qid_l, qid_r;\n    for (int i : qid) {\n      auto [ql, qr, c] = query[i];\n      if (qr &lt;= m) {  // \u5168\u5728\u5de6\u90e8\u5206\n        qid_l.push_back(i);\n      } else if (ql &gt; m) {  // \u5168\u5728\u53f3\u90e8\u5206\n        qid_r.push_back(i);\n      } else {  // \u6a2a\u8de8\u4e24\u90e8\u5206, \u9700\u8981\u5408\u5e76\u5de6\u53f3\u90e8\u5206\u72b6\u6001, \u4ece\u5de6\u8fb9\u9009 j \u4e2a\u5bb9\u91cf, \u53f3\u8fb9\u9009\n                // c-j \u4e2a\u5bb9\u91cf\n        for (int j = 0; j &lt;= c; j++) { ans[i] = max(ans[i], dp[ql][j] + dp[qr][c - j]); }\n      }\n    }\n    cdq(cdq, l, m, qid_l);\n    cdq(cdq, m + 1, r, qid_r);\n  };\n  vector&lt;int&gt; qid(q);  // query ids\n  iota(qid.begin(), qid.end(), 0);\n  cdq(cdq, 1, n, qid);\n  for (int i = 0; i &lt; q; i++) { cout &lt;&lt; ans[i] &lt;&lt; '\\n'; }\n  return 0;\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","CDQ","Divide and Conquer"]},{"location":"code/algorithm/DC/FFT/","title":"\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","text":"","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","title":"\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","text":"","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#fft","title":"FFT","text":"<p>\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff08\\text{Fast Fourier Transform\uff0cFFT}\uff09\u662f\u4e00\u79cd\u9ad8\u6548\u5b9e\u73b0\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08\\text{DFT}\uff09\u7684\u7b97\u6cd5\u3002</p> <p>\\text{FFT} \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u6cbb\u3002\u5c31 \\text{DFT} \u6765\u8bf4\uff0c\u5b83\u5206\u6cbb\u5730\u6765\u6c42\u5f53 x = \\omega_n^k \u7684\u65f6\u5019 f(x) \u7684\u503c\u3002</p> <p>\\text{FFT} \u7b97\u6cd5\u7684\u5206\u6cbb\u601d\u60f3\u4f53\u73b0\u5728\u5c06\u591a\u9879\u5f0f\u5206\u4e3a\u5947\u6b21\u9879\u548c\u5076\u6b21\u9879\u5904\u7406\uff0c\u5206\u522b\u7528\u5947\u5076\u6b21\u6b21\u9879\u6570\u5efa\u7acb\u65b0\u7684\u51fd\u6570\uff1af(x) = Even(x^2) + x * Odd(x^2)\u3002</p> <p>\u5176\u4e2dEven(x) = \\sum a_{2i}x^i\uff0cOdd(x) = \\sum a_{2i+1}x^i\u3002</p> <p>\u5229\u7528\u5076\u6570\u6b21\u5355\u4f4d\u6839\u7684\u6027\u8d28 \\omega^i_n = -\\omega^{i + n/2}_n\uff0c\u800cEven\\left(x^2\\right)\u548cOdd\\left(x^2\\right)\u662f\u5076\u51fd\u6570\uff0c\u56e0\u6b64\u5728\u590d\u5e73\u9762\u4e0a \\omega^i_n \u548c \\omega^{i+n/2}_n \u5bf9\u5e94\u7684 Even(x^2) \u548c Odd(x^2) \u7684\u503c\u76f8\u540c\u3002\u4ee5\u4e0b\u63a8\u5bfc\u4e2d\uff0c\u4ee4 n \u4e3a\u591a\u9879\u5f0f\u7684\u6b21\u6570\uff0ck \u4e3a\u5f53\u524d\u6c42\u503c\u7684\u4e0b\u6807\u3002</p>  \\begin{aligned} f(\\omega_n^k) &amp;= Even((\\omega_n^k)^2) + \\omega_n^k  \\times Odd((\\omega_n^k)^2) \\\\               &amp;= Even(\\omega_n^{2k}) + \\omega_n^k  \\times Odd(\\omega_n^{2k}) \\\\               &amp;= Even(\\omega_{n/2}^k) + \\omega_n^k  \\times Odd(\\omega_{n/2}^k) \\\\ f(\\omega_n^{k+n/2}) &amp;= Even(\\omega_n^{2k+n}) + \\omega_n^{k+n/2}  \\times Odd(\\omega_n^{2k+n}) \\\\                     &amp;= Even(\\omega_n^{2k}) - \\omega_n^k  \\times Odd(\\omega_n^{2k}) \\\\                     &amp;= Even(\\omega_{n/2}^k) - \\omega_n^k  \\times Odd(\\omega_{n/2}^k) \\end{aligned}  <p>\u56e0\u6b64\u6c42\u51fa\u4e86 Even(\\omega_{n/2}^k) \u548c Odd(\\omega_{n/2}^k) \u540e\uff0c\u5c31\u53ef\u4ee5\u540c\u65f6\u6c42\u51fa f(\\omega_n^k) \u548c f(\\omega_n^{k+n/2})\u3002</p> <p>\u5206\u6cbb \\text{DFT} \u80fd\u5904\u7406\u7684\u591a\u9879\u5f0f\u957f\u5ea6\u53ea\u80fd\u662f 2^m(m \\in \\mathbf{N}^ \\ast )\uff0c\u5426\u5219\u5728\u5206\u6cbb\u7684\u65f6\u5019\u5de6\u53f3\u4e0d\u4e00\u6837\u957f\uff0c\u53f3\u8fb9\u53d6\u4e0d\u5230\u7cfb\u6570\u3002\u6240\u4ee5\u8981\u5728\u7b2c\u4e00\u6b21 \\text{DFT} \u4e4b\u524d\u5c31\u628a\u5e8f\u5217\u5411\u4e0a\u8865\u6210\u957f\u5ea6\u4e3a 2^m\uff08\u9ad8\u6b21\u7cfb\u6570\u8865 0\uff09\u3001\u6700\u9ad8\u9879\u6b21\u6570\u4e3a 2^m-1 \u7684\u591a\u9879\u5f0f\u3002</p> <p>\u5728\u4ee3\u5165\u503c\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8981\u4ee3\u5165n\u4e2a\u4e0d\u540c\u503c\uff1a\\omega_n^0,\\omega_n^1,\\omega_n^2,\\cdots, \\omega_n^{n-1} (n=2^m) \u4e00\u5171 2^m \u4e2a\u4e0d\u540c\u503c\u3002</p> <p>\u6ce8\u610f\uff1a</p> <ol> <li>\u5728\u8c03\u7528 \\text{FFT} \u524d\uff0c\u9700\u8981\u5c06\u591a\u9879\u5f0f\u7684\u7cfb\u6570\u8f6c\u5316\u4e3a\u590d\u6570\uff0c\u540c\u65f6\u8981\u5c06\u7cfb\u6570\u8c03\u6574\u4e3a 2^m \u957f\u5ea6\u7684\u591a\u9879\u5f0f\u3002</li> <li>\u5728\u6c42\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9006\u53d8\u6362\u65f6\uff0c\u6ce8\u610f\u89d2\u5ea6\u8981\u4e58\u4ee5 -1\uff0c\u8fd9\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7 <code>inv</code> \u53c2\u6570\u6765\u63a7\u5236\u3002</li> <li>\u6c42\u51fa\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9006\u53d8\u6362\u540e\uff0c\u9700\u8981\u6b63\u5219\u5316\uff0c\u5c06\u7ed3\u679c\u9664\u4ee5 n\u3002</li> <li>\u591a\u9879\u5f0f\u4e58\u6cd5h(x) = f(x) \\times g(x)\uff0c\u53ef\u4ee5\u901a\u8fc7 h(x) = \\text{FFT}^{-1}(\\text{FFT}(f(x)) \\times \\text{FFT}(g(x))) \u6765\u5b9e\u73b0\u3002\u5728\u6700\u540e\u7684\u7ed3\u679c\u4e2d\uff0c\u9700\u8981\u5c06\u7cfb\u6570\u56db\u820d\u4e94\u5165\u53d6\u6574\u3002</li> </ol> <p>w_k \u7684\u8ba1\u7b97\u65b9\u5f0f</p> <p>\\text{FFT}:</p>  w_k = e^{\\frac{2\\pi}{n} k i} = e^{\\theta k i} = cos(\\theta k) + i * sin(\\theta k)  <p>\\text{Inverse FFT}:</p>  w_k = e^{- \\frac{2\\pi}{n} k i} =e^{- \\theta k i} = cos(\\theta k) - i * sin(\\theta k)  <p>\u9012\u63a8\u5173\u7cfb\uff1a</p>  w_{k+1} = e^{\\theta (k+1) * i} = e^{\\theta k * i} * e^{\\theta * i} = w(k) * w  \u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u4e58\u6cd5\uff08FFT\uff09 <p>\u7ed9\u5b9a\u4e24\u4e2a\u591a\u9879\u5f0f f(x) \u548c g(x)\uff0c\u6c42\u5b83\u4eec\u7684\u4e58\u79ef\u591a\u9879\u5f0f h(x) = f(x) \\times g(x)\u3002</p> <p>Keypoints</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\\text{FFT} \u7684\u5b9e\u73b0\u5206\u4e3a\u4e24\u79cd\uff1a\u9012\u5f52\u5b9e\u73b0\u548c\u4f18\u5316\u5b9e\u73b0\u3002\u9012\u5f52\u5b9e\u73b0\u7684\u4ee3\u7801\u8f83\u4e3a\u7b80\u5355\uff0c\u4f18\u5316\u5b9e\u73b0\u5219\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4f4d\u9006\u5e8f\u7f6e\u6362\u7684\u4f18\u5316\u3002</p> C++<pre><code>#include &lt;cmath&gt;\n#include &lt;complex&gt;\n#include &lt;iostream&gt;\n#include &lt;numbers&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid fft(vector&lt;complex&lt;double&gt;&gt; &amp;f, int inv) {\n  int n = f.size();  // n must be a power of 2\n  if (n == 1) { return; }\n  vector&lt;complex&lt;double&gt;&gt; even(n / 2), odd(n / 2);\n  for (int i = 0; i &lt; n / 2; i++) {\n    even[i] = f[i * 2];\n    odd[i]  = f[i * 2 + 1];\n  }\n  fft(even, inv);\n  fft(odd, inv);\n  double theta = 2 * numbers::pi / n;\n  complex&lt;double&gt; wk(1), w(cos(theta), inv * sin(theta));\n  for (int k = 0; k &lt; n / 2; k++) {\n    f[k]          = even[k] + wk * odd[k];\n    f[k + n / 2]  = even[k] - wk * odd[k];\n    wk           *= w;\n  }\n}\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;                            // n, m \u4e3af(x)\u548cg(x)\u7684\u6700\u9ad8\u6b21\n  int len = pow(2, ceil(log2(n + m + 1)));  // \u8c03\u6574\u7ed3\u679c\u7684\u957f\u5ea6\u4e3a2\u7684\u5e42\u6b21\n  vector&lt;complex&lt;double&gt;&gt; f(len), g(len), h(len);\n  for (int i = 0; i &lt;= n; i++) { cin &gt;&gt; f[i]; }\n  for (int i = 0; i &lt;= m; i++) { cin &gt;&gt; g[i]; }\n  fft(f, 1);\n  fft(g, 1);\n  for (int i = 0; i &lt; len; i++) { h[i] = f[i] * g[i]; }  // \u8ba1\u7b97\u6bcf\u4e2a\u70b9\u7684\u4e58\u79ef\n  fft(h, -1);                                            // \u6c42h(x)\u7684\u9006FFT\n  // \u9006\u53d8\u6362\u6b63\u5219\u5316, \u56db\u820d\u4e94\u5165\u53d6\u6574\n  for (int i = 0; i &lt; n + m + 1; i++) { cout &lt;&lt; round(h[i].real() / len) &lt;&lt; \" \"; }\n  return 0;\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#\u4f4d\u9006\u5e8f\u7f6e\u6362","title":"\u4f4d\u9006\u5e8f\u7f6e\u6362","text":"<p>\u5728 FFT \u4e2d\uff0c\u4f4d\u9006\u5e8f\u7f6e\u6362\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6b65\u9aa4\u3002\u8003\u8651\u9012\u5f52\u8fc7\u7a0b\uff0c\u5728\u6bcf\u6b21\u9012\u5f52\u4f1a\u4e24\u4e24\u5206\u7ec4\u3002</p> <p>\u4ee58\u9879\u591a\u9879\u5f0f\u4e3a\u4f8b\uff0c\u6a21\u62df\u62c6\u5206\u7684\u8fc7\u7a0b\uff1a</p> <ol> <li>\u521d\u59cb\u5e8f\u5217\u4e3a \\{x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7\\}</li> <li>\u4e00\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0, x_2, x_4, x_6\\},\\{x_1, x_3, x_5, x_7 \\}</li> <li>\u4e24\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0,x_4\\} \\{x_2, x_6\\},\\{x_1, x_5\\},\\{x_3, x_7 \\}</li> <li>\u4e09\u6b21\u4e8c\u5206\u4e4b\u540e \\{x_0\\}\\{x_4\\}\\{x_2\\}\\{x_6\\}\\{x_1\\}\\{x_5\\}\\{x_3\\}\\{x_7 \\}</li> </ol> <p>\u89c4\u5f8b\uff1a\u5176\u5b9e\u5c31\u662f\u539f\u6765\u7684\u5e8f\u5217\u6bcf\u4e2a\u6570\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7ffb\u8f6c\uff0c\u5c31\u662f\u6700\u7ec8\u4f4d\u7f6e\u7684\u4e0b\u6807\u3002</p>  \\begin{aligned} 0 &amp;\\to 000 \\to 000 \\to 0 \\\\ 1 &amp;\\to 001 \\to 100 \\to 4 \\\\ 2 &amp;\\to 010 \\to 010 \\to 2 \\\\ 3 &amp;\\to 011 \\to 110 \\to 6 \\\\ 4 &amp;\\to 100 \\to 001 \\to 1 \\\\ 5 &amp;\\to 101 \\to 101 \\to 5 \\\\ 6 &amp;\\to 110 \\to 011 \\to 3 \\\\ 7 &amp;\\to 111 \\to 111 \\to 7 \\\\ \\end{aligned}  <p>\u5728 O(n\\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\uff0c\u53ef\u4ee5\u5c06\u5e8f\u5217\u8fdb\u884c\u4f4d\u9006\u5e8f\u7f6e\u6362\u3002</p> \u4f4d\u9006\u5e8f\u7f6e\u6362\u4ee3\u7801\u5b9e\u73b0 <p>\u4f4d\u9006\u5e8f\u7f6e\u6362\u4f18\u5316</p> <p>\u5728<code>cpp</code>\u4e2d\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>bitset</code>\u6765\u7ffb\u8f6c\u4e8c\u8fdb\u5236\u4f4d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u4f4d\u6570\u6709\u5173\u3002</p> \u57fa\u672c\u5b9e\u73b0\u4f18\u5316\u5b9e\u73b0 <p>\u8be5\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log n)\u3002</p> C++<pre><code>void bit_reverse(vector&lt;complex&lt;double&gt;&gt; &amp;f) {\n  int n = f.size();\n  // i = 0...01, j = 10...0, \u5728\u4e8c\u8fdb\u5236\u4e0b\u662f\u7ffb\u8f6c\u7684\n  for (int i = 1, j = n / 2; i &lt; n - 1; i++) {\n    if (i &lt; j) { swap(f[i], f[j]); }  // \u4e92\u6362\u4f4d\u7f6e\uff0ci &lt; j \u907f\u514d\u91cd\u590d\u4ea4\u6362\n    int k = n / 2;  // \u4fdd\u6301\u4e8c\u8fdb\u5236\u7ffb\u8f6c\n    while (j &gt;= k) {\n      j -= k;\n      k /= 2;\n    }\n    if (j &lt; k) { j += k; }\n  }\n}\n</code></pre> <p>\u8be5\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002</p> C++<pre><code>void bit_reverse(vector&lt;complex&lt;double&gt;&gt; &amp;f) {\n  int n = f.size();\n  vector&lt;int&gt; reverse(n);\n  for (int i = 0; i &lt; n; ++i) {\n    reverse[i] = reverse[i &gt;&gt; 1] &gt;&gt; 1;\n    if ((i &amp; 1) != 0) { reverse[i] |= n &gt;&gt; 1; }  // \u5982\u679c\u6700\u540e\u4e00\u4f4d\u662f 1\uff0c\u5219\u7ffb\u8f6c\u6210 n/2\n  }\n  for (int i = 0; i &lt; n; ++i) {  // \u4fdd\u8bc1\u6bcf\u5bf9\u6570\u53ea\u7ffb\u8f6c\u4e00\u6b21\n    if (i &lt; reverse[i]) { swap(f[i], f[reverse[i]]); }\n  }\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#\u8776\u5f62\u64cd\u4f5c","title":"\u8776\u5f62\u64cd\u4f5c","text":"<p>\u5728 \\text{FFT} \u4e2d\uff0c\u6bcf\u6b21\u9012\u5f52\u90fd\u4f1a\u4e24\u4e24\u5206\u7ec4\uff0c\u7136\u540e\u8fdb\u884c\u8776\u5f62\u64cd\u4f5c\u3002</p> <p>\u8776\u5f62\u64cd\u4f5c\u662f\u4e00\u79cd\u4e24\u4e24\u5408\u5e76\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u6570\uff0c\u7136\u540e\u4e58\u4e0a\u4e00\u4e2a\u5355\u4f4d\u6839\u3002\u5728\u8776\u5f62\u64cd\u4f5c\u4e2d\uff0c\u6bcf\u4e2a\u6570\u90fd\u4f1a\u548c\u53e6\u4e00\u4e2a\u6570\u8fdb\u884c\u4e00\u6b21\u4e58\u6cd5\u548c\u4e00\u6b21\u52a0\u6cd5\u3002</p> \u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u4e58\u6cd5\uff08FFT\uff09 C++<pre><code>#include &lt;cmath&gt;\n#include &lt;complex&gt;\n#include &lt;iostream&gt;\n#include &lt;numbers&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid bit_reverse(vector&lt;complex&lt;double&gt;&gt; &amp;f) {\n  int n = f.size();\n  vector&lt;int&gt; reverse(n);\n  for (int i = 0; i &lt; n; ++i) {\n    reverse[i] = reverse[i &gt;&gt; 1] &gt;&gt; 1;\n    if ((i &amp; 1) != 0) { reverse[i] |= n &gt;&gt; 1; }  // \u5982\u679c\u6700\u540e\u4e00\u4f4d\u662f 1\uff0c\u5219\u7ffb\u8f6c\u6210 n/2\n  }\n  for (int i = 0; i &lt; n; ++i) {  // \u4fdd\u8bc1\u6bcf\u5bf9\u6570\u53ea\u7ffb\u8f6c\u4e00\u6b21\n    if (i &lt; reverse[i]) { swap(f[i], f[reverse[i]]); }\n  }\n}\n\nvoid fft(vector&lt;complex&lt;double&gt;&gt; &amp;f, int inv) {\n  int n = f.size();\n  bit_reverse(f);\n  for (int len = 2; len &lt;= n; len *= 2) {  // \u9012\u5f52\u5bf9\u5e94\u7684\u957f\u5ea6\n    double theta = 2 * numbers::pi / len * inv;\n    complex&lt;double&gt; w(cos(theta), sin(theta));  // \u5f53\u524d\u5355\u4f4d\u6839\n    for (int i = 0; i &lt; n; i += len) {\n      complex&lt;double&gt; wi(1);\n      for (int j = 0; j &lt; len / 2; j++) {\n        complex&lt;double&gt; even = f[i + j], odd = wi * f[i + j + len / 2];\n        f[i + j]            = even + odd;\n        f[i + j + len / 2]  = even - odd;\n        wi                 *= w;\n      }\n    }\n  }\n  if (inv == -1) {  // \u9006\u53d8\u6362\u6b63\u5219\u5316\n    for (int i = 0; i &lt; n; i++) { f[i] /= n; }\n  }\n}\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  int len = pow(2, ceil(log2(n + m + 1)));\n  vector&lt;complex&lt;double&gt;&gt; f(len), g(len), h(len);\n  for (int i = 0; i &lt;= n; i++) { cin &gt;&gt; f[i]; }\n  for (int i = 0; i &lt;= m; i++) { cin &gt;&gt; g[i]; }\n  fft(f, 1);\n  fft(g, 1);\n  for (int i = 0; i &lt; len; i++) { h[i] = f[i] * g[i]; }\n  fft(h, -1);\n  for (int i = 0; i &lt; n + m + 1; i++) { cout &lt;&lt; round(h[i].real()) &lt;&lt; \" \"; }\n  return 0;\n}\n</code></pre> <p>Tip</p> <p>\u5e76\u884c\u626b\u63cf\u7b97\u6cd5\u7684\u601d\u8def\u4e0e\u8776\u5f62\u53d8\u6362\u7c7b\u4f3c</p>","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#\u5e94\u7528","title":"\u5e94\u7528","text":"<ol> <li>\u591a\u9879\u5f0f\u4e58\u6cd5 h(x) = f(x) \\times g(x)</li> <li>\u591a\u9879\u5f0f\u6c42\u9006 g(x) = f(x)^{-1} f(x) \\times g(x) = 1\uff0cg(x) = f(x)^{-1}\uff0cg(x) \u4e3a f(x) \u7684\u9006\u5143</li> </ol> Thief in a Shop <p>n \u79cd\u5546\u54c1\uff0c\u6bcf\u79cd\u4ef7\u683c\u4e3a a_1, a_2, \\dots, a_n\uff0c\u6bcf\u79cd\u5546\u54c1\u6570\u91cf\u65e0\u9650\u3002\u6070\u597d\u5e26\u8d70 k \u4ef6\u5546\u54c1\uff08\u540c\u4e00\u79cd\u53ef\u4ee5\u591a\u4ef6\uff09\uff0c\u95ee\u53ef\u80fd\u7684\u603b\u4ef7\u683c\u6709\u54ea\u4e9b\u3002</p> Hint <p>\u5b9a\u4e49\u591a\u9879\u5f0f\u751f\u6210\u51fd\u6570\uff1a</p>  F(x) = x^{a_1} + x^{a_2} + \\dots + x^{a_n}  <ul> <li>\u6bcf\u6b21\u9009\u4e00\u4ef6\u5546\u54c1\uff0c\u5bf9\u5e94\u53d6\u4e00\u6b21 F(x)</li> <li>\u9009 k \u4ef6\u5546\u54c1 \u2192 \u6c42 k \u6b21\u5e42\uff1aF(x)^k</li> <li>x^s \u7684\u7cfb\u6570\u8868\u793a\u603b\u4ef7 s \u662f\u5426\u53ef\u8fbe\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f F(x)^k \u4e2d\u6240\u6709\u7cfb\u6570\u4e0d\u4e3a 0 \u7684\u9879\u7684\u6307\u6570</li> </ul> <p>F(x)^k \u53ef\u4ee5\u901a\u8fc7 \\text{FFT} \u5feb\u901f\u5377\u79ef\u8ba1\u7b97\u3002\u7531\u4e8e\u7cfb\u6570\u53ea\u5173\u5fc3\u662f\u5426\u4e3a 0\uff0c\u6240\u4ee5\u5728\u6bcf\u6b21\u5377\u79ef\u540e\u5c06\u7cfb\u6570\u5927\u4e8e 0 \u7684\u9879\u7f6e\u4e3a 1 \u5373\u53ef\u3002</p> <p>\u53e6\u5916 k \u4ef6\u7269\u54c1\u6700\u5927\u4ef7\u683c\u4e3a k \\times \\max(a_i)\uff0c\u6240\u4ee5\u7ed3\u679c\u7684\u6700\u9ad8\u6b21\u5e42\u4e0d\u4f1a\u8d85\u8fc7\u8fd9\u4e2a\u503c\u3002\u53ef\u4ee5\u6bcf\u6b21\u5377\u79ef\u540e\u5c06\u591a\u9879\u5f0f\u622a\u65ad\u5230\u8fd9\u4e2a\u957f\u5ea6\u4ee5\u8282\u7701\u65f6\u95f4\u548c\u7a7a\u95f4\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;complex&gt;\n#include &lt;iostream&gt;\n#include &lt;numbers&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing cd = complex&lt;double&gt;;\n\nvoid bit_reverse(vector&lt;complex&lt;double&gt;&gt; &amp;f) {\n  int n = f.size();\n  vector&lt;int&gt; reverse(n);\n  for (int i = 0; i &lt; n; ++i) {\n    reverse[i] = reverse[i &gt;&gt; 1] &gt;&gt; 1;\n    if ((i &amp; 1) != 0) { reverse[i] |= n &gt;&gt; 1; }  // \u5982\u679c\u6700\u540e\u4e00\u4f4d\u662f 1\uff0c\u5219\u7ffb\u8f6c\u6210 n/2\n  }\n  for (int i = 0; i &lt; n; ++i) {  // \u4fdd\u8bc1\u6bcf\u5bf9\u6570\u53ea\u7ffb\u8f6c\u4e00\u6b21\n    if (i &lt; reverse[i]) { swap(f[i], f[reverse[i]]); }\n  }\n}\n\nvoid fft(vector&lt;complex&lt;double&gt;&gt; &amp;f, int inv) {\n  int n = f.size();\n  bit_reverse(f);\n  for (int len = 2; len &lt;= n; len *= 2) {  // \u9012\u5f52\u5bf9\u5e94\u7684\u957f\u5ea6\n    double theta = 2 * numbers::pi / len * inv;\n    complex&lt;double&gt; w(cos(theta), sin(theta));  // \u5f53\u524d\u5355\u4f4d\u6839\n    for (int i = 0; i &lt; n; i += len) {\n      complex&lt;double&gt; wi(1);\n      for (int j = 0; j &lt; len / 2; j++) {\n        complex&lt;double&gt; even = f[i + j], odd = wi * f[i + j + len / 2];\n        f[i + j]            = even + odd;\n        f[i + j + len / 2]  = even - odd;\n        wi                 *= w;\n      }\n    }\n  }\n  if (inv == -1) {  // \u9006\u53d8\u6362\u6b63\u5219\u5316\n    for (int i = 0; i &lt; n; i++) { f[i] /= n; }\n  }\n}\n\n// \u5e03\u5c14\u5377\u79ef\uff08\u52a8\u6001\u622a\u65ad\u5230 max_len\uff09\nvector&lt;int&gt; multiply(const vector&lt;int&gt; &amp;a, const vector&lt;int&gt; &amp;b, int max_len) {\n  int n = 1;\n  while (n &lt; a.size() + b.size()) { n &lt;&lt;= 1; }  // \u627e\u5230\u5927\u4e8e\u7b49\u4e8e\u4e24\u591a\u9879\u5f0f\u548c\u7684\u6700\u5c0f 2 \u7684\u5e42\n  vector&lt;cd&gt; fa(n), fb(n);\n  for (int i = 0; i &lt; a.size(); i++) { fa[i] = a[i]; }\n  for (int i = 0; i &lt; b.size(); i++) { fb[i] = b[i]; }\n  fft(fa, 1);\n  fft(fb, 1);\n  for (int i = 0; i &lt; n; i++) { fa[i] *= fb[i]; }  // \u70b9\u4e58\n  fft(fa, -1);                                     // \u9006\u53d8\u6362\n  vector&lt;int&gt; res(min(n, max_len), 0);             // \u622a\u65ad\u5230 max_len\n  // \u53ea\u5173\u5fc3\u603b\u4ef7\u662f\u5426\u53ef\u8fbe, \u5927\u4e8e 0 \u5219\u89c6\u4e3a\u53ef\u8fbe\n  for (int i = 0; i &lt; res.size(); i++) { res[i] = (fa[i].real() &gt; 0.5 ? 1 : 0); }\n  return res;\n}\n\n// \u591a\u9879\u5f0f\u5feb\u901f\u5e42\nvector&lt;int&gt; poly_pow(vector&lt;int&gt; base, int k, int max_sum) {\n  vector&lt;int&gt; res = {1};\n  while (k &gt; 0) {\n    if ((k &amp; 1) != 0) { res = multiply(res, base, max_sum + 1); }\n    base   = multiply(base, base, max_sum + 1);\n    k    &gt;&gt;= 1;\n  }\n  return res;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  vector&lt;int&gt; a(n);\n  int max_a = 0;\n  for (int i = 0; i &lt; n; i++) {\n    cin &gt;&gt; a[i];\n    max_a = max(max_a, a[i]);\n  }\n\n  int max_sum = k * max_a;  // \u6700\u5927\u53ef\u80fd\u603b\u4ef7\n\n  // \u6784\u9020\u521d\u59cb\u591a\u9879\u5f0f F(x)\n  vector&lt;int&gt; base(max_a + 1, 0);\n  for (int i = 0; i &lt; n; i++) { base[a[i]] = 1; }\n\n  // \u5feb\u901f\u5e42 F(x)^k\n  vector&lt;int&gt; ans = poly_pow(base, k, max_sum);\n\n  // \u8f93\u51fa\u6240\u6709\u53ef\u80fd\u603b\u4ef7\n  for (int i = 0; i &lt;= max_sum; i++) {\n    if (ans[i] != 0) { cout &lt;&lt; i &lt;&lt; \" \"; }\n  }\n  cout &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FFT/#ntt","title":"NTT","text":"<p>\u6570\u8bba\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08\\text{Number Theoretic Transform}\uff0c\\text{NTT}\uff09\u662f\u4e00\u79cd\u9ad8\u6548\u5b9e\u73b0 \\text{DFT} \u7684\u7b97\u6cd5\u3002\\text{NTT} \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06 \\text{DFT} \u7684\u590d\u6570\u57df\u8f6c\u5316\u4e3a\u6a21\u6570\u57df\u3002</p> <p>\\text{NTT} \u901a\u8fc7\u5c06\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u5316\u4e3a F={\\mathbb {Z}/p}\uff0c\u6574\u6570\u6a21\u8d28\u6570 p\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u9650\u57df\uff0c\u53ea\u8981 n \u53ef\u9664 p-1\uff0c\u5c31\u5b58\u5728\u672c\u539f n \u6b21\u65b9\u6839\uff0c\u6240\u4ee5\u6709 p=\\xi n+1\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8d28\u6570 p=qn+1 (n=2^m)\uff0c\u539f\u6839 g \u6ee1\u8db3 g^{qn} \\equiv 1 \\pmod p, \u5c06 g_n=g^q\\pmod p \u770b\u505a \\omega_n \u7684\u7b49\u4ef7\uff0c\u5219\u5176\u6ee1\u8db3\u76f8\u4f3c\u7684\u6027\u8d28\uff0c\u6bd4\u5982 g_n^n \\equiv 1 \\pmod p, g_n^{n/2} \\equiv -1 \\pmod p\u3002</p>","tags":["\u5206\u6cbb","Divide and Conquer","\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","FFT","\u5feb\u901f\u6570\u8bba\u53d8\u6362","NTT"]},{"location":"code/algorithm/DC/FracProgramming/","title":"\u5206\u6570\u89c4\u5212","text":"","tags":["\u5206\u6cbb","Divide and Conquer","\u5206\u6570\u89c4\u5212","Fractional Programming"]},{"location":"code/algorithm/DC/FracProgramming/#\u5206\u6570\u89c4\u5212","title":"\u5206\u6570\u89c4\u5212","text":"<p>\u5206\u6570\u89c4\u5212\uff08\\text{Fractional Programming}\uff09\u662f\u4e00\u7c7b\u4f18\u5316\u95ee\u9898\uff0c\u5176\u76ee\u6807\u51fd\u6570\u662f\u53d8\u91cf\u7684\u5206\u6570\u5f62\u5f0f\u3002 \u5176\u5f62\u5f0f\u5316\u8868\u8ff0\u662f\uff0c\u7ed9\u51fa a_i \u548c b_i\uff0c\u6c42\u4e00\u7ec4 w_i\\in\\{0,1\\}\uff0c\u6700\u5c0f\u5316\u6216\u6700\u5927\u5316</p>  \\frac{\\sum_{i=1}^{n} a_i \\times w_i}{\\sum_{i=1}^{n} b_i \\times w_i}  <p>01\u5206\u6570\u89c4\u5212\u7684\u6838\u5fc3\uff1a  </p> <ul> <li>\u6570\u636e\u8f6c\u5316\u6210\u7ed3\u4f59\u8868\u8fbe\u5f0f\u7684\u5f62\u5f0f\uff0c\u5f53\u786e\u5b9a\u4e00\u4e2a\u6bd4\u503c x\uff0c\u5c31\u80fd\u5728\u6700\u4f18\u51b3\u7b56\u4e0b\u8ba1\u7b97\u51fa\u7ed3\u4f59\u548c</li> <li>\u6700\u7ec8\u5e0c\u671b\u83b7\u5f97\u5728\u6700\u4f18\u51b3\u7b56\u4e0b\uff0c\u5f53\u7ed3\u4f59\u548c\u6700\u63a5\u8fd1 0 \u65f6\uff0cx \u7684\u503c\u6700\u4f18</li> <li>\u6700\u4f18\u51b3\u7b56\u5224\u5b9a\uff1a\u901a\u5e38\u53ef\u4ee5\u6839\u636e\u8d2a\u5fc3\u9009\u62e9\u300101\u80cc\u5305\u3001\u6700\u5c0f\u751f\u6210\u6811\u7b49\u65b9\u6cd5\u8fdb\u884c\u5224\u5b9a</li> </ul> <p>\u5e38\u89c1\u5e94\u7528\uff1a\u6700\u5927\u5e73\u5747\u503c\uff08\\forall b_i = 1\uff09\u3001\u6700\u5927\u6027\u4ef7\u6bd4\u3001\u6700\u5927\u6bd4\u7387\u7b49\u7ec4\u5408\u4f18\u5316\u95ee\u9898\u3002  </p>","tags":["\u5206\u6cbb","Divide and Conquer","\u5206\u6570\u89c4\u5212","Fractional Programming"]},{"location":"code/algorithm/DC/FracProgramming/#\u4e8c\u5206\u6cd5\u6c42\u89e3","title":"\u4e8c\u5206\u6cd5\u6c42\u89e3","text":"<p>\u5206\u6570\u89c4\u5212\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6cd5\u6765\u6c42\u89e3\u3002 \u8bbe\u76ee\u6807\u503c\u4e3a mid\uff0c\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u7ec4 w_i \u4f7f\u5f97</p>  \\frac{\\sum_{i=1}^{n} a_i \\times w_i}{\\sum_{i=1}^{n} b_i \\times w_i} \\geq mid \\\\ \\Longrightarrow \\sum_{i=1}^{n} a_i \\times w_i \\geq mid \\times \\sum_{i=1}^{n} b_i \\times w_i \\Longrightarrow \\sum_{i=1}^{n} (a_i - mid \\times b_i) \\times w_i \\geq 0  <p>\u901a\u8fc7\u4e8c\u5206\u6cd5\u4e0d\u65ad\u8c03\u6574 mid \u7684\u503c\uff0c\u76f4\u5230\u627e\u5230\u6700\u4f18\u89e3\u3002  </p> Dropping Test <p>\u7ed9\u5b9a n \u4e2a\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u6709 (a, b) \u4e24\u4e2a\u503c\uff0c\u90fd\u4e3a\u6574\u6570\u5e76\u4e14\u975e\u8d1f\u3002\u820d\u5f03\u6389 k \u4e2a\u6570\u636e\uff0c\u5e0c\u671b\u8ba9\u5269\u4e0b\u6570\u636e \\frac{\\sum a}{\\sum b} \u5c3d\u91cf\u5927\u3002\u5982\u679c\u5269\u4e0b\u6570\u636e\u6240\u6709 b \u7684\u548c\u4e3a 0\uff0c\u8ba4\u4e3a\u65e0\u610f\u4e49\u3002\u7ed3\u679c\u4e58\u4ee5 100\uff0c\u5c0f\u6570\u90e8\u5206\u56db\u820d\u4e94\u5165\u7684\u6574\u6570\u7ed3\u679c\u8fd4\u56de\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, k;\n  while (cin &gt;&gt; n &gt;&gt; k) {\n    if (n == 0 &amp;&amp; k == 0) { break; }\n    vector&lt;pair&lt;int, int&gt;&gt; nums(n);\n    for (int i = 0; i &lt; n; i++) { cin &gt;&gt; nums[i].first; }\n    for (int i = 0; i &lt; n; i++) { cin &gt;&gt; nums[i].second; }\n\n    auto check = [&amp;](double x) {\n      vector&lt;double&gt; diffs(n);\n      for (int i = 0; i &lt; n; ++i) { diffs[i] = nums[i].first - x * nums[i].second; }\n      sort(diffs.rbegin(), diffs.rend());\n      double sum = 0;\n      for (int i = 0; i &lt; n - k; ++i) { sum += diffs[i]; }\n      return sum &gt;= 0;\n    };\n\n    double left = 0, right = 1e9 + 1;\n    for (int i = 0; i &lt; 64; i++) {  // \u8fdb\u884c\u8db3\u591f\u6b21\u6570\u7684\u4e8c\u5206\n      double mid = (left + right) / 2;\n      if (check(mid)) {\n        left = mid;\n      } else {\n        right = mid;\n      }\n    }\n    cout &lt;&lt; static_cast&lt;int&gt;(100 * (left + 0.005)) &lt;&lt; \"\\n\";  // \u56db\u820d\u4e94\u5165\n  }\n  return 0;\n}\n</code></pre> Average and Median <p>\u7ed9\u5b9a n \u4e2a\u6574\u6570\uff0c\u76f8\u90bb\u4e24\u4e2a\u4f4d\u7f6e\u7684\u6570\u5fc5\u987b\u81f3\u5c11\u9009\u62e9\u4e00\u4e2a\uff0c\u6c42\u6700\u5927\u5e73\u5747\u503c\u548c\u6700\u5927\u4e2d\u4f4d\u6570\u3002  </p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  // \u6700\u5927\u5e73\u5747\u503c\u95ee\u9898\n  {\n    auto check = [&amp;](double x) {\n      vector&lt;double&gt; diffs(n);\n      for (int i = 0; i &lt; n; ++i) { diffs[i] = nums[i] - x; }\n      // \u5224\u5b9a\u6761\u4ef6, i \u6216 i + 1 \u5fc5\u987b\u81f3\u5c11\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\n      vector&lt;vector&lt;double&gt;&gt; dp(n, vector&lt;double&gt;(2, 0));\n      dp[0][0] = 0;         // i \u4e0d\u9009\n      dp[0][1] = diffs[0];  // i \u9009\n      for (int i = 1; i &lt; n; ++i) {\n        dp[i][0] = dp[i - 1][1];                                // i \u4e0d\u9009, \u5219 i-1 \u5fc5\u987b\u9009\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + diffs[i];  // i \u9009, \u5219 i-1 \u53ef\u9009\u53ef\u4e0d\u9009\n      }\n      return max(dp[n - 1][0], dp[n - 1][1]) &gt;= 0;\n    };\n\n    double left = 1, right = 1e9 + 1;\n    for (int i = 0; i &lt; 64; ++i) {  // \u8fdb\u884c\u8db3\u591f\u6b21\u6570\u7684\u4e8c\u5206\n      double mid = (left + right) / 2;\n      if (check(mid)) {\n        left = mid;\n      } else {\n        right = mid;\n      }\n    }\n    cout &lt;&lt; left &lt;&lt; \"\\n\";\n  }\n  // \u6700\u5927\u4e0a\u4e2d\u4f4d\u6570\u95ee\u9898\n  {\n    auto check = [&amp;](int64_t x) {\n      vector&lt;int64_t&gt; diffs(n);\n      for (int i = 0; i &lt; n; ++i) { diffs[i] = nums[i] &gt;= x ? 1 : -1; }\n      // \u5224\u5b9a\u6761\u4ef6, i \u6216 i + 1 \u5fc5\u987b\u81f3\u5c11\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\n      vector&lt;vector&lt;int64_t&gt;&gt; dp(n, vector&lt;int64_t&gt;(2, 0));\n      dp[0][0] = 0;         // i \u4e0d\u9009\n      dp[0][1] = diffs[0];  // i \u9009\n      for (int i = 1; i &lt; n; ++i) {\n        dp[i][0] = dp[i - 1][1];                                // i \u4e0d\u9009, \u5219 i-1 \u5fc5\u987b\u9009\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + diffs[i];  // i \u9009, \u5219 i-1 \u53ef\u9009\u53ef\u4e0d\u9009\n      }\n      return max(dp[n - 1][0], dp[n - 1][1]) &gt; 0;  // \u6ce8\u610f\u8fd9\u91cc\u662f\u5927\u4e8e0\n    };\n\n    int64_t left = 1, right = 1e9 + 1;\n    for (int i = 0; i &lt; 64; ++i) {  // \u8fdb\u884c\u8db3\u591f\u6b21\u6570\u7684\u4e8c\u5206\n      int64_t mid = (left + right) / 2;\n      if (check(mid)) {\n        left = mid;\n      } else {\n        right = mid;\n      }\n    }\n    cout &lt;&lt; left &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n</code></pre> <p>Tip</p> <ul> <li>\u6700\u5927\u5e73\u5747\u503c\uff1a\u8f6c\u5316\u4e3a \\sum (a_i - mid) \\geq 0\uff0c\u4e8c\u5206 mid\u3002</li> <li>\u6700\u5927\u4e0a\u4e2d\u4f4d\u6570(1)\uff1a\u901a\u8fc7\u5c06\u5143\u7d20\u503c\u6839\u636e\u4e0e\u4e2d\u4f4d\u6570\u7684\u5927\u5c0f\u5173\u7cfb\u8f6c\u5316\u4e3a 1 \u6216 -1\uff0c\u5224\u65ad\u54ea\u4e00\u4fa7\u6570\u91cf\u66f4\u591a\u3002</li> </ul> <ol> <li>\u4e0b\u4e2d\u4f4d\u6570\uff1a\\le mid \u7684\u6570\u81f3\u5c11\u5360\u4e00\u534a    \u4e0a\u4e2d\u4f4d\u6570\uff1a\\ge mid \u7684\u6570\u81f3\u5c11\u5360\u4e00\u534a  </li> </ol>","tags":["\u5206\u6cbb","Divide and Conquer","\u5206\u6570\u89c4\u5212","Fractional Programming"]},{"location":"code/algorithm/DC/SegmentTree/","title":"\u7ebf\u6bb5\u6811\u5206\u6cbb","text":"","tags":["\u5206\u6cbb","Divide and Conquer"]},{"location":"code/algorithm/DC/SegmentTree/#\u7ebf\u6bb5\u6811\u5206\u6cbb","title":"\u7ebf\u6bb5\u6811\u5206\u6cbb","text":"<p>\u7ebf\u6bb5\u6811\u5206\u6cbb\u662f\u4e00\u79cd\u7ed3\u5408\u4e86\u7ebf\u6bb5\u6811\u548c\u5206\u6cbb\u601d\u60f3\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u8bbe\u8ba1\u65b9\u6cd5\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u52a8\u6001\u4fee\u6539\u548c\u67e5\u8be2\u7684\u95ee\u9898\uff0c\u4f20\u7edf\u7684\u6570\u636e\u7ed3\u6784\u53ef\u80fd\u65e0\u6cd5\u9ad8\u6548\u5904\u7406\u9891\u7e41\u7684\u4fee\u6539\u64cd\u4f5c\u3002\u800c\u7ebf\u6bb5\u6811\u5206\u6cbb\u901a\u8fc7\u5c06\u65f6\u95f4\u7ef4\u5ea6\u5f15\u5165\u7ebf\u6bb5\u6811\u7ed3\u6784\u4e2d\uff0c\u5b9e\u73b0\u5bf9\u52a8\u6001\u64cd\u4f5c\u7684\u9ad8\u6548\u7ba1\u7406\u3002</p> <p>\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u628a\u6bcf\u6761\u64cd\u4f5c\u5206\u914d\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u5efa\u7acb\u65f6\u95f4\u8f74\u7ebf\u6bb5\u6811\u3002\u6bcf\u79cd\u4fee\u6539\u64cd\u4f5c\uff0c\u62e5\u6709\u82e5\u5e72\u4e2a\u6709\u6548\u65f6\u95f4\u6bb5\uff0c\u5bf9\u5e94\u7740\u7ebf\u6bb5\u6811\u4e0a\u7684\u82e5\u5e72\u533a\u95f4\u3002\u6bcf\u6761\u67e5\u8be2\u64cd\u4f5c\u5bf9\u5e94\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u4e0a\u76f8\u5173\u7684\u72b6\u6001\u4fe1\u606f\u3002</p> <p>\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u8fc7\u7a0b\uff1a</p> <ol> <li>\u5148\u628a\u6240\u6709\u64cd\u4f5c\u8bb0\u5f55\u5206\u7c7b\uff0c\u6bcf\u79cd\u4fee\u6539\u64cd\u4f5c\u6574\u7406\u51fa\u82e5\u5e72\u4e2a\u6709\u6548\u65f6\u95f4\u6bb5</li> <li>\u6839\u636e\u6bcf\u4e2a\u6709\u6548\u65f6\u95f4\u6bb5\uff0c\u628a\u4efb\u52a1\u5206\u914d\u5230\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4e0a</li> <li>\u904d\u5386\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u6765\u5230\u67d0\u4e2a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u65f6\u6267\u884c\u76f8\u5e94\u7684\u4efb\u52a1\uff0c\u79bb\u5f00\u533a\u95f4\u65f6\u64a4\u9500\u76f8\u5e94\u7684\u4efb\u52a1</li> <li>\u7ebf\u6bb5\u6811\u7684\u53f6\u8282\u70b9\u5bf9\u5e94\u7740\u5355\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u6709\u67e5\u8be2\u64cd\u4f5c\u9700\u8981\u8bb0\u5f55\u67e5\u8be2\u7684\u7b54\u6848</li> </ol> <p>\u4f7f\u7528\u573a\u666f\uff1a</p> <ol> <li>\u5728\u7ebf\u7b97\u6cd5\u5b9e\u73b0\u56f0\u96be\u8f83\u5927\uff0c\u53ef\u80fd\u9700\u8981\u66f4\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6216\u8005\u65f6\u95f4\u590d\u6742\u5ea6\u65e0\u6cd5\u8fbe\u5230\u9884\u671f</li> <li>\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u64cd\u4f5c\u7684\u6b21\u5e8f\u53ef\u4ee5\u8f6c\u5316\u6210\u79bb\u7ebf\u7684\u65f6\u5e8f</li> </ol> <p>\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ol> <li>\u64cd\u4f5c\u7684\u6570\u91cf\u4e3a m\uff0c\u6bcf\u4e2a\u6709\u6548\u65f6\u95f4\u6bb5\u4f1a\u5206\u89e3\u6210 \\log m \u4e2a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4</li> <li>\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u90fd\u7559\u6709\u8fd9\u4e2a\u64cd\u4f5c\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u4efb\u52a1\u603b\u6570\u4e3a m * \\log m</li> <li>\u6267\u884c\u4efb\u52a1\u548c\u64a4\u9500\u4efb\u52a1\uff0c\u4f7f\u7528\u5230\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u5e76\u67e5\u96c6\u4e0a\u70b9\u7684\u4e2a\u6570\u4e3a n\uff0c\u5355\u6b21\u64cd\u4f5c\u7684\u4ee3\u4ef7\u4e3a \\log n</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u4e3a\uff0cO(m * \\log m * \\log n)</p> \u52a8\u6001\u56fe\u8fde\u901a\u6027 <p>\u7ef4\u62a4\u4e00\u5f20\u65e0\u5411\u7b80\u5355\u56fe\u3002\u4f60\u88ab\u8981\u6c42\u52a0\u5165\u5220\u9664\u4e00\u6761\u8fb9\u53ca\u67e5\u8be2\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u901a\u3002</p> <p>0\uff1a\u52a0\u5165\u4e00\u6761\u8fb9\u3002\u4fdd\u8bc1\u5b83\u4e0d\u5b58\u5728\u3002 1\uff1a\u5220\u9664\u4e00\u6761\u8fb9\u3002\u4fdd\u8bc1\u5b83\u5b58\u5728\u3002 2\uff1a\u67e5\u8be2\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u901a\u3002</p> Hint <p>\u5efa\u7acb\u65f6\u95f4\u8f74\u7ebf\u6bb5\u6811\uff0c\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u3002\u5efa\u7acb\u7ebf\u6bb5\u6811\u65f6\u6309\u8fb9\u548c\u65f6\u95f4\u6392\u5e8f\uff0c\u65b9\u4fbf\u7edf\u8ba1\u6bcf\u6761\u8fb9\u7684\u6709\u6548\u65f6\u95f4\u6bb5\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct query {\n  int64_t u, v, t, op;\n\n  query() : u(0), v(0), t(0), op(0) {}\n\n  query(int64_t _u, int64_t _v, int64_t _t, int64_t _op) : u(_u), v(_v), t(_t), op(_op) {}\n\n  // \u6309\u8fb9\u4e0e\u65f6\u95f4\u6392\u5e8f\n  bool operator&lt;(const query &amp;other) const {\n    if (u != other.u) { return u &lt; other.u; }\n    if (v != other.v) { return v &lt; other.v; }\n    return t &lt; other.t;\n  }\n\n  // \u6839\u636eu\u548cv\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u6761\u8fb9\n  bool operator==(const query &amp;other) const { return u == other.u &amp;&amp; v == other.v; }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  vector&lt;query&gt; queries(m + 1);\n  for (int64_t i = 1; i &lt;= m; ++i) {\n    int64_t op, u, v;\n    cin &gt;&gt; op &gt;&gt; u &gt;&gt; v;\n    queries[i] = {min(u, v), max(u, v), i, op};\n  }\n\n  // \u6839\u636e\u65f6\u95f4\u8f74\u5efa\u7acb\u7ebf\u6bb5\u6811\n  vector&lt;vector&lt;pair&lt;int64_t, int64_t&gt;&gt;&gt; interval(4 * m);\n  auto add = [&amp;](auto &amp;self, int64_t ql, int64_t qr, int64_t qx, int64_t qy, int64_t i, int64_t l,\n                 int64_t r) -&gt; void {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n      interval[i].emplace_back(qx, qy);\n      return;\n    }\n    int64_t mid = (l + r) &gt;&gt; 1;\n    if (ql &lt;= mid) { self(self, ql, qr, qx, qy, 2 * i, l, mid); }\n    if (qr &gt; mid) { self(self, ql, qr, qx, qy, 2 * i + 1, mid + 1, r); }\n  };\n  // \u5904\u7406\u6240\u6709\u8fb9\u7684\u6dfb\u52a0\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u6784\u5efa\u7ebf\u6bb5\u6811\n  vector&lt;int64_t&gt; index(m + 1, 0);\n  iota(index.begin(), index.end(), 0);\n  sort(index.begin() + 1, index.end(),\n       [&amp;](int64_t a, int64_t b) { return queries[a] &lt; queries[b]; });\n  for (int64_t i = 1, j = 1; i &lt;= m; i = j) {\n    int64_t u = queries[index[i]].u, v = queries[index[i]].v;\n    while (j &lt;= m &amp;&amp; queries[index[i]] == queries[index[j]]) { ++j; }  // \u6309\u8fb9\u5206\u7ec4\n    int64_t last_add = 0;\n    for (int64_t k = i; k &lt; j; ++k) {\n      if (queries[index[k]].op == 0) {  // \u6dfb\u52a0\u8fb9\n        last_add = k;\n      }\n      if (queries[index[k]].op == 1) {  // \u5220\u9664\u8fb9\n        int64_t start = queries[index[last_add]].t;\n        int64_t end   = queries[index[k]].t - 1;\n        add(add, start, end, u, v, 1, 1, m);\n        last_add = 0;\n      }\n    }\n    if (last_add != 0) {  // \u6700\u540e\u4e00\u6761\u6dfb\u52a0\u7684\u8fb9\u6ca1\u6709\u88ab\u5220\u9664, \u5219\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\n      int64_t start = queries[index[last_add]].t;\n      int64_t end   = m;\n      add(add, start, end, u, v, 1, 1, m);\n    }\n  }\n  // \u5e76\u67e5\u96c6\uff0c\u652f\u6301\u56de\u6eda\n  vector&lt;int64_t&gt; root(n + 1);\n  vector&lt;int64_t&gt; size(n + 1, 1);\n  vector&lt;pair&lt;int64_t, int64_t&gt;&gt; rollback;\n  iota(root.begin(), root.end(), 0);\n  auto find = [&amp;](int64_t x) {\n    while (root[x] != x) { x = root[x]; }\n    return x;\n  };\n  auto union_set = [&amp;](int64_t x, int64_t y) {\n    int64_t fx = find(x);\n    int64_t fy = find(y);\n    if (fx == fy) { return 0; }\n    if (size[fx] &lt; size[fy]) { swap(fx, fy); }\n    root[fy]  = fx;\n    size[fx] += size[fy];\n    rollback.emplace_back(fy, fx);\n    return 1;\n  };\n  auto union_rollback = [&amp;]() {\n    if (rollback.empty()) { return; }\n    auto [fy, fx] = rollback.back();\n    rollback.pop_back();\n    root[fy]  = fy;\n    size[fx] -= size[fy];\n  };\n\n  // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7ebf\u6bb5\u6811\uff0c\u5904\u7406\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u67e5\u8be2\n  vector&lt;bool&gt; results(m + 1);  // \u5b58\u50a8\u67e5\u8be2\u7ed3\u679c\n  auto dfs = [&amp;](auto &amp;self, int64_t i, int64_t l, int64_t r) -&gt; void {\n    int64_t union_count = 0;\n    // \u6dfb\u52a0\u5f53\u524d\u533a\u95f4\u7684\u6240\u6709\u8fb9\n    for (auto &amp;[u, v] : interval[i]) { union_count += union_set(u, v); }\n    if (l == r) {\n      if (queries[l].op == 2) {  // \u5904\u7406\u67e5\u8be2\u64cd\u4f5c\n        int64_t u  = queries[l].u;\n        int64_t v  = queries[l].v;\n        results[l] = (find(u) == find(v));\n      }\n    } else {\n      int64_t mid = (l + r) &gt;&gt; 1;\n      self(self, 2 * i, l, mid);\n      self(self, 2 * i + 1, mid + 1, r);\n    }\n    // \u56de\u6eda\u5230\u4e4b\u524d\u7684\u72b6\u6001\n    for (int64_t k = 0; k &lt; union_count; ++k) { union_rollback(); }\n  };\n  dfs(dfs, 1, 1, m);\n  for (int64_t i = 1; i &lt;= m; ++i) {\n    if (queries[i].op == 2) { cout &lt;&lt; (results[i] ? \"Y\" : \"N\") &lt;&lt; \"\\n\"; }\n  }\n  return 0;\n}\n</code></pre> \u6700\u5c0fmex\u751f\u6210\u6811 <p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u6743\u503c\u4e3a\u975e\u8d1f\u6574\u6570\u3002\u5b9a\u4e49\u4e00\u68f5\u751f\u6210\u6811\u7684 \\text{MEX} \u4e3a\u4e0d\u5728\u751f\u6210\u6811\u8fb9\u6743\u503c\u4e2d\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u3002\u6c42\u6240\u6709\u751f\u6210\u6811\u4e2d \\text{MEX} \u6700\u5c0f\u7684\u751f\u6210\u6811\u5bf9\u5e94\u7684 \\text{MEX} \u503c\u3002</p> Hint <p>\u5728 \\text{MEX} \u4e3a w \u7684\u751f\u6210\u6811\u4e2d\uff0c\u8fb9\u7684\u6743\u503c\u4e0d\u80fd\u4e3a w\u3002 \u56e0\u6b64\u53ef\u4ee5\u5c06\u6743\u503c\u4e3a w \u7684\u8fb9\uff0c\u6dfb\u52a0\u5230\u6743\u503c\u8f74\u7ebf\u6bb5\u6811\u4e0a\uff0c\u533a\u95f4\u4e3a [0, w-1] \u548c [w+1, \\text{max\\_w} + 1]\u3002\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u67e5\u8be2\u65f6\u5224\u65ad\u662f\u5426\u8fde\u901a\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  using TIII = tuple&lt;int, int, int&gt;;\n\n  vector&lt;TIII&gt; queries(m + 1);\n  int max_w = 0;\n  for (int i = 1; i &lt;= m; ++i) {\n    int u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    queries[i] = {u, v, w};\n    max_w      = max(max_w, w);\n  }\n  max_w++;  // \u6709\u53ef\u80fd\u6240\u6709\u4ece0\u5230max_w\u7684\u6743\u503c\u90fd\u5b58\u5728, \u7ed3\u679c\u4e3a max_w+1\n\n  // \u6839\u636e\u6743\u503c\u8f74\u5efa\u7acb\u7ebf\u6bb5\u6811\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; interval(4 * max_w);\n  auto add = [&amp;](auto &amp;self, int ql, int qr, int qx, int qy, int i, int l, int r) -&gt; void {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n      interval[i].emplace_back(qx, qy);\n      return;\n    }\n    int mid = (l + r) &gt;&gt; 1;\n    if (ql &lt;= mid) { self(self, ql, qr, qx, qy, 2 * i, l, mid); }\n    if (qr &gt; mid) { self(self, ql, qr, qx, qy, 2 * i + 1, mid + 1, r); }\n  };\n  // \u6743\u503c\u4e3aw\u7684\u8fb9\uff0c\u5728[0, w-1]\u548c[w+1, max_w]\u533a\u95f4\u5185\u5b58\u5728\n  for (auto [u, v, w] : queries) {\n    if (w &gt; 0) { add(add, 0, w - 1, u, v, 1, 0, max_w); }\n    add(add, w + 1, max_w, u, v, 1, 0, max_w);\n  }\n  // \u5e76\u67e5\u96c6\uff0c\u652f\u6301\u56de\u6eda\n  int part = n;  // \u8fde\u901a\u5757\u6570\u91cf\n  vector&lt;int&gt; root(n + 1);\n  vector&lt;int&gt; size(n + 1, 1);\n  vector&lt;pair&lt;int, int&gt;&gt; rollback;\n  iota(root.begin(), root.end(), 0);\n  auto find = [&amp;](int x) {\n    while (root[x] != x) { x = root[x]; }\n    return x;\n  };\n  auto union_set = [&amp;](int x, int y) {\n    int fx = find(x);\n    int fy = find(y);\n    if (fx == fy) { return 0; }\n    if (size[fx] &lt; size[fy]) { swap(fx, fy); }\n    root[fy]  = fx;\n    size[fx] += size[fy];\n    rollback.emplace_back(fy, fx);\n    part--;  // \u8fde\u901a\u5757\u6570\u91cf\u51cf\u5c11\n    return 1;\n  };\n  auto union_rollback = [&amp;]() {\n    if (rollback.empty()) { return; }\n    auto [fy, fx] = rollback.back();\n    rollback.pop_back();\n    root[fy]  = fy;\n    size[fx] -= size[fy];\n    part++;  // \u8fde\u901a\u5757\u6570\u91cf\u589e\u52a0\n  };\n\n  auto dfs = [&amp;](auto &amp;self, int i, int l, int r) -&gt; int {\n    int union_count = 0;\n    for (auto &amp;[u, v] : interval[i]) { union_count += union_set(u, v); }\n    int res = -1;\n    if (l == r) {\n      if (part == 1) { res = l; } // \u8fde\u901a\u5757\u6570\u91cf\u4e3a1\uff0c\u5f62\u6210\u4e00\u68f5\u751f\u6210\u6811\n    } else {\n      int mid = (l + r) &gt;&gt; 1;\n      res     = self(self, 2 * i, l, mid); // \u5148\u641c\u7d22\u5de6\u5b50\u6811, \u5982\u679c\u6ca1\u627e\u5230\u518d\u641c\u7d22\u53f3\u5b50\u6811\n      if (res == -1) { res = self(self, 2 * i + 1, mid + 1, r); }\n    }\n    for (int k = 0; k &lt; union_count; ++k) { union_rollback(); }\n    return res;\n  };\n  cout &lt;&lt; dfs(dfs, 1, 0, max_w) &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["\u5206\u6cbb","Divide and Conquer"]},{"location":"code/algorithm/DP/Digit/","title":"\u6570\u4f4d DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6570\u4f4d\u52a8\u6001\u89c4\u5212","Digit DP"]},{"location":"code/algorithm/DP/Digit/#\u6570\u4f4d\u52a8\u6001\u89c4\u5212","title":"\u6570\u4f4d\u52a8\u6001\u89c4\u5212","text":"<p>\u6570\u4f4d\u52a8\u6001\u89c4\u5212\uff08\\text{Digit DP}\uff09\u7528\u4e8e\u89e3\u51b3\u4e0e\u6570\u5b57\u7684\u4f4d\u6570\u3001\u6570\u4f4d\u76f8\u5173\u7684\u95ee\u9898\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u5bf9\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u8fdb\u884c\u72b6\u6001\u5b9a\u4e49\u548c\u8f6c\u79fb\uff0c\u4ece\u800c\u6c42\u89e3\u6574\u4e2a\u6570\u5b57\u7684\u95ee\u9898\u3002</p> <p>\u6570\u4f4d\u662f\u6307\u628a\u4e00\u4e2a\u6570\u5b57\u6309\u7167\u4e2a\u3001\u5341\u3001\u767e\u3001\u5343\u7b49\u7b49\u4e00\u4f4d\u4e00\u4f4d\u5730\u62c6\u5f00\uff0c\u5173\u6ce8\u5b83\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u3002\u5982\u679c\u62c6\u7684\u662f\u5341\u8fdb\u5236\u6570\uff0c\u90a3\u4e48\u6bcf\u4e00\u4f4d\u6570\u5b57\u90fd\u662f [0,9]\uff0c\u5176\u4ed6\u8fdb\u5236\u53ef\u7c7b\u6bd4\u5341\u8fdb\u5236\u3002</p> <p>\u6570\u4f4d \\text{DP} \u95ee\u9898\u4e00\u822c\u5177\u6709\u8fd9\u51e0\u4e2a\u7279\u5f81\uff1a</p> <ol> <li>\u8981\u6c42\u7edf\u8ba1\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u6570\u7684\u6570\u91cf\uff0c\u5373\u6700\u7ec8\u76ee\u7684\u4e3a\u8ba1\u6570</li> <li>\u8fd9\u4e9b\u6761\u4ef6\u7ecf\u8fc7\u8f6c\u5316\u540e\u53ef\u4ee5\u4f7f\u7528\u6570\u4f4d\u7684\u601d\u60f3\u53bb\u7406\u89e3\u548c\u5224\u65ad</li> <li>\u8f93\u5165\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u6570\u5b57\u533a\u95f4\uff08\u6709\u65f6\u4e5f\u53ea\u63d0\u4f9b\u4e0a\u754c\uff09\u6765\u4f5c\u4e3a\u7edf\u8ba1\u7684\u9650\u5236</li> <li>\u4e0a\u754c\u5f88\u5927\uff08\u6bd4\u5982 10^{18}\uff09\uff0c\u66b4\u529b\u679a\u4e3e\u9a8c\u8bc1\u4f1a\u8d85\u65f6</li> </ol> <p>\u4e00\u822c\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5373\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u679a\u4e3e\u6bcf\u4e00\u4f4d\u6570\u5b57\uff0c\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u679a\u4e3e\u7684\u4f4d\u6570\u3001\u662f\u5426\u53d7\u9650\u5236\u3001\u662f\u5426\u5df2\u7ecf\u586b\u4e86\u6570\u5b57\u7b49\u72b6\u6001\u3002\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u5907\u5fd8\u5f55\u8bb0\u5f55\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> <ol> <li>\u5907\u5fd8\u5f55 memo\uff1a\u8bb0\u5f55\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u521d\u59cb\u5316\u4e3a-1\uff0c\u8868\u793a\u6ca1\u6709\u8ba1\u7b97\u8fc7</li> <li>DFS \u51fd\u6570\uff1a\u9012\u5f52\u679a\u4e3e\u6bcf\u4e00\u4f4d\u6570\u5b57\uff0c\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u679a\u4e3e\u7684\u4f4d\u6570\u3001\u662f\u5426\u53d7\u9650\u5236\u3001\u662f\u5426\u5df2\u7ecf\u586b\u4e86\u6570\u5b57\u7b49\u72b6\u6001\u3002\u901a\u8fc7\u5907\u5fd8\u5f55\u8bb0\u5f55\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u5404\u4e2a\u53c2\u6570\u7684\u542b\u4e49\uff1a  <ul> <li>i\uff1a\u5f53\u524d\u679a\u4e3e\u7684\u7b2c\u51e0\u4f4d\u3002\u5982\u679c i \u7b49\u4e8e\u6570\u5b57\u7684\u4f4d\u6570\uff0c\u8868\u793a\u5df2\u7ecf\u679a\u4e3e\u5b8c\u4e86</li> <li>is\\_limit\uff1a\u5f53\u524d\u679a\u4e3e\u6570\u662f\u5426\u53d7\u9650\u5236\u3002\u5982\u679c\u53d7\u9650\u5236\u8868\u793a\u5f53\u524d\u679a\u4e3e\u7684\u6570\u5b57\u4e0d\u80fd\u8d85\u8fc7\u4e0a\u754c\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4e0a\u754c\u662f 1234\uff0c\u90a3\u4e48\u5728\u679a\u4e3e\u7b2c\u4e00\u4f4d\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u679a\u4e3e [0,1]\uff0c\u4e0d\u80fd\u679a\u4e3e [2,9]\uff1b\u5982\u679c\u7b2c\u4e00\u4f4d\u679a\u4e3e\u4e86 1\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4f4d\u53ea\u80fd\u679a\u4e3e [0,2]\uff0c\u4e0d\u80fd\u679a\u4e3e [3,9]</li> <li>is\\_num\uff1a\u5f53\u524d\u662f\u5426\u5df2\u7ecf\u586b\u4e86\u6570\u5b57\uff0c\u53d7\u524d\u5bfc 0 \u9650\u5236\u3002\u5982\u679c\u524d\u5bfc 0 \u6709\u5f71\u54cd\uff0c\u9700\u8981\u53bb\u6389\u8be5\u53c2\u6570\uff0c\u6216\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u8bbe\u7f6e\u4e3a true</li> <li>\u6dfb\u52a0\u5176\u4ed6\u53c2\u6570\uff1a\u5982 pre \u8868\u793a\u524d\u4e00\u4f4d\u586b\u7684\u6570\u5b57\uff0cmask \u8868\u793a\u5df2\u7ecf\u4f7f\u7528\u7684\u6570\u5b57\uff0cdiff \u8868\u793a\u5947\u5076\u4f4d\u6570\u5dee\u5f02\uff08\u53ef\u80fd\u4e3a\u8d1f\u6570\u9700\u8981\u52a0\u4e0a\u504f\u79fb\u91cf\uff09\uff0cmod \u8868\u793a\u4f59\u6570</li> </ul> </li> </ol> <p>\u5907\u5fd8\u5f55 memo \u7684\u7ef4\u5ea6\u4e0e\u53ef\u53d8\u53c2\u6570\u4e2a\u6570\u6709\u5173\uff0cis\\_limit \u548c is\\_num \u65e0\u9700\u8bb0\u5fc6\u5316\uff0c\u56e0\u4e3a\u4f7f\u7528 memo \u65f6\u8fd9\u4e24\u4e2a\u53c2\u6570\u5fc5\u5b9a\u4e3a false \u548c true\u3002</p> <p>\u5728\u95ee\u9898\u6c42\u89e3\u65f6\uff0c\u4e00\u822c\u5c06 [l, r] \u8f6c\u6362\u4e3a [0, r] \u548c [0, l-1]\uff0c\u7136\u540e\u5206\u522b\u6c42\u89e3\uff0c\u6700\u540e\u76f8\u51cf\u5373\u53ef\u3002 \u5982\u679c l-1 \u4e5f\u4e0d\u9002\u5408\uff08\u5982 l=0 \u6216\u975e\u5e38\u5927\u7684\u6570\u5b57\uff09\uff0c\u5219\u76f4\u63a5\u6c42\u89e3 [0, l]\uff0c\u7136\u540e\u76f8\u51cf\u5e76\u4e14\u5bf9 l \u8fdb\u884c\u7279\u6b8a\u7684 check \u5904\u7406\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002</p> \u6a21\u7248 C++<pre><code>int64_t digit_dp(const string &amp;s) {\n  int64_t m = s.length();\n\n  vector&lt;int64_t&gt; memo(m, -1);  // -1 \u8868\u793a\u6ca1\u6709\u8ba1\u7b97\u8fc7\n\n  using dfs_type = function&lt;int64_t(int64_t, bool, bool)&gt;;\n  dfs_type dfs   = [&amp;](int64_t i, bool is_limit, bool is_num, ...) -&gt; int64_t {\n    if (i == m) { return is_num; }  // is_num \u4e3a true \u8868\u793a\u5f97\u5230\u4e86\u4e00\u4e2a\u5408\u6cd5\u6570\u5b57\n    if (!is_limit &amp;&amp; is_num &amp;&amp; memo[i] != -1) { return memo[i]; }\n    int64_t res = 0;\n    // \u53ef\u4ee5\u8df3\u8fc7\u5f53\u524d\u6570\u4f4d\n    if (!is_num) { res = dfs(i + 1, false, false); }\n\n    int64_t up = is_limit ? s[i] - '0' : 9;  // \u5f53\u524d\u4f4d\u53ef\u586b\u7684\u6700\u5927\u6570\u5b57\n    for (int64_t d = 1 - is_num; d &lt;= up; ++d) {  // \u679a\u4e3e\u8981\u586b\u5165\u7684\u6570\u5b57 d\n      // if \u4e2d\u586b\u9650\u5236\u6761\u4ef6\n      if (true) { res = res + dfs(i + 1, is_limit &amp;&amp; d == up, true); }\n    }\n    if (!is_limit &amp;&amp; is_num) { memo[i] = res; }\n    return res;\n  };\n  // \u5f00\u59cb\u65f6\u8981\u7ea6\u675f\uff0c\u6240\u4ee5is_limit\u4e3atrue\n  return dfs(0, true, false);\n}\n\nint64_t solve(int64_t low, int64_t high) {\n  string low_str  = to_string(low - 1);\n  string high_str = to_string(high);\n  return digit_dp(high_str) - digit_dp(low_str);\n}\n</code></pre> \u6570\u5b57\u8ba1\u6570 <p>\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 a \u548c b\uff0c\u6c42\u5728 [a,b] \u4e2d\u7684\u6240\u6709\u6574\u6570\u4e2d\uff0c\u6bcf\u4e2a\u6570\u7801\uff08digit\uff09\u5404\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t digit_dp(const string &amp;s, int num) {\n  int m = s.length();\n  vector&lt;vector&lt;int64_t&gt;&gt; memo(m, vector&lt;int64_t&gt;(m, -1));\n  // count: \u5f53\u524d\u5df2\u7ecf\u586b\u4e86\u591a\u5c11\u4e2a num\n  using dfs_type = function&lt;int64_t(int64_t, bool, bool, int)&gt;;\n  dfs_type dfs   = [&amp;](int i, bool is_limit, bool is_num, int count) -&gt; int64_t {\n    if (i == m) { return is_num ? count : 0; }\n    if (!is_limit &amp;&amp; is_num &amp;&amp; memo[i][count] != -1) { return memo[i][count]; }\n    int64_t res = 0;\n    // \u53ef\u4ee5\u8df3\u8fc7\u5f53\u524d\u6570\u4f4d\n    if (!is_num) { res = dfs(i + 1, false, false, count); }\n    int up = is_limit ? s[i] - '0' : 9;\n    // \u679a\u4e3e\u8981\u586b\u5165\u7684\u6570\u5b57 d\n    for (int d = 1 - is_num; d &lt;= up; ++d) {\n      res = res + dfs(i + 1, is_limit &amp;&amp; d == up, true, count + (d == num));\n    }\n    // \u8bb0\u5fc6\u5316\u7ed3\u679c\n    if (!is_limit &amp;&amp; is_num) { memo[i][count] = res; }\n    return res;\n  };\n  return dfs(0, true, false, 0);\n}\n\nint main() {\n  string low;\n  string high;\n  cin &gt;&gt; low &gt;&gt; high;\n  vector&lt;int64_t&gt; count(10);\n  for (char ch : low) { count[ch - '0']++; }\n  for (int i = 0; i &lt;= 9; ++i) { cout &lt;&lt; digit_dp(high, i) - digit_dp(low, i) + count[i] &lt;&lt; \" \"; }\n}\n</code></pre> MYQ10 - Mirror Number <p>\u6c42 [a,b] \u4e2d\u955c\u50cf\u56de\u6587\u7684\u4e2a\u6570\u3002\u955c\u50cf\u56de\u6587\u662f\u6307\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u5de6\u53f3\u5bf9\u79f0\u7684\u6570\u5b57\u3002\u663e\u7136\uff1a\u955c\u50cf\u56de\u6587\u7531 0,1,8 \u6784\u6210\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstddef&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing VVVI = vector&lt;vector&lt;vector&lt;int64_t&gt;&gt;&gt;;\nVVVI memo;  // \u8bb0\u5fc6\u5316\u6570\u7ec4\n\nint64_t digit_dp(string &amp;s) {\n  int64_t m = s.length();\n  s.push_back('0');\n  reverse(s.begin(), s.end());\n\n  vector&lt;int64_t&gt; fill(m + 1, 0);\n  // start\u8868\u793a\u975e0\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u90a3\u4e48\u4ece\u8fd9\u91cc\u5f00\u59cb\u7684\u957f\u5ea6\u662fm-start\uff0c\u6700\u591a\u53ea\u7528\u904d\u5386\u4e00\u534a\n  using dfs_type = function&lt;int64_t(int64_t, bool, bool, int64_t)&gt;;\n  dfs_type dfs   = [&amp;](int64_t i, bool is_limit, bool ok, int64_t start) -&gt; int64_t {\n    if (i == 0) { return ok; }  // \u679a\u4e3e\u5b8c\u6240\u6709\u6570\u4f4d, ok\u8868\u793a\u662f\u5426\u5bf9\u79f0\n    if (!is_limit &amp;&amp; memo[i][start][ok] != -1) { return memo[i][start][ok]; }\n    int64_t res = 0;\n\n    int64_t up  = is_limit ? s[i] - '0' : 9;\n    // \u679a\u4e3e\u8981\u586b\u5165\u7684\u6570\u5b57 d\n    for (int64_t d = 0; d &lt;= up; ++d) {\n      if (d != 0 &amp;&amp; d != 1 &amp;&amp; d != 8) {  // \u4e0d\u80fd\u6709\u975e0,1,8\n        continue;\n      }\n      fill[i]            = d;\n      int64_t new_ok     = (ok &amp;&amp; i &lt;= start / 2) ? d == fill[start - i + 1] : ok;  // \u5bf9\u79f0\u6027\n      int64_t new_start  = (start == i &amp;&amp; d == 0) ? start - 1 : start;  // \u66f4\u65b0\u975e0\u8d77\u59cb\u4f4d\u7f6e\n      res               += dfs(i - 1, is_limit &amp;&amp; d == up, new_ok, new_start);\n    }\n\n    if (!is_limit) { memo[i][start][ok] = res; }\n    return res;\n  };\n  return dfs(m, true, true, m);\n}\n\nint64_t check(const string &amp;s) {\n  int64_t m   = s.length();\n  int64_t res = 0;\n  for (int64_t i = 0; i &lt; m; i++) {\n    if (s[i] != '0' &amp;&amp; s[i] != '1' &amp;&amp; s[i] != '8') {  // \u4e0d\u80fd\u6709\u975e0,1,8\n      return 0;\n    }\n    if (s[i] != s[m - i - 1]) {  // \u5bf9\u79f0\n      return 0;\n    }\n  }\n  return 1;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t;\n  cin &gt;&gt; t;\n  size_t m = 0;\n  vector&lt;string&gt; low(t), high(t);\n  for (int64_t i = 0; i &lt; t; i++) {\n    cin &gt;&gt; low[i] &gt;&gt; high[i];\n    m = max({m, low[i].length(), high[i].length()});\n  }\n  // \u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u590d\u7528memo\u6570\u7ec4, \u907f\u514dmemo\u91cd\u65b0\u8ba1\u7b97\n  memo.resize(m + 1, vector&lt;vector&lt;int64_t&gt;&gt;(m + 1, vector&lt;int64_t&gt;(2, -1)));\n  for (int i = 0; i &lt; t; i++) {\n    int is_low       = check(low[i]);  // low\u672c\u8eab\u662f\u5426\u7b26\u5408\u8981\u6c42\n    int64_t high_ans = digit_dp(high[i]);\n    int64_t low_ans  = digit_dp(low[i]);\n    cout &lt;&lt; high_ans - low_ans + is_low &lt;&lt; \"\\n\";\n  }\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6570\u4f4d\u52a8\u6001\u89c4\u5212","Digit DP"]},{"location":"code/algorithm/DP/Interval/","title":"\u533a\u95f4 DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","Interval DP"]},{"location":"code/algorithm/DP/Interval/#\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","title":"\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","text":"<p>\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212\uff08\\text{Interval DP}\uff09\u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e0e\u533a\u95f4\u76f8\u5173\u7684\u95ee\u9898\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u95ee\u9898\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u5b50\u533a\u95f4\uff0c\u901a\u8fc7\u9012\u63a8\u5173\u7cfb\u6765\u6c42\u89e3\u6574\u4e2a\u533a\u95f4\u7684\u95ee\u9898\u3002</p> <p>\u533a\u95f4\u7c7b\u52a8\u6001\u89c4\u5212\u5c55\u5f00\u7684\u5e38\u89c1\u65b9\u5f0f\uff1a</p> <ol> <li>\u57fa\u4e8e\u4e24\u4fa7\u7aef\u70b9\u8ba8\u8bba\u7684\u53ef\u80fd\u6027\u5c55\u5f00</li> <li>\u57fa\u4e8e\u8303\u56f4\u4e0a\u5212\u5206\u70b9\u7684\u53ef\u80fd\u6027\u5c55\u5f00</li> </ol> <p>\u4ee4\u72b6\u6001 f(i, j) \u8868\u793a\u5c06\u4e0b\u6807\u4f4d\u7f6e i \u5230 j \u7684\u6240\u6709\u5143\u7d20\u5408\u5e76\u80fd\u83b7\u5f97\u7684\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  f(i, j) = \\max_{i \\leq k &lt; j} \\{f(i, k) + f(k+1, j) + \\text{cost}(i, j)\\}  <p>\u5176\u4e2d\uff0c\\text{cost}(i, j) \u8868\u793a\u5c06\u533a\u95f4 [i, j] \u5408\u5e76\u6240\u83b7\u5f97\u7684\u4ef7\u503c\u3002</p>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","Interval DP"]},{"location":"code/algorithm/DP/Interval/#\u57fa\u4e8e\u4e24\u4fa7\u7aef\u70b9\u8ba8\u8bba","title":"\u57fa\u4e8e\u4e24\u4fa7\u7aef\u70b9\u8ba8\u8bba","text":"<p>\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u7528\u4e8e\u95ee\u9898\u4e2d\u9700\u8981\u8003\u8651\u533a\u95f4\u4e24\u7aef\u7684\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\u6765\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u3002</p> \u8ba9\u5b57\u7b26\u4e32\u6210\u4e3a\u56de\u6587\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570 <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u4efb\u610f\u5b57\u7b26\u3002\u8bf7\u4f60\u8fd4\u56de\u8ba9 s \u6210\u4e3a\u56de\u6587\u4e32\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p> \u8bb0\u5fc6\u5316\u641c\u7d22\u4f4d\u7f6e\u4f9d\u8d56\u7a7a\u95f4\u4f18\u5316 C++<pre><code>class Solution {\n public:\n  int minInsertions(string s) {\n    int n = s.size();\n    vector&lt;vector&lt;int&gt;&gt; memo(n, vector&lt;int&gt;(n, -1));\n    auto dfs = [&amp;](auto &amp;&amp;self, int i, int j) {\n      if (i &gt;= j) { return 0; }\n      // \u8bb0\u5fc6\u5316\u641c\u7d22\n      if (memo[i][j] != -1) { return memo[i][j]; }\n      int res = 0;         // \u7a7a\u4e32\u6216\u5355\u5b57\u7b26\u5df2\u7ecf\u662f\u56de\u6587\uff0c\u4e0d\u9700\u8981\u63d2\u5165\n      if (s[i] == s[j]) {  // \u4e24\u7aef\u5b57\u7b26\u76f8\u540c\uff0c\u4e0d\u9700\u8981\u63d2\u5165\n        res = self(self, i + 1, j - 1);\n      } else {  // \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u4e24\u7aef\u5b57\u7b26\u76f8\u540c\n        res = min(self(self, i + 1, j), self(self, i, j - 1)) + 1;\n      }\n      memo[i][j] = res;  // \u8bb0\u5fc6\u5316\n      return res;\n    };\n    return dfs(dfs, 0, n - 1);\n  }\n};\n</code></pre> C++<pre><code>class Solution {\n public:\n  int minInsertions(string s) {\n    int n = s.size();\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));\n    // dp[i][j] \u4f9d\u8d56 dp[i+1][j-1], dp[i+1][j], dp[i][j-1]\n    for (int i = n - 1; i &gt;= 0; --i) {\n      for (int j = i + 1; j &lt; n; ++j) {\n        if (s[i] == s[j]) {  // \u4e24\u7aef\u5b57\u7b26\u76f8\u540c\uff0c\u4e0d\u9700\u8981\u63d2\u5165\n          dp[i][j] = dp[i + 1][j - 1];\n        } else {  // \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u4e24\u7aef\u5b57\u7b26\u76f8\u540c\n          dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1;\n        }\n      }\n    }\n    return dp[0][n - 1];\n  }\n};\n</code></pre> C++<pre><code>class Solution {\n public:\n  int minInsertions(string s) {\n      int n = s.size();\n      vector&lt;int&gt; dp(n, 0);\n      // dp[i][j] \u4f9d\u8d56 dp[i+1][j-1], dp[i+1][j], dp[i][j-1], \u5373\u5de6\u4e0b\u89d2, \u5de6\u8fb9, \u4e0b\u8fb9 \n      for (int i = n - 1, left_down = 0; i &gt;= 0; --i) {\n        left_down = 0;  // \u6bcf\u6b21\u66f4\u65b0\u5de6\u4e0b\u89d2\n        for (int j = i + 1; j &lt; n; ++j) {\n          int back_up = dp[j];  // \u66f4\u65b0\u524d\u7684 dp[i+1][j]\n          if (s[i] == s[j]) {  // \u4e24\u7aef\u5b57\u7b26\u76f8\u540c\uff0c\u4e0d\u9700\u8981\u63d2\u5165\n            dp[j] = left_down;\n          } else {  // \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u4e24\u7aef\u5b57\u7b26\u76f8\u540c\n            dp[j] = min(dp[j], dp[j - 1]) + 1;\n          }\n          left_down = back_up;\n        }\n      }\n      return dp[n-1];\n    }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","Interval DP"]},{"location":"code/algorithm/DP/Interval/#\u8303\u56f4\u4e0a\u5212\u5206\u70b9\u8ba8\u8bba","title":"\u8303\u56f4\u4e0a\u5212\u5206\u70b9\u8ba8\u8bba","text":"<p>\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u7528\u4e8e\u95ee\u9898\u4e2d\u9700\u8981\u8003\u8651\u533a\u95f4\u5185\u90e8\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u533a\u95f4\u5185\u7684\u67d0\u4e2a\u5212\u5206\u70b9\u6765\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u3002</p> <p>\u7a7a\u95f4\u4f18\u5316</p> <p>\u57fa\u4e8e\u8303\u56f4\u4e0a\u5212\u5206\u70b9\u8ba8\u8bba\u7684\u533a\u95f4 \\text{DP} \u901a\u5e38\u4e0d\u5bb9\u6613\u8fdb\u884c\u7a7a\u95f4\u4f18\u5316\uff0c\u56e0\u4e3a\u72b6\u6001\u8f6c\u79fb\u4f9d\u8d56\u4e8e\u591a\u4e2a\u5b50\u533a\u95f4\u7684\u7ed3\u679c\uff0c\u96be\u4ee5\u901a\u8fc7\u6eda\u52a8\u6570\u7ec4\u7b49\u6280\u672f\u6765\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> \u5207\u68cd\u5b50\u7684\u6700\u5c0f\u6210\u672c <p>\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u7ef3\u5b50\u4e0a\u6709\u4e00\u4e9b\u9700\u8981\u5207\u5272\u7684\u4f4d\u7f6e\uff0c\u5207\u5272\u4e00\u6b21\u7684\u6210\u672c\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u3002\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06\u7ef3\u5b50\u5207\u5272\u5b8c\u6240\u9700\u7684\u6700\u5c0f\u6210\u672c\u3002</p> \u8bb0\u5fc6\u5316\u641c\u7d22\u4f4d\u7f6e\u4f9d\u8d56 C++<pre><code>class Solution {\n public:\n  int minCost(int n, vector&lt;int&gt; &amp;cuts) {\n    int m = cuts.size();\n    vector&lt;vector&lt;int&gt;&gt; memo(m, vector&lt;int&gt;(m, -1));\n\n    sort(cuts.begin(), cuts.end());\n    auto dfs = [&amp;](auto &amp;&amp;self, int left, int right) {\n      if (left &gt; right) { return 0; }\n      // \u8bb0\u5fc6\u5316\u641c\u7d22\n      if (memo[left][right] != -1) { return memo[left][right]; }\n      // \u8ba1\u7b97\u5f53\u524d\u533a\u95f4\u7684\u5b9e\u9645\u957f\u5ea6(\u5207\u5272\u4e00\u6b21\u7684\u6210\u672c)\n      int cost = (right == m - 1 ? n : cuts[right + 1]) - (left == 0 ? 0 : cuts[left - 1]);\n      int res  = INT_MAX;\n      // \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5212\u5206\u70b9\n      for (int i = left; i &lt;= right; ++i) {\n        res = min(res, self(self, left, i - 1) + self(self, i + 1, right) + cost);\n      }\n      memo[left][right] = res;  // \u8bb0\u5fc6\u5316\n      return res;\n    };\n    return dfs(dfs, 0, m - 1);\n  }\n};\n</code></pre> C++<pre><code>class Solution {\n public:\n  int minCost(int n, vector&lt;int&gt; &amp;cuts) {\n    int m = cuts.size();\n\n    sort(cuts.begin(), cuts.end());\n    vector&lt;vector&lt;int&gt;&gt; dp(m, vector&lt;int&gt;(m, 0));\n    // dp[left][right] \u4f9d\u8d56 dp[left][i-1], dp[i+1][right] (left&lt;=i&lt;=right)\n    for (int left = m - 1; left &gt;= 0; --left) {\n      for (int right = left; right &lt; m; ++right) {\n        // \u8ba1\u7b97\u5f53\u524d\u533a\u95f4\u7684\u5b9e\u9645\u957f\u5ea6\n        int cost        = (right == m - 1 ? n : cuts[right + 1]) - (left == 0 ? 0 : cuts[left - 1]);\n        dp[left][right] = INT_MAX;\n        // \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5212\u5206\u70b9\n        for (int i = left; i &lt;= right; ++i) {\n          int left_cost   = (i &gt; left) ? dp[left][i - 1] : 0;\n          int right_cost  = (i &lt; right) ? dp[i + 1][right] : 0;\n          dp[left][right] = min(dp[left][right], left_cost + right_cost + cost);\n        }\n      }\n    }\n    return dp[0][m - 1];\n  }\n};\n</code></pre> <p>\u57fa\u4e8e\u533a\u95f4\u957f\u5ea6\u7684\u904d\u5386\u987a\u5e8f</p> <p>\u5728\u533a\u95f4 \\text{DP} \u4e2d\uff0c\u5fc5\u987b\u6309\u7167\u533a\u95f4\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u904d\u5386\u4ee5\u4fdd\u8bc1\u4f9d\u8d56\u987a\u5e8f\u3002\u800c\u5728\u6bcf\u4e2a\u56fa\u5b9a\u533a\u95f4\u5185\u90e8\uff0c\u679a\u4e3e\u5212\u5206\u70b9 i \u7684\u65b9\u5411\uff08\u5982\u4ece\u5de6\u5230\u53f3\uff09\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002</p> <p>\u56e0\u6b64\u4ece\u8bb0\u5fc6\u5316\u641c\u7d22\u8f6c\u4e3a\u9012\u63a8\u65f6\uff0c\u53ea\u9700\u4fdd\u8bc1\u5916\u5c42\u201c\u533a\u95f4\u957f\u5ea6\u9012\u589e\u201d\uff0c\u5185\u5c42\u679a\u4e3e\u65b9\u5f0f\u4fdd\u6301\u4e0d\u53d8\u5373\u53ef\u3002</p>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u533a\u95f4\u578b\u52a8\u6001\u89c4\u5212","Interval DP"]},{"location":"code/algorithm/DP/Knapsack/","title":"\u80cc\u5305 DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u80cc\u5305\u95ee\u9898","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\uff08\\text{Knapsack Problem}\uff09\u662f\u52a8\u6001\u89c4\u5212\u4e2d\u7684\u7ecf\u5178\u95ee\u9898\uff0c\u901a\u5e38\u5206\u4e3a\u4e24\u79cd\u4e3b\u8981\u7c7b\u578b\uff1a\\text{0-1} \u80cc\u5305\u95ee\u9898\u548c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u3002</p>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#0-1-\u80cc\u5305","title":"0-1 \u80cc\u5305","text":"<p>\u5728 \\text{0-1} \u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u9009\u62e9\u653e\u5165\u80cc\u5305\u6216\u4e0d\u653e\u5165\u80cc\u5305\u3002</p> <p>\u7ed9\u5b9a n \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6700\u5927\u627f\u91cd W \u7684\u80cc\u5305\uff0c\u76ee\u6807\u662f\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u5f97\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 W\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u72b6\u6001\u5b9a\u4e49\uff1a \u8bbe dp[i][j] \u8868\u793a\u524d i \u4e2a\u7269\u54c1\u4e2d\uff0c\u5bb9\u91cf\u4e0d\u8d85\u8fc7 j \u7684\u80cc\u5305\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p>  dp[i][j] = \\begin{cases} dp[i-1][j], &amp; \\text{if } j &lt; w_i \\\\ \\max(dp[i-1][j], dp[i-1][j - w_i] + v_i), &amp; \\text{if } j \\geq w_i \\end{cases}  <p>\u8fb9\u754c\u6761\u4ef6\uff1a</p>  \\begin{aligned} dp[0][j] &amp;= 0 \\quad (0 \\leq j \\leq W) \\\\ dp[i][0] &amp;= 0 \\quad (0 \\leq i \\leq n) \\end{aligned}  \u91c7\u836f <p>\u6709\u4e00\u4e2a\u80cc\u5305\uff0c\u6700\u5927\u627f\u91cd\u4e3a t\uff0c\u6709 m \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u62e9\u4e00\u6b21\u3002\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 t\uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> \u6807\u51c6DP\u7a7a\u95f4\u4f18\u5316 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int t, m;\n  cin &gt;&gt; t &gt;&gt; m;\n  vector&lt;int&gt; weights(m + 1), values(m + 1);\n  for (int i = 1; i &lt;= m; ++i) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n  vector&lt;vector&lt;int&gt;&gt; dp(m + 1, vector&lt;int&gt;(t + 1, 0));\n  for (int i = 1; i &lt;= m; ++i) {\n    for (int j = 1; j &lt;= t; ++j) {\n      if (j &gt;= weights[i]) {  // \u53ef\u4ee5\u9009\u62e9\u653e\u5165\u7b2c i \u4e2a\u7269\u54c1\u6216\u8005\u4e0d\u653e\u5165\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i]] + values[i]);\n      } else {  // \u5bb9\u91cf\u4e0d\u8db3\uff0c\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\n        dp[i][j] = dp[i - 1][j];\n      }\n    }\n  }\n  cout &lt;&lt; dp[m][t] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p>\u7531\u4e8e dp[i][j] \u53ea\u4f9d\u8d56\u4e8e dp[i-1][j] \u548c dp[i-1][j - w_i]\uff0c\u53ef\u4ee5\u5c06\u4e8c\u7ef4\u6570\u7ec4\u4f18\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int t, m;\n  cin &gt;&gt; t &gt;&gt; m;\n  vector&lt;int&gt; weights(m + 1), values(m + 1);\n  for (int i = 1; i &lt;= m; ++i) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n  vector&lt;int&gt; dp(t + 1, 0);\n  for (int i = 1; i &lt;= m; ++i) {\n    for (int j = t; j &gt;= weights[i]; --j) {  // \u9006\u5e8f\u904d\u5386, \u4fdd\u8bc1 dp[j-weights[i]] \u662f\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\n      dp[j] = max(dp[j], dp[j - weights[i]] + values[i]);\n    }\n  }\n  cout &lt;&lt; dp[t] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u5e26\u4f9d\u8d56\u7684-0-1-\u80cc\u5305","title":"\u5e26\u4f9d\u8d56\u7684 0-1 \u80cc\u5305","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7269\u54c1\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u5373\u67d0\u4e9b\u7269\u54c1\u53ea\u80fd\u5728\u5176\u4ed6\u7269\u54c1\u88ab\u9009\u4e2d\u65f6\u624d\u80fd\u88ab\u9009\u4e2d\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684 \\text{0-1} \u80cc\u5305\u95ee\u9898\u79f0\u4e3a\u5e26\u4f9d\u8d56\u7684 \\text{0-1} \u80cc\u5305\u95ee\u9898\u3002</p> <p>\u6811\u5f62\u4f9d\u8d56</p> <p>\u5982\u679c\u4f9d\u8d56\u662f\u6811\u5f62\u7ed3\u6784, \u53ef\u4ee5\u7528\u6811\u5f62 \\text{dp} \u89e3\u51b3\u3002</p> \u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848 <p>\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a n \u7684\u80cc\u5305\uff0cm \u4e2a\u53ef\u9009\u7684\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u4ef7\u683c v_i \u548c\u4e00\u4e2a\u91cd\u8981\u5ea6 p_i\uff0c\u7269\u54c1\u603b\u4ef7\u503c\u4e3a v_i \\times p_i\u3002\u4f46\u662f\u6709\u4e9b\u7269\u54c1\u662f\u9644\u5c5e\u7269\u54c1\uff0c\u53ea\u80fd\u5728\u4e3b\u4ef6\u7269\u54c1\u8d2d\u4e70\u7684\u60c5\u51b5\u4e0b\u8d2d\u4e70\u3002\u6bcf\u4e2a\u4e3b\u4ef6\u7269\u54c1\u53ef\u4ee5\u6709 0 \u4e2a\u30011 \u4e2a\u6216 2 \u4e2a\u9644\u5c5e\u7269\u54c1\u3002\u9644\u5c5e\u7269\u54c1\u4e0d\u518d\u6709\u9644\u5c5e\u7269\u54c1\u3002\u5728\u4e0d\u8d85\u8fc7\u9884\u7b97\u7684\u60c5\u51b5\u4e0b, \u4f7f\u5f97\u8d2d\u4e70\u7684\u7269\u54c1\u603b\u4ef7\u503c\u6700\u5927.</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int&gt; weights(m + 1), values(m + 1), parents(m + 1);\n  vector&lt;int&gt; kings(m + 1);               // kings[i]\u8868\u793a\u7269\u54c1i\u662f\u5426\u4e3a\u4e3b\u4ef6\u7269\u54c1\n  vector&lt;vector&lt;int&gt;&gt; dependents(m + 1);  // dependents[i]\u8868\u793a\u7269\u54c1i\u7684\u9644\u5c5e\u7269\u54c1\n  for (int i = 1; i &lt;= m; ++i) {\n    cin &gt;&gt; weights[i] &gt;&gt; values[i] &gt;&gt; parents[i];\n    values[i] *= weights[i];  // \u8f6c\u5316\u4e3a\u4ef7\u503c\u80cc\u5305\n    if (parents[i] == 0) {    // \u7269\u54c1i\u4e3a\u4e3b\u4ef6\u7269\u54c1\n      kings[i] = 1;\n    } else {  // \u7269\u54c1i\u4e3a\u7269\u54c1parents[i]\u7684\u9644\u5c5e\u7269\u54c1\n      dependents[parents[i]].push_back(i);\n    }\n  }\n\n  vector&lt;int&gt; dp(n + 1, 0);\n  for (int i = 1; i &lt;= m; ++i) {\n    // \u53ea\u5904\u7406\u4e3b\u4ef6\u7269\u54c1\n    if (kings[i] == 0) { continue; }\n    // \u679a\u4e3e\u4e3b\u4ef6\u7269\u54c1i\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408(\u5305\u62ec\u4e0d\u9009\u4efb\u4f55\u9644\u5c5e\u7269\u54c1)\n    for (int j = n; j &gt;= weights[i]; --j) {\n      // \u5148\u4e0d\u9009\u9644\u5c5e\u7269\u54c1, \u53ea\u8003\u8651\u4e3b\u4ef6\u7269\u54c1\n      dp[j] = max(dp[j], dp[j - weights[i]] + values[i]);\n      // \u679a\u4e3e\u9644\u5c5e\u7269\u54c1\u7684\u6240\u6709\u7ec4\u5408, \u6b64\u5904\u5047\u8bbe\u9644\u5c5e\u4e0d\u8d85\u8fc732\u4ef6\n      int m = dependents[i].size();\n      for (int s = 1; s &lt; (1 &lt;&lt; m); ++s) {\n        int total_weight = weights[i];  // \u4e3b\u4ef6\u7269\u54c1i\u7684\u91cd\u91cf, \u5fc5\u987b\u9009\n        int total_value  = values[i];   // \u4e3b\u4ef6\u7269\u54c1i\u7684\u4ef7\u503c, \u5fc5\u987b\u9009\n        for (int k = 0; k &lt; m; ++k) {\n          if ((s &amp; (1 &lt;&lt; k)) != 0) {  // \u9009\u62e9\u9644\u5c5e\u7269\u54c1k\n            total_weight += weights[dependents[i][k]];\n            total_value  += values[dependents[i][k]];\n          }\n        }\n        if (total_weight &lt;= j) { dp[j] = max(dp[j], dp[j - total_weight] + total_value); }\n      }\n    }\n  }\n  cout &lt;&lt; dp[n] &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u5206\u7ec4\u80cc\u5305","title":"\u5206\u7ec4\u80cc\u5305","text":"<p>\u5728\u5206\u7ec4\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u7269\u54c1\u88ab\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4\u4e2d\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u7269\u54c1\u653e\u5165\u80cc\u5305\u3002</p> <p>\u7ed9\u5b9a n \u4e2a\u7269\u54c1\uff0c\u8fd9\u4e9b\u7269\u54c1\u88ab\u5206\u6210 g \u7ec4\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6700\u5927\u627f\u91cd W \u7684\u80cc\u5305\uff0c\u76ee\u6807\u662f\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u5f97\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 W\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u5206\u7ec4\u80cc\u5305\u7684\u72b6\u6001\u5b9a\u4e49\u4e0e \\text{0-1} \u80cc\u5305\u7c7b\u4f3c\uff0c\u8bbe dp[i][j] \u8868\u793a\u524d i \u7ec4\u7269\u54c1\u4e2d\uff0c\u5bb9\u91cf\u4e0d\u8d85\u8fc7 j \u7684\u80cc\u5305\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002\u6bcf\u7ec4\u5185\u5206\u522b\u9009\u62e9\u4e00\u4e2a\u7269\u54c1\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u3002</p> \u901a\u5929\u4e4b\u5206\u7ec4\u80cc\u5305 <p>\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a m \u7684\u80cc\u5305\uff0cn \u4e2a\u53ef\u9009\u7684\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i\u3001\u4e00\u4e2a\u4ef7\u503c v_i \u548c\u4e00\u4e2a\u7ec4\u522b g_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 m\uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u4f46\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\u522b\uff0c\u53ea\u80fd\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u7269\u54c1\u653e\u5165\u80cc\u5305\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int m, n;\n  cin &gt;&gt; m &gt;&gt; n;\n  vector&lt;int&gt; weights(n + 1), values(n + 1);\n  map&lt;int, vector&lt;int&gt;&gt; groups;\n  for (int i = 1; i &lt;= n; ++i) {\n    int w, v, g;\n    cin &gt;&gt; w &gt;&gt; v &gt;&gt; g;\n    groups[g].push_back(i);\n    weights[i] = w;\n    values[i]  = v;\n  }\n  vector&lt;int&gt; dp(m + 1, 0);\n  for (const auto &amp;[_, items] : groups) {\n    for (int j = m; j &gt;= 0; --j) {\n      for (auto i : items) {\n        if (j &gt;= weights[i]) { dp[j] = max(dp[j], dp[j - weights[i]] + values[i]); }\n      }\n    }\n  }\n  cout &lt;&lt; dp[m] &lt;&lt; '\\n';\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u5b8c\u5168\u80cc\u5305","title":"\u5b8c\u5168\u80cc\u5305","text":"<p>\u5728\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u9009\u62e9\u653e\u5165\u80cc\u5305\u591a\u6b21\u3002</p> <p>\u7ed9\u5b9a n \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6700\u5927\u627f\u91cd W \u7684\u80cc\u5305\uff0c\u76ee\u6807\u662f\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u5f97\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 W\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u72b6\u6001\u5b9a\u4e49\uff1a \u8bbe dp[i][j] \u8868\u793a\u524d i \u4e2a\u7269\u54c1\u4e2d\uff0c\u5bb9\u91cf\u4e0d\u8d85\u8fc7 j \u7684\u80cc\u5305\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p>  dp[i][j] = \\begin{cases} dp[i-1][j], &amp; \\text{if } j &lt; w_i \\\\ \\max(dp[i-1][j], dp[i][j - w_i] + v_i), &amp; \\text{if } j \\geq w_i \\end{cases}  <p>\u8fb9\u754c\u6761\u4ef6\uff1a</p>  \\begin{aligned} dp[0][j] &amp;= 0 \\quad (0 \\leq j \\leq W) \\\\ dp[i][0] &amp;= 0 \\quad (0 \\leq i \\leq n) \\end{aligned}  \u75af\u72c2\u7684\u91c7\u836f <p>\u6709\u4e00\u4e2a\u80cc\u5305\uff0c\u6700\u5927\u627f\u91cd\u4e3a t\uff0c\u6709 m \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u9009\u4efb\u610f\u6b21\u3002\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 t\uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> \u6807\u51c6DP\u7a7a\u95f4\u4f18\u5316 <p>MLE</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int t, m;\n  cin &gt;&gt; t &gt;&gt; m;\n  vector&lt;int&gt; weights(m + 1), values(m + 1);\n  for (int i = 1; i &lt;= m; ++i) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n  vector&lt;vector&lt;int64_t&gt;&gt; dp(m + 1, vector&lt;int64_t&gt;(t + 1, 0));\n  for (int i = 1; i &lt;= m; ++i) {\n    for (int j = 1; j &lt;= t; ++j) {\n      dp[i][j] = dp[i - 1][j];\n      if (j &gt;= weights[i]) { dp[i][j] = max(dp[i][j], dp[i][j - weights[i]] + values[i]); }\n    }\n  }\n  cout &lt;&lt; dp[m][t] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p>\u7531\u4e8e dp[i][j] \u53ea\u4f9d\u8d56\u4e8e dp[i-1][j] \u548c dp[i][j - w_i]\uff0c\u53ef\u4ee5\u5c06\u4e8c\u7ef4\u6570\u7ec4\u4f18\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u3002</p> <p>\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u6b63\u5e8f\u904d\u5386\u5bb9\u91cf j\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u88ab\u591a\u6b21\u9009\u62e9\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int t, m;\n  cin &gt;&gt; t &gt;&gt; m;\n  vector&lt;int&gt; weights(m + 1), values(m + 1);\n  for (int i = 1; i &lt;= m; ++i) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n  vector&lt;int64_t&gt; dp(t + 1, 0);\n  for (int i = 1; i &lt;= m; ++i) {\n    for (int j = weights[i]; j &lt;= t; ++j) { dp[j] = max(dp[j], dp[j - weights[i]] + values[i]); }\n  }\n  cout &lt;&lt; dp[t] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u591a\u91cd\u80cc\u5305","title":"\u591a\u91cd\u80cc\u5305","text":"<p>\u5728\u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u6570\u91cf\u9650\u5236\uff0c\u8868\u793a\u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ef\u4ee5\u9009\u62e9\u591a\u5c11\u6b21\u3002</p> <p>\u7ed9\u5b9a n \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i\u3001\u4e00\u4e2a\u4ef7\u503c v_i \u548c\u4e00\u4e2a\u6570\u91cf\u9650\u5236 c_i\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6700\u5927\u627f\u91cd W \u7684\u80cc\u5305\uff0c\u76ee\u6807\u662f\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u5f97\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 W\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u72b6\u6001\u5b9a\u4e49\uff1a \u8bbe dp[i][j] \u8868\u793a\u524d i \u4e2a\u7269\u54c1\u4e2d\uff0c\u5bb9\u91cf\u4e0d\u8d85\u8fc7 j \u7684\u80cc\u5305\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p>  dp[i][j] = \\max_{0 \\le k \\le \\min(c_i, \\lfloor j / w_i \\rfloor)} \\left( dp[i-1][j - k \\cdot w_i] + k \\cdot v_i \\right)  <p>\u8fb9\u754c\u6761\u4ef6\uff1a</p>  \\begin{aligned} dp[0][j] &amp;= 0 \\quad (0 \\leq j \\leq W) \\\\ dp[i][0] &amp;= 0 \\quad (0 \\leq i \\leq n) \\end{aligned}  \u5b9d\u7269\u7b5b\u9009 <p>\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a w \u7684\u80cc\u5305\uff0cn \u4e2a\u53ef\u9009\u7684\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i\u3001\u4e00\u4e2a\u4ef7\u503c v_i \u548c\u4e00\u4e2a\u6570\u91cf\u9650\u5236 c_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 w\uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u4f46\u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u62e9 c_i \u4ef6\u3002</p> <p>TLE</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n \\cdot w \\cdot \\max(c_i))\uff0c\u5f53 c_i \u8f83\u5927\u65f6\u6548\u7387\u8f83\u4f4e\u3002</p> \u6807\u51c6DP\u7a7a\u95f4\u4f18\u5316 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, w;\n  cin &gt;&gt; n &gt;&gt; w;\n  vector&lt;int&gt; weights(n + 1), values(n + 1), counts(n + 1);\n  for (int i = 1; i &lt;= n; ++i) { cin &gt;&gt; values[i] &gt;&gt; weights[i] &gt;&gt; counts[i]; }\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(w + 1, 0));\n  for (int i = 1; i &lt;= n; ++i) {\n    for (int j = 0; j &lt;= w; ++j) {\n      dp[i][j] = dp[i - 1][j];                                       // \u4e0d\u653e\u5165\u7b2ci\u4ef6\u7269\u54c1\n      for (int k = 1; k &lt;= counts[i] &amp;&amp; k * weights[i] &lt;= j; ++k) {  // \u653e\u5165k\u4ef6\u7b2ci\u4ef6\u7269\u54c1\n        dp[i][j] = max(dp[i][j], dp[i - 1][j - k * weights[i]] + k * values[i]);\n      }\n    }\n  }\n  cout &lt;&lt; dp[n][w] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p>\u7531\u4e8e dp[i][j] \u53ea\u4f9d\u8d56\u4e8e dp[i-1][j] \u548c dp[i-1][j - k \\cdot w_i]\uff0c\u53ef\u4ee5\u5c06\u4e8c\u7ef4\u6570\u7ec4\u4f18\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, w;\n  cin &gt;&gt; n &gt;&gt; w;\n  vector&lt;int&gt; weights(n + 1), values(n + 1), counts(n + 1);\n  for (int i = 1; i &lt;= n; ++i) { cin &gt;&gt; values[i] &gt;&gt; weights[i] &gt;&gt; counts[i]; }\n  vector&lt;int&gt; dp(w + 1, 0);\n  for (int i = 1; i &lt;= n; ++i) {\n    // \u6ce8\u610f\u8fd9\u91cc\u8981\u9006\u5e8f\u904d\u5386, \u4fdd\u8bc1 dp[j-k*weights[i]] \u662f\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\n    for (int j = w; j &gt;= weights[i]; --j) {\n      for (int k = 1; k &lt;= counts[i] &amp;&amp; k * weights[i] &lt;= j; ++k) {\n        dp[j] = max(dp[j], dp[j - k * weights[i]] + k * values[i]);\n      }\n    }\n  }\n  cout &lt;&lt; dp[w] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u4e8c\u8fdb\u5236\u4f18\u5316","title":"\u4e8c\u8fdb\u5236\u4f18\u5316","text":"<p>\u53ef\u4ee5\u5c06\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u9650\u5236 c_i \u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a 2^k \u7684\u5f62\u5f0f\uff0c\u4ece\u800c\u5c06\u591a\u91cd\u80cc\u5305\u95ee\u9898\u8f6c\u5316\u4e3a\u591a\u4e2a \\text{0-1} \u80cc\u5305\u95ee\u9898\u3002</p> <p>\u5206\u89e3\u65b9\u6cd5</p> <p>\u5982\u679c\u67d0\u79cd\u7269\u54c1\u7684\u6570\u91cf\u9650\u5236\u4e3a 13\uff0c\u53ef\u4ee5\u5c06\u5176\u5206\u89e3\u4e3a 1 + 4 + 8\uff0c\u5373\u53ef\u4ee5\u9009\u62e9 1 \u4ef6\u30014 \u4ef6\u6216 8 \u4ef6\u8be5\u7269\u54c1\u3002\u8fd9\u6837\u5c31\u5c06\u8be5\u7269\u54c1\u8f6c\u5316\u4e3a\u4e09\u79cd\u4e0d\u540c\u7684\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u62e9\u4e00\u6b21\u3002</p> \u5b9d\u7269\u7b5b\u9009 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, w;\n  cin &gt;&gt; n &gt;&gt; w;\n  vector&lt;int&gt; weights(n + 1), values(n + 1), counts(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; values[i] &gt;&gt; weights[i] &gt;&gt; counts[i]; }\n  vector&lt;int&gt; dp(w + 1, 0);\n  for (int i = 0; i &lt; weights.size(); ++i) {\n    int count = counts[i];\n    for (int k = 1; count &gt; 0; k &lt;&lt;= 1) {  // \u5c06count\u62c6\u5206\u4e3a\u82e5\u5e72\u4e2a2\u7684\u5e42\u6b21\u65b9\u4e4b\u548c\n      int use     = min(k, count);         // \u4e0d\u8db32\u7684\u5e42\u6b21\u65b9\u5219\u5168\u90e8\u4f7f\u7528, \u5219\u5355\u72ec\u4f5c\u4e3a\u4e00\u7ec4\n      count      -= use;\n      int weight  = use * weights[i];\n      int value   = use * values[i];\n      for (int j = w; j &gt;= weight; --j) { dp[j] = max(dp[j], dp[j - weight] + value); }\n    }\n  }\n  cout &lt;&lt; dp[w] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u5355\u8c03\u961f\u5217\u4f18\u5316","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316","text":"<p>\u5bf9\u4e8e\u6bcf\u79cd\u7269\u54c1\uff0c\u53ef\u4ee5\u5c06\u5176\u5bf9\u5bb9\u91cf\u7684\u8d21\u732e\u5206\u4e3a\u82e5\u5e72\u4e2a\u6a21 w_i \u7684\u5b50\u95ee\u9898\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316\u3002</p> <p>\u5bf9\u4e8e\u56fa\u5b9a\u7269\u54c1 i\uff0c\u8003\u8651\u5bb9\u91cf j \u4e0e\u7269\u54c1\u6570\u91cf k \u7684\u5173\u7cfb\uff1a</p>  dp[i][j] = \\max_{0 \\le k \\le c_i,\\, k w_i \\le j} \\big( dp[i-1][j - k w_i] + k v_i \\big)  <p>j \u53ea\u80fd\u4ece j - k w_i \u8f6c\u79fb\u800c\u6765\uff0c\u5176\u4ed6\u7684 j^{'} \u4e0d\u4f1a\u5bf9\u5b83\u7684\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u6b64\u53ef\u4ee5\u5bf9 j \u8fdb\u884c \u540c\u4f59\u5206\u7c7b\uff1a</p> <ul> <li>\u5bf9 m = 0,1,\\dots,w_i-1\uff0c\u8003\u8651\u6240\u6709 j \u6ee1\u8db3 j \\equiv m \\pmod{w_i} </li> <li>\u8bbe j = m + t \\cdot w_i\uff0c\u5176\u4e2d t \\ge 0\uff0c\u8868\u793a\u53ef\u4ee5\u9009\u62e9 t \u4ef6\u7269\u54c1 i </li> </ul> <p>\u4ee3\u5165\u516c\u5f0f\uff1a</p>  dp[i][m + t w_i] = \\max_{0 \\le k \\le \\min(c_i, t)} \\big( dp[i-1][m + (t-k) w_i] + k v_i \\big)  <p>\u6ce8\u610f\u5230\u4e0a\u5f0f\u662f\u5bf9\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u8fdb\u884c\u6c42\u89e3\uff0c\u8003\u8651\u5c06\u5176\u8f6c\u5316\u4e3a\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\u95ee\u9898\u3002</p> <p>\u4e0a\u5f0f\u4e2d\u7684\u8ba1\u7b97\u4f9d\u8d56\u4e8e k\uff0c\u800c\u5f53 t \u53d8\u5316\u65f6\uff0ck \u7684\u53d6\u503c\u8303\u56f4\u4e5f\u968f\u4e4b\u53d8\u5316\uff0c\u5bfc\u81f4\u7a97\u53e3\u4e2d\u6bcf\u4e2a\u5019\u9009\u9879\u7684\u8d21\u732e\u503c\u90fd\u4f1a\u52a8\u6001\u6539\u53d8\uff0c\u65e0\u6cd5\u76f4\u63a5\u7528\u6ed1\u52a8\u7a97\u53e3\u7ef4\u62a4\u3002\u56e0\u6b64\u9700\u8981\u5c06\u539f\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e0d\u663e\u5f0f\u4f9d\u8d56 k \u7684\u5f62\u5f0f\u3002</p> <p>\u8bbe\uff1a</p>  g(t-k) = dp[i-1][m + (t-k) w_i] - (t-k)v_i  <p>\u5219\uff1a</p>  dp[i][m + t w_i] = \\max_{0 \\le k \\le \\min(c_i, t)} \\big( g(t-k) + t v_i \\big) = \\max_{0 \\le k \\le \\min(c_i, t)} \\big( g(t-k) \\big) + t v_i   <ul> <li>\u5728\u5f52\u4e00\u5316\u540e\uff0ck \u53ea\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u4e0d\u518d\u5f71\u54cd\u5019\u9009\u9879\u7684\u503c  </li> <li>\u6ce8\u610f\u5230 t v_i \u5bf9\u6240\u6709 k \u76f8\u540c\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u6c42 g(t-k) \u7684\u6ed1\u52a8\u6700\u5927\u503c  </li> </ul> <p>\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u540c\u4f59\u7c7b m\uff0c\u95ee\u9898\u53d8\u6210\u4e00\u4e2a \u957f\u5ea6\u4e3a c_i+1 \u7684\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c \u95ee\u9898\u3002</p> <p>\u5355\u8c03\u961f\u5217\u5b9e\u73b0</p> <ol> <li>\u904d\u5386\u540c\u4f59\u7c7b m </li> <li>\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u5b58\u50a8 (t, g(t))\uff0c\u961f\u5217\u4fdd\u8bc1 g(t) \u5355\u8c03\u9012\u51cf  </li> <li>\u5bf9\u6bcf\u4e2a t\uff1a<ul> <li>\u5f39\u51fa\u961f\u5217\u4e2d\u7a97\u53e3\u5de6\u7aef\u8fc7\u671f\u7684\u5143\u7d20\uff08\u4fdd\u8bc1\u4e0d\u8d85\u8fc7 c_i \u4e2a\u7269\u54c1\uff09  </li> <li>\u961f\u9996 front \u5bf9\u5e94\u7684 g(front) \u5373\u4e3a\u6700\u5927\u503c  </li> <li>\u66f4\u65b0 dp[i][m + t w_i] = g(front) + t v_i </li> </ul> </li> </ol> \u5b9d\u7269\u7b5b\u9009 <p>\u5355\u8c03\u961f\u5217\u4f18\u5316</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n W)\u3002</p> <p></p>C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, W;\n  cin &gt;&gt; n &gt;&gt; W;\n  vector&lt;int&gt; weights(n + 1), values(n + 1), counts(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; values[i] &gt;&gt; weights[i] &gt;&gt; counts[i]; }\n  vector&lt;int&gt; dp(W + 1, 0);\n  for (int i = 1; i &lt;= n; i++) {\n    int w = weights[i], v = values[i], c = counts[i];\n    for (int m = 0; m &lt; w; m++) {  // \u6309\u4f59\u6570\u5206\u7c7b\n      deque&lt;pair&lt;int, int&gt;&gt; dq;    // {t, g(t)} (1)\n      for (int t = 0; m + t * w &lt;= W; t++) {\n        int j = m + t * w;\n        // \u961f\u5217\u5934\u5143\u7d20\u8fc7\u671f\n        while (!dq.empty() &amp;&amp; t - dq.front().first &gt; c) { dq.pop_front(); }\n        int g = dp[j] - t * v;\n        // \u5355\u8c03\u961f\u5217\u7ef4\u62a4\u6700\u5927\u503c, \u6839\u636e\u6307\u6807 g(t) = dp[i-1][j] - t*v \u8fdb\u884c\u7ef4\u62a4\n        while (!dq.empty() &amp;&amp; dq.back().second &lt;= g) { dq.pop_back(); }\n        dq.emplace_back(t, g);\n        dp[j] = dq.front().second + t * v;\n      }\n    }\n  }\n\n  cout &lt;&lt; dp[W] &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u6b64\u5904\u5b58\u50a8 (t, g(t))\uff0c\u65b9\u4fbf\u5224\u65ad\u961f\u9996\u5143\u7d20\u662f\u5426\u8fc7\u671f\uff0c\u4ee5\u53ca\u8fdb\u884c\u5907\u4efd\u3002\u56e0\u4e3a dp \u6570\u7ec4\u4f1a\u88ab\u8986\u76d6\uff0c\u5f53\u904d\u5386\u5230 t \u65f6\uff0c\u9700\u8981\u6839\u636e\u4e4b\u524d\u7684 dp \u503c\u8ba1\u7b97 g(t)\uff0c\u4f46 dp \u6570\u7ec4\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u4e86\u3002 \u4f7f\u7528\u961f\u5217\u5b58\u50a8 g(t) \u76f8\u5bf9\u4e8e\u59cb\u7ec8\u5b58\u50a8\u4e86 i-1 \u884c\u7684 dp \u6570\u7ec4\uff0c\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7c7b\u4f3c \\text{0-1} \u80cc\u5305\u90a3\u6837\uff0c\u4ece\u540e\u5411\u524d\u904d\u5386 j\u3002</li> </ol>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Knapsack/#\u80cc\u5305\u7684\u7b2c-k-\u4e2a\u89e3","title":"\u80cc\u5305\u7684\u7b2c k \u4e2a\u89e3","text":"<p>\u6709 n \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a W \u7684\u80cc\u5305\uff0c\u6bcf\u4ef6\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 W\uff0c\u5e76\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5728\u6240\u6709\u6700\u4f18\u65b9\u6848\u4e2d\uff0c\u7b2c k \u5927\u7684\u65b9\u6848\u3002</p> <p>\u666e\u901a\u7684 \\text{0-1} \u80cc\u5305\u95ee\u9898\uff0c\u6c42\u89e3\u7684\u662f\u4ef7\u503c\u7b2c 1 \u5927\u7684\u89e3\u3002\u5728\u72b6\u6001\u4e2d\u589e\u52a0\u4e00\u7ef4\uff0cdp[i][j][k] \u8868\u793a\u524d i \u4e2a\u7269\u54c1\uff0c\u4f53\u79ef\u4e3a j \u65f6\u7684\u4ef7\u503c\u7b2c k \u5927\u7684\u89e3\u3002</p> <p>\u5728\u72b6\u6001\u8f6c\u79fb\u65f6\uff0c\u666e\u901a\u80cc\u5305\u95ee\u9898\u7684 dp(i,j) \u7531 dp(i-1,j) \u548c dp(i-1,j-weight[i]) \u8f6c\u79fb\u800c\u6765\u3002\u56e0\u6b64\u6c42\u89e3\u7b2c k \u5927\u7684\u89e3\u65f6\uff0c\u9700\u8981\u5408\u5e76 dp(i-1,j) \u548c dp(i-1,j-weight[i]) \u89e3\uff0c\u4fdd\u7559\u524d k \u5927\u7684\u89e3\u3002</p> \u591a\u4eba\u80cc\u5305 <p>\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a v \u7684\u80cc\u5305\uff0cn \u4e2a\u53ef\u9009\u7684\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c val_i\u3002\u73b0\u5728\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u8981\u6c42\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 v\u3002\u5728\u6240\u6709\u6700\u4f18\u65b9\u6848\u4e2d\uff0c\u8ba1\u7b97\u524d k \u5927\u7684\u65b9\u6848\u7684\u603b\u4ef7\u503c\u3002</p> \u6807\u51c6DP\u7a7a\u95f4\u4f18\u5316 <p>MLE</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int k, v, n;\n  cin &gt;&gt; k &gt;&gt; v &gt;&gt; n;\n  vector&lt;int&gt; weights(n + 1);\n  vector&lt;int&gt; values(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n\n  using VI   = vector&lt;int&gt;;\n  using VVI  = vector&lt;VI&gt;;\n  using VVVI = vector&lt;VVI&gt;;\n  VVVI dp    = VVVI(n + 1, VVI(v + 1, VI(k, INT32_MIN)));\n  for (int i = 0; i &lt;= n; i++) { dp[i][0][0] = 0; }\n\n  for (int i = 1; i &lt;= n; ++i) {\n    for (int j = 0; j &lt;= v; ++j) {\n      vector&lt;int&gt; not_chosen = dp[i - 1][j];  // \u4e0d\u9009\u7b2ci\u4e2a\u7269\u54c1\n      if (j &gt;= weights[i]) {                  // \u9009\u7b2ci\u4e2a\u7269\u54c1, \u9700\u8981\u52a0\u4e0a\u7269\u54c1\u7684\u4ef7\u503c\n        vector&lt;int&gt; chosen = dp[i - 1][j - weights[i]];\n        for (int l = 0; l &lt; k; l++) { chosen[l] += values[i]; }\n        not_chosen.insert(not_chosen.end(), chosen.begin(), chosen.end());\n      }\n      // \u53d6\u524d k \u5927\u7684\u89e3\n      sort(not_chosen.begin(), not_chosen.end(), greater&lt;&gt;());\n      not_chosen.resize(k);\n      dp[i][j] = not_chosen;\n    }\n  }\n\n  // \u8ba1\u7b97\u524d k \u4e2a\u6700\u4f18\u89e3\u7684\u603b\u4ef7\u503c\n  int ans = 0;\n  for (int i = 0; i &lt; k; i++) { ans += dp[n][v][i]; }\n\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p>\u8003\u8651\u5230\u89e3\u5e8f\u5217\u603b\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5408\u5e76\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k)\u3002\u540c\u65f6\uff0c\u7c7b\u4f3c \\text{0-1} \u80cc\u5305\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06\u591a\u7ef4\u6570\u7ec4\u964d\u91cd\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int k, v, n;\n  cin &gt;&gt; k &gt;&gt; v &gt;&gt; n;\n  vector&lt;int&gt; weights(n + 1);\n  vector&lt;int&gt; values(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; weights[i] &gt;&gt; values[i]; }\n  vector&lt;vector&lt;int&gt;&gt; dp(v + 1, vector&lt;int&gt;(k, INT32_MIN));\n  dp[0][0] = 0;\n\n  for (int i = 1; i &lt;= n; i++) {\n    for (int j = v; j &gt;= weights[i]; j--) {\n      vector&lt;int&gt; now(k, 0);           // \u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u7684\u89e3\n      int not_choose = 0, choose = 0;  // \u6307\u5411\u4e24\u4e2a\u8f6c\u79fb\u72b6\u6001\u7684\u7b2ck\u5927\u7684\u89e3\n      for (int l = 0; l &lt; k; ++l) {\n        if (dp[j][not_choose] &gt; dp[j - weights[i]][choose] + values[i]) {  // \u5408\u5e76\u6392\u5e8f\n          now[l] = dp[j][not_choose];\n          not_choose++;\n        } else {\n          now[l] = dp[j - weights[i]][choose] + values[i];\n          choose++;\n        }\n      }\n      dp[j] = now;\n    }\n  }\n\n  // \u8ba1\u7b97\u524d k \u4e2a\u6700\u4f18\u89e3\u7684\u603b\u4ef7\u503c\n  int ans = 0;\n  for (int i = 0; i &lt; k; i++) { ans += dp[v][i]; }\n\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u80cc\u5305\u578b\u52a8\u6001\u89c4\u5212","Knapsack"]},{"location":"code/algorithm/DP/Sequence/","title":"\u5e8f\u5217 DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","Max Sequence Sum","Longest Increasing Subsequence","LIS"]},{"location":"code/algorithm/DP/Sequence/#\u5e8f\u5217\u578b\u52a8\u6001\u89c4\u5212","title":"\u5e8f\u5217\u578b\u52a8\u6001\u89c4\u5212","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","Max Sequence Sum","Longest Increasing Subsequence","LIS"]},{"location":"code/algorithm/DP/Sequence/#\u6700\u5927\u5b50\u6570\u7ec4\u548c","title":"\u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u6700\u5927\u5b50\u6570\u7ec4\u548c\u76ee\u6807\u662f\u5728\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\uff08\u975e\u7a7a\uff09\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u4f7f\u5f97\u8be5\u5b50\u6570\u7ec4\u7684\u548c\u6700\u5927\u3002</p> \u6700\u5927\u5b50\u6570\u7ec4\u548c \u6807\u51c6\u4f18\u5316 C++<pre><code>class Solution {\n public:\n  int maxSubArray(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    vector&lt;int&gt; dp(n);  // dp[i]\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\n    dp[0]   = nums[0];\n    int ans = dp[0];\n    for (int i = 1; i &lt; n; ++i) {\n      dp[i] = max(nums[i], dp[i - 1] + nums[i]);\n      ans   = max(ans, dp[i]);\n    }\n    return ans;\n  }\n};\n</code></pre> C++<pre><code>class Solution {\n public:\n  int maxSubArray(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    int dp = nums[0];  // dp\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\n    int ans = dp;\n    for (int i = 1; i &lt; n; ++i) {\n      dp  = max(nums[i], dp + nums[i]);\n      ans = max(ans, dp);\n    }\n    return ans;\n  }\n};\n</code></pre> \u8f93\u51fa\u6240\u6709\u6700\u5927\u5b50\u6570\u7ec4\u4f4d\u7f6e C++<pre><code>vector&lt;pair&lt;int, int&gt;&gt; maxSubArray(vector&lt;int&gt; &amp;nums) {\n  int n   = nums.size();\n  int ans = nums[0];\n  // \u8bb0\u5f55\u6700\u5927\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\n  vector&lt;pair&lt;int, int&gt;&gt; positions;\n  positions.emplace_back(0, 0);  // \u5f53\u524d\u6700\u5927\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\n  for (int i = 1, current_max = nums[0], current_start = 0; i &lt; n; ++i) {\n    if (current_max + nums[i] &lt; nums[i]) {  // \u653e\u5f03\u4e4b\u524d\u7684\u5b50\u6570\u7ec4, \u4ecei\u5f00\u59cb\u91cd\u65b0\u8ba1\u6570\n      current_max   = nums[i];\n      current_start = i;\n    } else {\n      current_max += nums[i];\n    }\n    if (current_max &gt; ans) {  // \u66f4\u65b0\u6700\u5927\u5b50\u6570\u7ec4\u548c\n      ans = current_max;\n      // \u66f4\u65b0\u6700\u5927\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\n      positions.clear();\n      positions.emplace_back(current_start, i);\n    } else if (current_max == ans) {\n      // \u8bb0\u5f55\u5f53\u524d\u6700\u5927\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\n      positions.emplace_back(current_start, i);\n    }\n  }\n  return positions;\n}\n</code></pre> \u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c <p>\u9898\u76ee\u8981\u6c42\u5728\u4e00\u4e2a\u73af\u5f62\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\uff08\u975e\u7a7a\uff09\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u4f7f\u5f97\u8be5\u5b50\u6570\u7ec4\u7684\u548c\u6700\u5927\u3002</p> C++<pre><code>class Solution {\npublic:\n  int maxSubarraySumCircular(vector&lt;int&gt; &amp;nums) {\n    int n     = nums.size();\n    int total = 0;  // \u6570\u7ec4\u603b\u548c\n    for (int num : nums) { total += num; }\n    int max_sum = nums[0];  // \u6700\u5927\u5b50\u6570\u7ec4\u548c\n    int min_sum = nums[0];  // \u6700\u5c0f\u5b50\u6570\u7ec4\u548c\n    for (int i = 1, current_max = nums[0], current_min = nums[0]; i &lt; n; ++i) {\n      current_max = max(nums[i], current_max + nums[i]);\n      max_sum     = max(max_sum, current_max);\n      current_min = min(nums[i], current_min + nums[i]);\n      min_sum     = min(min_sum, current_min);\n    }\n    // \u5982\u679c\u6570\u7ec4\u5168\u4e3a\u8d1f\u6570, \u5219\u8fd4\u56de\u6700\u5927\u5b50\u6570\u7ec4\u548c, \u5426\u5219\u8fd4\u56de\u73af\u5f62\u6700\u5927\u5b50\u6570\u7ec4\u548c\n    return total == min_sum ? max_sum : max(max_sum, total - min_sum);\n  }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","Max Sequence Sum","Longest Increasing Subsequence","LIS"]},{"location":"code/algorithm/DP/Sequence/#\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","title":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff08\\text{Longest Increasing Subsequence}, \\text{LIS}\uff09\u662f\u6307\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\uff0c\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u8be5\u5b50\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u6309\u4e25\u683c\u9012\u589e\u7684\u987a\u5e8f\u6392\u5217\u3002\u6ce8\u610f\uff0c\u5b50\u5e8f\u5217\u4e0d\u8981\u6c42\u5728\u539f\u5e8f\u5217\u4e2d\u662f\u8fde\u7eed\u7684\u3002</p> \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \u6807\u51c6\u4f18\u5316 C++<pre><code>class Solution {\n public:\n  int lengthOfLIS(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    vector&lt;int&gt; dp(n, 1);  // dp[i]\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\n    int ans = dp[0];\n    for (int i = 1; i &lt; n; ++i) {\n      for (int j = 0; j &lt; i; ++j) {\n        if (nums[i] &gt; nums[j]) { dp[i] = max(dp[i], dp[j] + 1); }\n      }\n      ans = max(ans, dp[i]);\n    }\n    return ans;\n  }\n};\n</code></pre> C++<pre><code>class Solution {\n public:\n  int lengthOfLIS(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    // tails[i]\u8868\u793a\u957f\u5ea6\u4e3ai+1\u7684\u9012\u589e\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u5143\u7d20\u7684\u6700\u5c0f\u503c\n    vector&lt;int&gt; tails(n);  // tails\u6570\u7ec4\u662f\u9012\u589e\u7684\n    int size = 0;          // tails\u6570\u7ec4\u7684\u957f\u5ea6\n    for (int num : nums) {\n      auto it = lower_bound(tails.begin(), tails.begin() + size, num);\n      if (it == tails.begin() + size) {\n        tails[size++] = num;  // num\u6bd4tails\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5927, \u5219\u52a0\u5165tails\n      } else {\n        *it = num;  // \u66f4\u65b0tails[left], \u4fdd\u6301tails\u6570\u7ec4\u9012\u589e\n      }\n    }\n    return size;\n  }\n};\n</code></pre> \u6700\u957f\u975e\u9012\u51cf\u5b50\u5e8f\u5217 C++<pre><code>int lengthOfLNDS(vector&lt;int&gt; &amp;nums) {\n  int n = nums.size();\n  // tails[i]\u8868\u793a\u957f\u5ea6\u4e3ai+1\u7684\u975e\u9012\u51cf\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u5143\u7d20\u7684\u6700\u5c0f\u503c\n  vector&lt;int&gt; tails(n);  // tails\u6570\u7ec4\u662f\u975e\u9012\u51cf\u7684\n  int size = 0;          // tails\u6570\u7ec4\u7684\u957f\u5ea6\n  for (int num : nums) {\n    auto it = upper_bound(tails.begin(), tails.begin() + size, num);\n    if (it == tails.begin() + size) {\n      tails[size++] = num;  // num\u6bd4tails\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5927, \u5219\u52a0\u5165tails\n    } else {\n      *it = num;  // \u66f4\u65b0tails[left], \u4fdd\u6301tails\u6570\u7ec4\u975e\u9012\u51cf\n    }\n  }\n  return size;\n}\n</code></pre> \u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 C++<pre><code>vector&lt;int&gt; getLIS(vector&lt;int&gt; &amp;nums) {\n  int n = nums.size();\n  vector&lt;int&gt; tails(n);             // tails[i]\u8868\u793a\u957f\u5ea6\u4e3ai+1\u7684\u9012\u589e\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u5143\u7d20\u7684\u6700\u5c0f\u503c\n  vector&lt;int&gt; indices(n, -1);       // indices[i]\u8868\u793a\u957f\u5ea6\u4e3ai+1\u7684\u9012\u589e\u5b50\u5e8f\u5217\u7684\u672b\u5c3e\u5143\u7d20\u5728nums\u4e2d\u7684\u7d22\u5f15\n  vector&lt;int&gt; predecessors(n, -1);  // predecessors[i]\u8868\u793anums[i]\u7684\u524d\u9a71\u5143\u7d20\u5728nums\u4e2d\u7684\u7d22\u5f15\n  int size = 0;                     // tails\u6570\u7ec4\u7684\u957f\u5ea6\n  for (int i = 0; i &lt; n; ++i) {\n    int num         = nums[i];\n    auto it         = lower_bound(tails.begin(), tails.begin() + size, num);\n    int index       = it - tails.begin();\n    tails[index]    = num;                                  // \u66f4\u65b0tails\u6570\u7ec4\n    indices[index]  = i;                                    // \u66f4\u65b0indices\u6570\u7ec4\n    predecessors[i] = index &gt; 0 ? indices[index - 1] : -1;  // \u66f4\u65b0predecessors\u6570\u7ec4\n    if (index == size) { size++; }\n  }\n  // \u901a\u8fc7predecessors\u6570\u7ec4\u56de\u6eaf\u5f97\u5230\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\n  vector&lt;int&gt; lis(size);\n  for (int i = indices[size - 1], j = size - 1; i &gt;= 0; i = predecessors[i], --j) {\n    lis[j] = nums[i];\n  }\n  return size;  // \u8fd4\u56de\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6, lis\u6570\u7ec4\u5373\u4e3a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u672c\u8eab\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","Max Sequence Sum","Longest Increasing Subsequence","LIS"]},{"location":"code/algorithm/DP/StateCompression/","title":"\u72b6\u6001\u538b\u7f29 DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","State Compression DP"]},{"location":"code/algorithm/DP/StateCompression/#\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","title":"\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","text":"<p>\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212\uff08\\text{State Compression DP}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u6d89\u53ca\u591a\u4e2a\u72b6\u6001\u7ec4\u5408\u7684\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u6280\u672f\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u4f7f\u7528\u4f4d\u63a9\u7801\uff08\\text{bitmask}\uff09\u6765\u8868\u793a\u72b6\u6001\uff0c\u4ece\u800c\u6709\u6548\u5730\u51cf\u5c11\u72b6\u6001\u7a7a\u95f4\u7684\u5927\u5c0f\u3002</p>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","State Compression DP"]},{"location":"code/algorithm/DP/StateCompression/#\u4e8c\u5143\u72b6\u6001","title":"\u4e8c\u5143\u72b6\u6001","text":"<p>\u5728\u8bb8\u591a\u95ee\u9898\u4e2d\uff0c\u72b6\u6001\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u6709 n \u4e2a\u5143\u7d20\u7684\u96c6\u5408\u4e2d\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u5904\u4e8e\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff08\u9009\u4e2d\u6216\u672a\u9009\u4e2d\uff09\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u8fd9\u4e9b\u72b6\u6001\uff0c\u5176\u4e2d\u7b2c i \u4f4d\u4e3a 1 \u8868\u793a\u7b2c i \u4e2a\u5143\u7d20\u88ab\u9009\u4e2d\uff0c\u4e3a 0 \u8868\u793a\u672a\u9009\u4e2d\u3002</p> <p>\u5e38\u89c1\u95ee\u9898\u7c7b\u578b</p> <ul> <li>\u96c6\u5408\u5212\u5206\u3001\u5b50\u96c6 \\text{DP}</li> <li>\u65c5\u884c\u5546\u95ee\u9898\uff08\\text{TSP}\uff09</li> <li>\u6392\u5217\u8ba1\u6570 </li> <li>\\text{Hamilton} \u8def\u5f84</li> <li>\u5339\u914d\u3001\u8986\u76d6\u3001\u5206\u914d\u7c7b\u95ee\u9898</li> </ul> <p>dp[mask][i] \u8868\u793a\u5f53\u524d\u8bbf\u95ee\u7684\u96c6\u5408\u4e3a mask\uff0c\u5e76\u4e14\u6700\u540e\u505c\u5728\u8282\u70b9 i \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  dp[mask \\mid (1 \\ll j)][j] = \\min \\big( dp[mask \\mid (1 \\ll j)][j],\\ dp[mask][i] + cost[i][j] \\big)  <p>\u5176\u4e2d\uff1a</p> <ul> <li>mask \u8868\u793a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u96c6\u5408\uff08\u4e8c\u8fdb\u5236\u63a9\u7801\uff09</li> <li>i, j \u4e3a\u8282\u70b9\u7f16\u53f7\uff0c\u4e14 j \\notin mask</li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2 \\cdot 2^n)\uff0c\u9002\u7528\u4e8e n \\leq 20 \u7684\u60c5\u51b5\u3002</p> \u5212\u5206\u4e3ak\u4e2a\u76f8\u7b49\u7684\u5b50\u96c6 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8be5\u6570\u7ec4\u5206\u6210 k \u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u5176\u603b\u548c\u90fd\u76f8\u7b49\u3002</p> \u8bb0\u5fc6\u5316\u641c\u7d22\u9012\u63a8 C++<pre><code>#include &lt;functional&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  bool canPartitionKSubsets(vector&lt;int&gt; &amp;nums, int k) {\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    if (sum % k != 0) { return false; }  // \u603b\u548c\u4e0d\u80fd\u88abk\u6574\u9664\n    int target = sum / k;\n    int n      = nums.size();\n\n    // \u72b6\u6001\u538b\u7f29dp, dp[status]\u8868\u793a\u72b6\u6001status\u662f\u5426\u53ef\u884c\n    vector&lt;int&gt; dp(1 &lt;&lt; n, -1);\n    // status: \u5f53\u524d\u9009\u62e9\u7684\u6570\u5b57\u96c6\u5408, target: \u6bcf\u4e2a\u5b50\u96c6\u7684\u76ee\u6807\u548c, sum: \u5f53\u524d\u5b50\u96c6\u7684\u548c,\n    // rest_k: \u5269\u4f59\u5b50\u96c6\u6570\u91cf\n    function&lt;bool(int, int, int)&gt; dfs = [&amp;](int status, int sum, int rest_k) {\n      // \u6240\u6709\u6570\u5b57\u90fd\u88ab\u9009\u62e9\u5b8c, \u4e14\u6b63\u597d\u5212\u5206\u4e3ak\u4e2a\u5b50\u96c6\n      if (rest_k == 0) { return status == 0; }\n      if (dp[status] != -1) { return dp[status] == 1; }  // \u8bb0\u5fc6\u5316\n      bool ok = false;                                   // \u5f53\u524d\u72b6\u6001\u662f\u5426\u53ef\u884c\n      // \u5c1d\u8bd5\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\u52a0\u5165\u5f53\u524d\u5b50\u96c6\n      for (int i = 0; i &lt; n; ++i) {\n        // \u6570\u5b57i\u5df2\u7ecf\u88ab\u9009\u62e9\n        if ((status &amp; (1 &lt;&lt; i)) == 0) { continue; }\n        // \u5982\u679c\u52a0\u5165\u6570\u5b57i\u540e\u8d85\u8fc7\u76ee\u6807\u548c, \u5219\u8df3\u8fc7\n        if (sum + nums[i] &gt; target) { continue; }\n        int next_status = status ^ (1 &lt;&lt; i);\n        if (sum + nums[i] == target) {  // \u5f53\u524d\u5b50\u96c6\u5df2\u6ee1, \u5f00\u59cb\u4e0b\u4e00\u4e2a\u5b50\u96c6\n          ok = dfs(next_status, 0, rest_k - 1);\n        } else {  // \u7ee7\u7eed\u586b\u5145\u5f53\u524d\u5b50\u96c6\n          ok = dfs(next_status, sum + nums[i], rest_k);\n        }\n        if (ok) { break; }  // \u627e\u5230\u4e00\u4e2a\u53ef\u884c\u89e3\u5373\u53ef\n      }\n      dp[status] = ok ? 1 : 0;\n      return ok;\n    };\n    return dfs((1 &lt;&lt; n) - 1, 0, k);\n  }\n};\n</code></pre> C++<pre><code>#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  bool canPartitionKSubsets(vector&lt;int&gt; &amp;nums, int k) {\n    int n   = nums.size();\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    if (sum % k != 0) return false;\n    int target = sum / k;\n    vector&lt;int&gt; dp(1 &lt;&lt; n, -1);\n    dp[0] = 0;  // \u521d\u59cb\u72b6\u6001\uff0c\u672a\u9009\u62e9\u4efb\u4f55\u5143\u7d20\u65f6\uff0c\u5f53\u524d\u5b50\u96c6\u548c\u4e3a 0\n\n    for (int mask = 0; mask &lt; (1 &lt;&lt; n); ++mask) {\n      if (dp[mask] == -1) { continue; }  // \u8df3\u8fc7\u4e0d\u53ef\u8fbe\u72b6\u6001\n      for (int i = 0; i &lt; n; ++i) {\n        if ((mask &amp; (1 &lt;&lt; i)) != 0) { continue; }  // \u5143\u7d20\u5df2\u88ab\u9009\u62e9\n        int next_sum = dp[mask] + nums[i];\n        if (next_sum &lt;= target) {\n          dp[mask | (1 &lt;&lt; i)] = next_sum % target;  // \u66f4\u65b0\u72b6\u6001\n        }\n      }\n    }\n    return dp[(1 &lt;&lt; n) - 1] == 0;  // \u68c0\u67e5\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u88ab\u9009\u62e9\u4e14\u5b50\u96c6\u548c\u4e3a\u76ee\u6807\u503c\n  }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","State Compression DP"]},{"location":"code/algorithm/DP/StateCompression/#\u8f6e\u5ed3\u7ebf-dp","title":"\u8f6e\u5ed3\u7ebf DP","text":"<p>\u8f6e\u5ed3\u7ebf \\text{DP}\uff08\\text{Profile DP}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u4e8c\u7ef4\u7f51\u683c\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u6280\u672f\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u9010\u884c\u6216\u9010\u5217\u626b\u63cf\u68cb\u76d8\uff0c\u7528\u8f6e\u5ed3\u7ebf\u63cf\u8ff0\u5f53\u524d\u884c\uff08\u6216\u5217\uff09\u7684\u72b6\u6001\uff08\u901a\u8fc7\u4f7f\u7528\u4f4d\u63a9\u7801\u6765\u8868\u793a\u5f53\u524d\u884c\u7684\u72b6\u6001\uff09\u3002</p> <p>\u5e38\u89c1\u95ee\u9898\u7c7b\u578b</p> <ul> <li>\u68cb\u76d8\u8986\u76d6\u95ee\u9898\uff08\u591a\u7c73\u8bfa\u9aa8\u724c\u586b\u5145\uff09</li> <li>\u969c\u788d\u586b\u5145\u95ee\u9898</li> <li>\u5e26\u9650\u5236\u7684\u683c\u70b9\u8ba1\u6570\uff08\u5982\u653e\u7f6e\u68cb\u5b50\u3001\u8def\u5f84\u8ba1\u6570\u7b49\uff09</li> <li>\u56fe\u5f62\u586b\u5145\u95ee\u9898</li> </ul> <p>dp[i][state]\u8868\u793a\u5904\u7406\u5230\u7b2c i \u884c\uff08\u6216\u5217\uff09\uff0c\u5f53\u524d\u8f6e\u5ed3\u7ebf\u72b6\u6001\u4e3a state \u7684\u65b9\u6848\u6570\u3002\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  dp[i+1][state'] = \\sum_{\\text{legal transitions}} dp[i][state]  <p>\u5176\u4e2d\uff1a</p> <ul> <li>state \u901a\u5e38\u7528\u4e8c\u8fdb\u5236\u6216\u4e09\u8fdb\u5236\u8868\u793a\u5f53\u524d\u884c\u7684\u683c\u5b50\u5360\u7528\u72b6\u6001  </li> <li>\u901a\u8fc7\u679a\u4e3e\u6240\u6709\u5408\u6cd5\u653e\u7f6e\u65b9\u5f0f\u66f4\u65b0\u4e0b\u4e00\u884c\u7684 state' </li> </ul> \u4e92\u4e0d\u4fb5\u72af <p>\u5728 N * N \u7684\u68cb\u76d8\u4e0a\u653e\u7f6eK\u4e2a\u56fd\u738b, \u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u56fd\u738b\u4e0d\u5728\u76f8\u90bb\u7684\u683c\u5b50\u4e0a(\u516b\u4e2a\u65b9\u5411)\u7684\u65b9\u6848\u3002</p> \u8bb0\u5fc6\u5316\u641c\u7d22\u9012\u63a8 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int N, K;\n  cin &gt;&gt; N &gt;&gt; K;\n\n  auto dp      = vector(N, vector(N, vector(1 &lt;&lt; N, vector(2, vector&lt;int64_t&gt;(K + 1, -1)))));\n  auto get_bit = [](int state, int j) { return (state &gt;&gt; j) &amp; 1; };\n  auto set_bit = [](int state, int j, int value) {\n    return value == 0 ? (state &amp; ~(1 &lt;&lt; j)) : (state | (1 &lt;&lt; j));\n  };\n  // i: \u5f53\u524d\u884c, j: \u5f53\u524d\u5217, state: \u5f53\u524d\u884c\u72b6\u6001, left_up: \u5de6\u4e0a\u89d2\u662f\u5426\u653e\u7f6e, rest_k:\n  // \u5269\u4f59\u56fd\u738b\u6570\u91cf\n  std::function&lt;int64_t(int, int, int, int, int)&gt; dfs\n      = [&amp;](int i, int j, int state, int left_up, int rest_k) -&gt; int64_t {\n    // \u6240\u6709\u884c\u5904\u7406\u5b8c, \u4e14\u6b63\u597d\u653e\u7f6ek\u4e2a\u56fd\u738b\n    if (i == N) { return rest_k == 0; }\n    if (j == N) { return dfs(i + 1, 0, state, 0, rest_k); }  // \u6362\u884c\n    if (dp[i][j][state][left_up][rest_k] != -1) { return dp[i][j][state][left_up][rest_k]; }\n    // \u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u8fb9, \u4e0a\u8fb9, \u53f3\u4e0a\u89d2\u7684\u72b6\u6001, \u5de6\u4e0a\u89d2\u72b6\u6001\u7531\u53c2\u6570\u83b7\u5f97\n    int left     = (j == 0) ? 0 : get_bit(state, j - 1);\n    int up       = get_bit(state, j);\n    int right_up = (j == N - 1) ? 0 : get_bit(state, j + 1);\n    int64_t res  = 0;\n    // \u4ece\u4e0b\u4e00\u5217\u7ee7\u7eed, \u8bbe\u7f6e\u5f53\u524d\u4f4d\u7f6e\u4e3a0, \u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5de6\u4e0a\u89d2\u72b6\u6001\u4e3a\u5f53\u524d\u4f4d\u7f6e\u7684\u4e0a\u65b9\u72b6\u6001\n    // \u4e0d\u653e\u7f6e\u56fd\u738b\n    res += dfs(i, j + 1, set_bit(state, j, 0), up, rest_k);\n    // \u653e\u7f6e\u56fd\u738b, \u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u8fb9, \u5de6\u4e0a\u89d2, \u4e0a\u8fb9, \u53f3\u4e0a\u89d2\u90fd\u4e0d\u80fd\u6709\u56fd\u738b,\n    // \u4e14\u5269\u4f59\u56fd\u738b\u6570\u91cf\u8981\u5927\u4e8e0\n    if (rest_k &gt; 0 &amp;&amp; left == 0 &amp;&amp; left_up == 0 &amp;&amp; up == 0 &amp;&amp; right_up == 0) {\n      res += dfs(i, j + 1, set_bit(state, j, 1), up, rest_k - 1);\n    }\n    dp[i][j][state][left_up][rest_k] = res;  // \u8bb0\u5fc6\u5316\n    return res;\n  };\n  cout &lt;&lt; dfs(0, 0, 0, 0, K) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int N, K;\n  cin &gt;&gt; N &gt;&gt; K;\n\n  auto get_bit = [](int state, int j) { return (state &gt;&gt; j) &amp; 1; };\n  auto set_bit = [](int state, int j, int value) {\n    return value == 0 ? (state &amp; ~(1 &lt;&lt; j)) : (state | (1 &lt;&lt; j));\n  };\n  auto dp = vector(N + 1, vector(1 &lt;&lt; N, vector(2, vector&lt;int64_t&gt;(K + 1))));\n  for (int s = 0; s &lt; (1 &lt;&lt; N); ++s) {\n    for (int k = 0; k &lt;= K; k++) { dp[0][s][0][k] = k == 0 ? 1 : 0; }\n  }\n  for (int i = N - 1; i &gt;= 0; --i) {\n    // j == N\n    for (int s = 0; s &lt; (1 &lt;&lt; N); ++s) {\n      for (int k = 0; k &lt;= K; k++) { dp[N][s][0][k] = dp[N][s][1][k] = dp[0][s][0][k]; }\n    }\n    // j &lt; N\n    for (int j = N - 1; j &gt;= 0; --j) {\n      for (int s = 0; s &lt; (1 &lt;&lt; N); ++s) {\n        for (int left_up = 0; left_up &lt;= 1; ++left_up) {\n          for (int k = 0; k &lt;= K; k++) {\n            // \u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u8fb9, \u4e0a\u8fb9, \u53f3\u4e0a\u89d2\u7684\u72b6\u6001, \u5de6\u4e0a\u89d2\u72b6\u6001\u7531\u53c2\u6570\u83b7\u5f97\n            int left     = (j == 0) ? 0 : get_bit(s, j - 1);\n            int up       = get_bit(s, j);\n            int right_up = (j == N - 1) ? 0 : get_bit(s, j + 1);\n            int64_t res  = 0;\n            // \u4ece\u4e0b\u4e00\u5217\u7ee7\u7eed, \u8bbe\u7f6e\u5f53\u524d\u4f4d\u7f6e\u4e3a0,\n            // \u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5de6\u4e0a\u89d2\u72b6\u6001\u4e3a\u5f53\u524d\u4f4d\u7f6e\u7684\u4e0a\u65b9\u72b6\u6001 \u4e0d\u653e\u7f6e\u56fd\u738b\n            res += dp[j + 1][set_bit(s, j, 0)][up][k];\n            // \u653e\u7f6e\u56fd\u738b, \u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u8fb9, \u5de6\u4e0a\u89d2, \u4e0a\u8fb9, \u53f3\u4e0a\u89d2\u90fd\u4e0d\u80fd\u6709\u56fd\u738b,\n            // \u4e14\u5269\u4f59\u56fd\u738b\u6570\u91cf\u8981\u5927\u4e8e0\n            if (k &gt; 0 &amp;&amp; left == 0 &amp;&amp; left_up == 0 &amp;&amp; up == 0 &amp;&amp; right_up == 0) {\n              res += dp[j + 1][set_bit(s, j, 1)][up][k - 1];\n            }\n            dp[j][s][left_up][k] = res;\n          }\n        }\n      }\n    }\n  }\n  cout &lt;&lt; dp[0][0][0][K] &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","State Compression DP"]},{"location":"code/algorithm/DP/StateCompression/#\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29","title":"\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29","text":"<p>\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29\uff08\\text{Ternary State Compression}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u6d89\u53ca\u4e09\u79cd\u72b6\u6001\u7ec4\u5408\uff08\u4f8b\u5982\uff1a\u672a\u9009\u3001\u9009 A\u3001\u9009 B\uff09\u7684\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u6280\u672f\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u4f7f\u7528\u4e09\u8fdb\u5236\u6570\u6765\u8868\u793a\u72b6\u6001\uff0c\u4ece\u800c\u6709\u6548\u5730\u51cf\u5c11\u72b6\u6001\u7a7a\u95f4\u7684\u5927\u5c0f\u3002</p> <p>\u72b6\u6001\u591a\u4e8e\u4e8c\u5143\u7684\u60c5\u51b5, \u53ef\u4ee5\u7528\u66f4\u9ad8\u8fdb\u5236\u7684\u6570\u8868\u793a\u3002\u4e09\u8fdb\u5236\u72b6\u6001\u8868\u793a\u5982\u4e0b\uff1a</p> <p>m \u5217\u7684\u72b6\u6001\u53ef\u7528\u4e00\u4e2a\u6574\u6570 s \u8868\u793a\uff0cs \u7684\u4e09\u8fdb\u5236\u5c55\u5f00\u7684\u6bcf\u4e00\u4f4d\u4ee3\u8868\u4e00\u5217\u7684\u72b6\u6001\uff080\u30011\u30012\uff09</p> <p>\u72b6\u6001 s = s[0] * 3^0 + s[1] * 3^1 + \\dots + s[m-1] * 3^{(m-1)}</p> <ul> <li>get(s, j)\uff1a\u53d6 s \u7684\u4e09\u8fdb\u5236\u5c55\u5f00\u7684\u7b2c j \u4f4d\uff08\u7b2c j \u5217\u7684\u72b6\u6001\uff09\uff0c\u5373\uff1a(s // 3^j) \\% 3</li> <li>set(s, j, v)\uff1a\u628a s \u7684\u4e09\u8fdb\u5236\u5c55\u5f00\u7684\u7b2c j \u4f4d\u8bbe\u4e3a v\uff0c\u8fd4\u56de\u65b0\u72b6\u6001\uff0c\u5373 s + (v - get(s, j)) * 3^j</li> </ul> <p>\u5e38\u89c1\u95ee\u9898\u7c7b\u578b</p> <ul> <li>\u8f6e\u5ed3\u7ebf DP \u4f18\u5316\u7248\uff08\u5f53\u6bcf\u4e2a\u683c\u70b9\u4e09\u79cd\u72b6\u6001\u65f6\uff09</li> <li>\u6d82\u8272\u95ee\u9898\uff08\u4e09\u79cd\u989c\u8272\uff09</li> <li>\u5339\u914d / \u653e\u7f6e\u5e26\u65b9\u5411\u9650\u5236\u7684\u95ee\u9898</li> </ul> <p>\u9884\u5904\u7406</p> <ul> <li>\u9884\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u548c\u72b6\u6001\u8f6c\u79fb\uff0c\u51cf\u5c11\u8fd0\u884c\u65f6\u8ba1\u7b97</li> <li>\u4f7f\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u72b6\u6001\u8868\u793a\u548c\u8f6c\u6362</li> </ul> \u7528\u4e09\u79cd\u4e0d\u540c\u989c\u8272\u4e3a\u7f51\u683c\u6d82\u8272 <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 m \u548c n\uff0c\u8868\u793a\u4e00\u4e2a m \u884c n \u5217\u7684\u7f51\u683c\u3002\u8bf7\u4f60\u7ed9\u8fd9\u4e2a\u7f51\u683c\u7684\u6bcf\u4e2a\u683c\u5b50\u6d82\u8272\uff0c\u4e14\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li>\u6bcf\u4e2a\u683c\u5b50\u53ea\u80fd\u6d82\u6210 1\u30012 \u6216 3 \u4e09\u79cd\u989c\u8272\u4e4b\u4e00\u3002</li> <li>\u76f8\u90bb\u683c\u5b50\uff08\u4e0a\u4e0b\u6216\u8005\u5de6\u53f3\uff09\u989c\u8272\u4e0d\u80fd\u76f8\u540c\u3002</li> </ul> <p>\u8fd4\u56de\u4f60\u7ed9\u7f51\u683c\u6d82\u8272\u7684\u65b9\u6848\u6570\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u4f60\u8fd4\u56de\u65b9\u6848\u6570\u5bf9 10^9 + 7 \u53d6\u4f59\u7684\u7ed3\u679c\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int colorTheGrid(int m, int n) {\n    const int mod  = 1e9 + 7;\n\n    auto get_state = [](int64_t s, int64_t pow_j) { return (s / pow_j) % 3; };\n    auto set_state = [](int64_t s, int64_t pow_j, int v) {\n      int64_t old = (s / pow_j) % 3;\n      return s + (v - old) * pow_j;\n    };\n\n    if (m &gt; n) { swap(m, n); }  // \u4fdd\u8bc1 m &lt;= n\n    int64_t max_state = pow(3, m);\n    // \u83b7\u53d6\u4e00\u884c\u6709\u6548\u72b6\u6001\n    vector&lt;int&gt; initial_states;\n    std::function&lt;void(int, int, int)&gt; dfs_init = [&amp;](int j, int s, int pow_j) {\n      if (j == m) {\n        initial_states.push_back(s);\n        return;\n      }\n      // \u83b7\u53d6\u5de6\u8fb9\u7684\u72b6\u6001, pow_j / 3 \u5c31\u662f 3^(j-1)\n      int left = (j == 0) ? -1 : get_state(s, pow_j / 3);\n      for (int v = 0; v &lt; 3; ++v) {\n        if (v != left) { dfs_init(j + 1, set_state(s, pow_j, v), pow_j * 3); }\n      }\n    };\n    dfs_init(0, 0, 1);\n    // \u5206\u522b\u5bf9\u5e94\u884c\u3001\u5217\u3001\u72b6\u6001\u7a7a\u95f4\n    auto dp = vector(n, vector(m, vector&lt;int64_t&gt;(pow(3, m), -1)));\n    function&lt;int64_t(int, int, int64_t, int64_t)&gt; dfs\n        = [&amp;](int i, int j, int64_t s, int64_t pow_j) -&gt; int64_t {\n      // \u6240\u6709\u884c\u5904\u7406\u5b8c\n      if (i == n) { return 1; }\n      if (j == m) { return dfs(i + 1, 0, s, 1); }  // \u6362\u884c\n      if (dp[i][j][s] != -1) { return dp[i][j][s]; }\n      int64_t res = 0;\n      // \u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u8fb9\u548c\u4e0a\u8fb9\u7684\u72b6\u6001\n      int left = (j == 0) ? -1 : get_state(s, pow_j / 3);\n      int up   = get_state(s, pow_j);\n      for (int v = 0; v &lt; 3; ++v) {\n        if (v != left &amp;&amp; v != up) {  // \u4e0e\u5de6\u8fb9\u548c\u4e0a\u8fb9\u4e0d\u540c\u8272\n          res = (res + dfs(i, j + 1, set_state(s, pow_j, v), pow_j * 3)) % mod;\n        }\n      }\n      dp[i][j][s] = res;\n      return res;\n    };\n    int64_t ans = 0;\n    for (int s : initial_states) { ans = (ans + dfs(1, 0, s, 1)) % mod; }\n    return ans;\n  }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212","State Compression DP"]},{"location":"code/algorithm/DP/Tree/","title":"\u6811\u5f62 DP","text":"","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6811\u5f62\u52a8\u6001\u89c4\u5212","title":"\u6811\u5f62\u52a8\u6001\u89c4\u5212","text":"<p>\u6811\u5f62\u52a8\u6001\u89c4\u5212\uff08\\text{Tree DP}\uff09\u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e0e\u6811\u7ed3\u6784\u76f8\u5173\u7684\u95ee\u9898\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u6811\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u5b50\u6811\uff0c\u901a\u8fc7\u9012\u63a8\u5173\u7cfb\u6765\u6c42\u89e3\u6574\u4e2a\u6811\u7684\u95ee\u9898\u3002</p> <p>\u4e00\u822c\u6811\u5f62 \\text{DP} \u6839\u636e\u5b50\u8282\u70b9\u7684\u72b6\u6001\u6765\u66f4\u65b0\u7236\u8282\u70b9\u7684\u72b6\u6001\uff0c\u6216\u8005\u6839\u636e\u7236\u8282\u70b9\u7684\u72b6\u6001\u6765\u66f4\u65b0\u5b50\u8282\u70b9\u7684\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u51e0\u79cd\u72b6\u6001\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e9b\u72b6\u6001\u8fdb\u884c\u9012\u5f52\u8ba1\u7b97\u3002</p> <p>\u6811\u578b \\text{DP} \u7684\u57fa\u672c\u601d\u8def\uff1a</p> <ol> <li>\u5206\u6790\u7236\u6811\u5f97\u5230\u7b54\u6848\u9700\u8981\u5b50\u6811\u7684\u54ea\u4e9b\u4fe1\u606f</li> <li>\u628a\u5b50\u6811\u4fe1\u606f\u7684\u5168\u96c6\u5b9a\u4e49\u6210\u9012\u5f52\u8fd4\u56de\u503c</li> <li>\u901a\u8fc7\u9012\u5f52\u8ba9\u5b50\u6811\u8fd4\u56de\u5168\u96c6\u4fe1\u606f</li> <li>\u6574\u5408\u5b50\u6811\u7684\u5168\u96c6\u4fe1\u606f\u5f97\u5230\u7236\u6811\u7684\u5168\u96c6\u4fe1\u606f\u5e76\u8fd4\u56de</li> </ol>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6574\u5408\u5b50\u6811\u4fe1\u606f","title":"\u6574\u5408\u5b50\u6811\u4fe1\u606f","text":"<p>\u6574\u5408\u5b50\u6811\u4fe1\u606f\u662f\u6811\u5f62\u52a8\u6001\u89c4\u5212\u7684\u5173\u952e\u6b65\u9aa4\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u8282\u70b9 u\uff0c\u5b83\u6709\u82e5\u5e72\u4e2a\u5b50\u8282\u70b9 v_1, v_2, \\ldots, v_k\u3002\u6bcf\u4e2a\u5b50\u8282\u70b9 v_i \u90fd\u6709\u4e00\u4e2a\u72b6\u6001\u503c dp[v_i]\uff0c\u8868\u793a\u4ece\u5b50\u8282\u70b9 v_i \u51fa\u53d1\u7684\u67d0\u79cd\u6700\u4f18\u89e3\u3002</p> \u6700\u5927BST\u5b50\u6811 <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u5176\u4e2d\u6700\u5927\u7684\u641c\u7d22\u4e8c\u53c9\u5b50\u6811\uff08\\text{BST}\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6811\u7684\u5927\u5c0f\u3002</p> <p>Leetcode Premium</p> C++<pre><code>#include &lt;functional&gt;\nusing namespace std;\n\nclass TreeNode {\n public:\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n};\n\nclass Solution {\n public:\n  int largestBSTSubtree(TreeNode *root) {\n    int max_size = 0;\n\n    // \u5b9a\u4e49\u8fd4\u56de\u503c: {\u662f\u5426\u4e3aBST, \u5b50\u6811\u5927\u5c0f, \u5b50\u6811\u6700\u5c0f\u503c, \u5b50\u6811\u6700\u5927\u503c}\n    struct Status {\n      bool is_bst;\n      int size;\n      int min;\n      int max;\n    };\n\n    function&lt;Status(TreeNode *)&gt; dfs = [&amp;](TreeNode *node) -&gt; Status {\n      // \u7a7a\u8282\u70b9\u89c6\u4e3aBST, \u5927\u5c0f\u4e3a0, \u6700\u5c0f\u503c\u4e3a+\u221e, \u6700\u5927\u503c\u4e3a-\u221e\n      if (!node) { return Status{.is_bst = true, .size = 0, .min = INT_MAX, .max = INT_MIN}; }\n      auto left  = dfs(node-&gt;left);\n      auto right = dfs(node-&gt;right);\n      Status res;\n      // \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3aBST\n      if (left.is_bst &amp;&amp; right.is_bst &amp;&amp; node-&gt;val &gt; left.max &amp;&amp; node-&gt;val &lt; right.min) {\n        res.is_bst = true;                        // \u662fBST\n        res.size   = left.size + right.size + 1;  // \u5b50\u6811\u5927\u5c0f\n        res.min    = min(left.min, node-&gt;val);    // \u5b50\u6811\u6700\u5c0f\u503c\n        res.max    = max(right.max, node-&gt;val);   // \u5b50\u6811\u6700\u5927\u503c\n        max_size   = max(max_size, res.size);     // \u66f4\u65b0\u6700\u5927BST\u5b50\u6811\u5927\u5c0f\n      } else {\n        res.is_bst = false;                       // \u4e0d\u662fBST\n        res.size   = max(left.size, right.size);  // \u6700\u5927BST\u5b50\u6811\u5927\u5c0f\n        // \u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u65e0\u610f\u4e49\n      }\n      return res;\n    };\n    dfs(root);\n    return max_size;\n  }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6700\u5c0f\u70b9\u8986\u76d6","title":"\u6700\u5c0f\u70b9\u8986\u76d6","text":"<p>\u7ed9\u5b9a\u4e00\u9897\u6709 n \u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c\u4ece\u8fd9 n \u4e2a\u70b9\u4e2d\u9009\u51fa\u5c3d\u91cf\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u4e0e\u53d6\u51fa\u6765\u7684\u70b9\u76f8\u8fde\u3002\uff08\u70b9\u8986\u76d6\u8fb9\uff09</p> <p>f_{u,0} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cu \u4e0d\u5728\u70b9\u8986\u76d6\u96c6\u4e2d\u6240\u9700\u8981\u9009\u53d6\u7684\u6700\u5c0f\u70b9\u6570\u3002\u56e0\u4e3a u \u4e0d\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u4e00\u5b9a\u8981\u53d6\u3002</p> <p>f_{u,1} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cu \u5728\u70b9\u8986\u76d6\u96c6\u4e2d\u6240\u9700\u8981\u9009\u53d6\u7684\u6700\u5c0f\u70b9\u6570\u3002\u56e0\u4e3a u \u88ab\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u53ef\u4ee5\u9009\u62e9\u88ab\u8986\u76d6\u6216\u8005\u4e0d\u88ab\u8986\u76d6\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p>  \\begin{aligned} f_{u,0} &amp; = \\sum_{v \\in \\text{children of } u} f_{v,1} \\\\ f_{u,1} &amp; = \\sum_{v \\in \\text{children of } u} \\min(f_{v,0}, f_{v,1}) + 1 \\end{aligned}  \u6218\u7565\u6e38\u620f <p>\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u9009\u62e9\u4e00\u4e9b\u8282\u70b9\uff0c\u4f7f\u5f97\u6bcf\u6761\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u88ab\u9009\u62e9\uff0c\u540c\u65f6\u4f7f\u5f97\u88ab\u9009\u62e9\u7684\u8282\u70b9\u6570\u6700\u5c11\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;int&gt;&gt; tree(n);\n  vector&lt;int&gt; is_root(n, 1);\n  vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(2));\n  for (int i = 0; i &lt; n; i++) {\n    int x, k;\n    cin &gt;&gt; x &gt;&gt; k;\n    for (int j = 0; j &lt; k; j++) {\n      int y;\n      cin &gt;&gt; y;\n      tree[x].push_back(y);\n      is_root[y] = 0;\n    }\n  }\n\n  function&lt;void(int, int)&gt; dfs = [&amp;](int u, int from) {\n    dp[u][0] = 1;\n    dp[u][1] = 0;\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      dfs(v, u);\n      dp[u][0] += dp[v][1];                 // u\u4e0d\u9009\uff0c\u6240\u4ee5\u5b50\u8282\u70b9\u5fc5\u987b\u9009\u62e9\n      dp[u][1] += min(dp[v][0], dp[v][1]);  // u\u9009, \u6240\u4ee5\u5b50\u8282\u70b9\u53ef\u9009\u53ef\u4e0d\u9009\n    }\n  };\n  int root = find(is_root.begin(), is_root.end(), 1) - is_root.begin();\n  dfs(root, -1);\n  cout &lt;&lt; min(dp[root][0], dp[root][1]) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6700\u5927\u72ec\u7acb\u96c6","title":"\u6700\u5927\u72ec\u7acb\u96c6","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u6709 n \u4e2a\u70b9\u7684\u6811\uff0c\u4ece n \u4e2a\u70b9\u4e2d\u9009\u51fa\u5c3d\u91cf\u591a\u7684\u70b9\uff0c\u4f7f\u5f97\u4e24\u4e24\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\u3002</p> <p>f_{u,0} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c u \u4e0d\u5728\u72ec\u7acb\u96c6\u4e2d\u6240\u80fd\u9009\u53d6\u7684\u6700\u5927\u70b9\u6570\u3002\u56e0\u4e3a u \u4e0d\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u53ef\u4ee5\u9009\u62e9\u88ab\u8986\u76d6\u6216\u8005\u4e0d\u88ab\u8986\u76d6\u3002</p> <p>f_{u,1} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c u \u5728\u72ec\u7acb\u96c6\u4e2d\u6240\u80fd\u9009\u53d6\u7684\u6700\u5927\u70b9\u6570\u3002\u56e0\u4e3a u \u88ab\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u4e00\u5b9a\u4e0d\u9009\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p>  \\begin{aligned} f_{u,0} &amp; = \\sum_{v \\in \\text{children of } u} \\max(f_{v,0}, f_{v,1}) \\\\ f_{u,1} &amp; = \\sum_{v \\in \\text{children of } u} f_{v,0} + 1 \\end{aligned}  \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a <p>\u6709\u4e00\u4e2a\u516c\u53f8\u5171\u6709 n \u540d\u5458\u5de5\uff0c\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u5feb\u4e50\u503c\u3002\u4e3a\u4e86\u4e3e\u529e\u4e00\u573a\u821e\u4f1a\uff0c\u516c\u53f8\u51b3\u5b9a\u9080\u8bf7\u4e00\u4e9b\u5458\u5de5\u53c2\u52a0\uff0c\u4f46\u6709\u4e00\u4e2a\u89c4\u5b9a\uff1a\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u53c2\u52a0\u4e86\uff0c\u90a3\u4e48\u4ed6\u7684\u76f4\u63a5\u4e0b\u5c5e\u5c31\u4e0d\u80fd\u53c2\u52a0\u3002\u73b0\u5728\u7ed9\u51fa\u6bcf\u4e2a\u5458\u5de5\u7684\u5feb\u4e50\u503c\u4ee5\u53ca\u4ed6\u4eec\u4e4b\u95f4\u7684\u4e0a\u4e0b\u7ea7\u5173\u7cfb\uff0c\u95ee\u5982\u4f55\u5b89\u6392\u624d\u80fd\u4f7f\u5f97\u53c2\u52a0\u821e\u4f1a\u7684\u5458\u5de5\u7684\u5feb\u4e50\u503c\u603b\u548c\u6700\u5927\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  vector&lt;int&gt; happiness(n + 1);\n  vector&lt;int&gt; is_root(n + 1, 1);\n  // dp[i][0]: i\u4e0d\u88ab\u5b50\u8282\u70b9\u8986\u76d6\u7684\u6700\u5927\u5feb\u4e50\u503c\n  // dp[i][1]: i\u88ab\u5b50\u8282\u70b9\u8986\u76d6\u7684\u6700\u5927\u5feb\u4e50\u503c\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(2));\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; happiness[i]; }\n  for (int i = 1; i &lt; n; i++) {\n    int l, k;\n    cin &gt;&gt; l &gt;&gt; k;\n    tree[k].push_back(l);\n    is_root[l] = 0;\n  }\n\n  function&lt;void(int, int)&gt; dfs = [&amp;](int u, int from) {\n    dp[u][0] = 0;\n    dp[u][1] = happiness[u];\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      dfs(v, u);\n      dp[u][0] += max(dp[v][0], dp[v][1]);  // \u9009\u62e9\u4e0d\u6765\uff0c\u6240\u4ee5\u5b50\u8282\u70b9\u53ef\u4ee5\u9009\u62e9\u6765\u6216\u4e0d\u6765\n      dp[u][1] += dp[v][0];                 // \u9009\u62e9\u6765\uff0c\u6240\u4ee5\u5b50\u8282\u70b9\u5fc5\u987b\u9009\u62e9\u4e0d\u6765\n    }\n  };\n\n  int root = find(is_root.begin() + 1, is_root.end(), 1) - is_root.begin();\n  dfs(root, 0);\n\n  cout &lt;&lt; max(dp[root][0], dp[root][1]) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6700\u5c0f\u652f\u914d\u96c6","title":"\u6700\u5c0f\u652f\u914d\u96c6","text":"<p>\u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u70b9\u7684\u6811\uff0c\u4ece n \u4e2a\u70b9\u4e2d\u9009\u53d6\u5c3d\u91cf\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e00\u4e2a\u4e0d\u5728\u652f\u914d\u96c6\u4e2d\u7684\u70b9\u90fd\u548c\u4e00\u4e2a\u5728\u652f\u914d\u96c6\u4e2d\u7684\u70b9\u6709\u8fde\u8fb9\u3002\uff08\u70b9\u8986\u76d6\u70b9\uff09</p> <p>f_{u,0} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cu \u5728\u652f\u914d\u96c6\u4e2d\u6240\u9700\u8981\u9009\u53d6\u7684\u6700\u5c0f\u70b9\u6570\u3002\u56e0\u4e3a u \u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u53ef\u4ee5\u9009\u62e9\u88ab\u8986\u76d6\u6216\u8005\u4e0d\u88ab\u8986\u76d6\u3002\uff08\u88ab\u81ea\u5df1\u652f\u914d\uff09</p> <p>f_{u,1} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cu \u4e0d\u5728\u652f\u914d\u96c6\u4f46 u \u7684\u5b50\u8282\u70b9\u5728\u652f\u914d\u96c6\u4e2d\u6240\u9700\u8981\u9009\u53d6\u7684\u6700\u5c0f\u70b9\u6570\u3002\u56e0\u4e3a u \u4e0d\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u9009\u53d6\u88ab\u81ea\u5df1\u8986\u76d6\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u9009\u62e9\u88ab\u8986\u76d6\u6216\u8005\u4e0d\u88ab\u8986\u76d6\u3002\uff08\u88ab\u513f\u5b50\u652f\u914d\uff09</p> <p>f_{u,2} \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cu \u4e0d\u5728\u652f\u914d\u96c6\u4f46 u \u7684\u7236\u8282\u70b9\u5728\u652f\u914d\u96c6\u4e2d\u6240\u9700\u8981\u9009\u53d6\u7684\u6700\u5c0f\u70b9\u6570\u3002\u56e0\u4e3a u \u4e0d\u9009\u53d6\uff0c\u5219 u \u7684\u513f\u5b50\u53ea\u80fd\u88ab\u81ea\u5df1\u8986\u76d6\u6216\u8005\u88ab\u5b83\u7684\u513f\u5b50\u8986\u76d6\u3002\uff08\u88ab\u7236\u4eb2\u652f\u914d\uff09</p> <p>\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p>  \\begin{aligned} f_{u,0} &amp; = \\sum_{v \\in \\text{children of } u} \\min(f_{v,0}, f_{v,1}, f_{v,2}) + 1 \\\\ f_{u,1} &amp; = \\min_{t \\in \\text{children of } u} \\left( f_{t,0} + \\sum_{son \\neq t} \\min(f_{son,0}, f_{son,1}) \\right) \\\\ f_{u,2} &amp; = \\sum_{v \\in \\text{children of } u} \\min(f_{v,0}, f_{v,1}) \\end{aligned}  <p>\u4f18\u5316\u8bf4\u660e\uff1a\u5728\u7b2c\u4e8c\u79cd\u72b6\u6001\u4e2d\uff08\u88ab\u513f\u5b50\u652f\u914d\uff09\uff0c\u4e3a\u4e86\u627e\u5230\u6700\u4f18\u7684\u8986\u76d6\u65b9\u6848\uff0c\u8003\u8651\u5b50\u8282\u70b9 t \u4f5c\u4e3a\u88ab\u81ea\u5df1\u8986\u76d6\u7684\u6700\u4f18\u5b50\u8282\u70b9\uff0c\u5bf9\u6bd4\u53e6\u4e00\u4e2a\u975e\u6700\u4f18\u7684\u5b50\u8282\u70b9 v\uff1a</p>  dp[t][0] + \\sum_{son \\neq t} \\min(dp[son][0], dp[son][1]) \\lt dp[v][0] + \\sum_{son \\neq v} \\min(dp[son][0], dp[son][1])  <p>\u8fd9\u7b49\u4ef7\u4e8e\uff1a</p>  \\sum_{son } \\min(dp[son][0], dp[son][1]) + dp[t][0] - \\min(dp[t][0], dp[t][1]) &lt; \\sum_{son } \\min(dp[son][0], dp[son][1]) + dp[v][0] - \\min(dp[v][0], dp[v][1])  <p>\u5373\u6700\u4f18\u5b50\u8282\u70b9 t \u6ee1\u8db3\uff1a</p>  \\forall v \\neq t: \\quad dp[t][0] - \\min(dp[t][0], dp[t][1]) &lt; dp[v][0] - \\min(dp[v][0], dp[v][1])  <p>\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u5148\u8ba1\u7b97\u6240\u6709\u5b50\u8282\u70b9\u7b2c\u4e00\u9879\u7684\u8d21\u732e\uff0c\u627e\u5230\u6700\u4f18\u7684\u5b50\u8282\u70b9\u4f5c\u4e3a\u8986\u76d6\u81ea\u5df1\u7684\u8282\u70b9\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e2a\u8282\u70b9\u7684\u5dee\u503c\u5373\u53ef\u3002</p> Cell Phone Network G <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 n \u4e2a\u70b9\u7684\u6811\uff0c\u4ece n \u4e2a\u70b9\u4e2d\u9009\u51fa\u5c3d\u91cf\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u4e0e\u53d6\u51fa\u6765\u7684\u70b9\u76f8\u8fde\u3002</p> <p>\u53f6\u8282\u70b9\u521d\u59cb\u5316</p> <p>\u53f6\u8282\u70b9\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u300c\u88ab\u5b50\u8282\u70b9\u8986\u76d6\u300d\u8fd9\u4e2a\u72b6\u6001\u4e0d\u53ef\u80fd\u51fa\u73b0\uff0c\u56e0\u6b64\u5728\u53f6\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c<code>dp[u][1]</code> \u7684\u503c\u5e94\u8be5\u88ab\u521d\u59cb\u5316\u4e3a <code>INT_MAX</code>\u3002 \u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5728\u8ba1\u7b97\u7236\u8282\u70b9\u7684\u72b6\u6001\u65f6\uff0c\u4e0d\u4f1a\u9519\u8bef\u5730\u9009\u62e9\u53f6\u8282\u70b9\u4f5c\u4e3a\u8986\u76d6\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u3002</p> <p>\u6811\u53ef\u80fd\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u4e0d\u80fd\u6839\u636e\u5ea6\u6570\u5224\u65ad\u53f6\u8282\u70b9\uff0c\u53ef\u4ee5\u6839\u636e\u662f\u5426\u6536\u96c6\u5230\u4e86\u5b50\u8282\u70b9\u6765\u786e\u5b9a\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;climits&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(3));\n  for (int i = 1; i &lt; n; i++) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  auto metric = [&amp;](int i) { return dp[i][0] - min(dp[i][0], dp[i][1]); };\n\n  auto dfs    = [&amp;](auto &amp;&amp;self, int u, int from) -&gt; void {\n    dp[u][0]       = 1;   // \u88ab\u81ea\u5df1\u8986\u76d6\n    dp[u][1]       = 0;   // \u88ab\u5b50\u8282\u70b9\u8986\u76d6\n    dp[u][2]       = 0;   // \u88ab\u7236\u8282\u70b9\u8986\u76d6\n    int best_child = -1;  // \u9009\u62e9\u54ea\u4e2a\u5b50\u8282\u70b9\u8986\u76d6\u81ea\u5df1\n\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      self(self, v, u);\n      // \u8282\u70b9\u88ab\u81ea\u5df1\u8986\u76d6, \u5219\u5b50\u8282\u70b9\u53ef\u4ee5\u9009\u62e9\u88ab\u81ea\u5df1\u8986\u76d6\u6216\u8005\u88ab\u7236\u8282\u70b9\u8986\u76d6,\n      // \u6216\u8005\u88ab\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u8986\u76d6\n      dp[u][0] += min({dp[v][0], dp[v][1], dp[v][2]});\n      // \u8282\u70b9\u88ab\u5b50\u8282\u70b9\u8986\u76d6, \u5219\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u5b50\u8282\u70b9\u8986\u76d6\u81ea\u5df1\n      dp[u][1] += min(dp[v][0], dp[v][1]);\n      if (best_child == -1 || metric(v) &lt; metric(best_child)) { best_child = v; }\n      // \u8282\u70b9\u88ab\u7236\u8282\u70b9\u8986\u76d6, \u5219\u5b50\u8282\u70b9\u5fc5\u987b\u9009\u62e9\u88ab\u81ea\u5df1\u8986\u76d6\u6216\u8005\u88ab\u5b50\u8282\u70b9\u8986\u76d6\n      dp[u][2] += min(dp[v][0], dp[v][1]);\n    }\n    // \u516c\u5f0f\u6700\u540e\u7684\u5dee\u503c\u3002\u5982\u679c\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5219\u65e0\u6cd5\u88ab\u5b50\u8282\u70b9\u8986\u76d6\uff0c\u56e0\u6b64\u8bbe\u4e3a\u65e0\u7a77\u5927\n    dp[u][1] = (best_child == -1 ? INT_MAX : dp[u][1] + metric(best_child));\n  };\n  dfs(dfs, 1, 0);\n  // \u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9, \u6240\u4ee5\u4e0d\u80fd\u88ab\u7236\u8282\u70b9\u8986\u76d6\n  cout &lt;&lt; min(dp[1][0], dp[1][1]) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6811\u4e0a\u80cc\u5305","title":"\u6811\u4e0a\u80cc\u5305","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u6709 n \u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u91cd\u91cf w_i \u548c\u4e00\u4e2a\u4ef7\u503c v_i\uff0c\u4ee5\u53ca\u4e00\u4e2a\u80cc\u5305\u5bb9\u91cf C\u3002\u4ece n \u4e2a\u70b9\u4e2d\u9009\u51fa\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u9009\u4e2d\u70b9\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 C\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u4e00\u822c\u9009\u62e9\u5b50\u8282\u70b9\u4e5f\u8981\u9009\u62e9\u7236\u8282\u70b9\u3002</p> <p>\u5b9a\u4e49 dp[u][j] \u8868\u793a\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u53d6\u7684\u70b9\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7 j \u65f6\u7684\u6700\u5927\u4ef7\u503c\u3002\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u8282\u70b9 v \\in \\text{children}(u)\uff1a</p>  dp[u][j] = \\max_{0 \\le k \\le j - w_u} \\big( dp[u][j - k],\\; dp[u][j - k] + dp[v][k] \\big)  \u9009\u8bfe <p>\u6709 n \u95e8\u8bfe\u7a0b\uff0c\u6bcf\u95e8\u8bfe\u7a0b\u6709\u4e00\u4e2a\u5b66\u5206\u548c\u4e00\u4e2a\u4ef7\u503c\u3002\u67d0\u4e9b\u8bfe\u7a0b\u6709\u5148\u4fee\u8bfe\u7a0b\u5173\u7cfb\uff0c\u5fc5\u987b\u5148\u4fee\u5b8c\u5148\u4fee\u8bfe\u7a0b\u624d\u80fd\u9009\u4fee\u8be5\u8bfe\u7a0b\u3002\u73b0\u5728\u6709 m \u4e2a\u5b66\u5206\uff0c\u95ee\u5982\u4f55\u9009\u8bfe\u4f7f\u5f97\u603b\u4ef7\u503c\u6700\u5927\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  vector&lt;int&gt; weights(n + 1, 1);\n  vector&lt;int&gt; values(n + 1);\n  for (int i = 1; i &lt;= n; i++) {\n    int k, s;\n    cin &gt;&gt; k &gt;&gt; s;\n    tree[k].push_back(i);\n    values[i] = s;\n  }\n  weights[0] = values[0] = 0;  // \u6839\u8282\u70b9\u91cd\u91cf\u548c\u4ef7\u503c\u4e3a0\n\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1));\n  function&lt;void(int, int)&gt; dfs = [&amp;](int u, int from) {\n    // \u521d\u59cb\u5316: \u53ea\u653e\u5165\u5f53\u524d\u8282\u70b9\n    for (int j = weights[u]; j &lt;= m; ++j) { dp[u][j] = values[u]; }\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      dfs(v, u);\n      // \u5c06\u5b50\u8282\u70b9\u7684\u7269\u54c1\u5408\u5e76\u5230\u5f53\u524d\u8282\u70b9\u7684\u80cc\u5305\u4e2d, 01\u80cc\u5305\u5012\u5e8f\u679a\u4e3e\uff0c\u5b8c\u5168\u80cc\u5305\u6b63\u5e8f\u679a\u4e3e\n      for (int j = m; j &gt;= weights[u]; --j) {        // \u5f53\u524d\u80cc\u5305\u5bb9\u91cf\n        for (int k = 0; k &lt;= j - weights[u]; ++k) {  // \u5206\u914d\u7ed9\u5f53\u524d\u5b50\u6811\u7684\u5bb9\u91cf\n          dp[u][j] = max(dp[u][j], dp[u][j - k] + dp[v][k]);\n        }\n      }\n    }\n  };\n  dfs(0, -1);\n  cout &lt;&lt; dp[0][m] &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u4e0a\u4e0b\u754c\u4f18\u5316","title":"\u4e0a\u4e0b\u754c\u4f18\u5316","text":"<p>\u5047\u8bbe\u7528 size[u] \u8868\u793a u \u53ca\u5176\u6240\u6709\u5b50\u6811\u7684\u603b\u91cd\u91cf\uff08\u5df2\u904d\u5386\u5230\u5b50\u8282\u70b9 v \u65f6\uff0c\u4e0d\u5305\u62ec v \u7684\u5b50\u6811\u91cd\u91cf\uff09\uff1b\u7528 size[v] \u8868\u793a\u5b50\u8282\u70b9 v \u53ca\u5176\u6240\u6709\u5b50\u6811\u7684\u603b\u91cd\u91cf\uff08\u5df2\u8ba1\u7b97\u5b8c\u6bd5\uff09\u3002</p> <ol> <li> <p>\u5bf9\u4e8e j\uff08\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\uff09\uff1a</p> <ul> <li> <p>\u4e0a\u754c\uff1a\u679a\u4e3e j &gt; size[u] + size[v] \u65f6\uff0c\u6700\u4f18\u89e3\u5df2\u7ecf\u8574\u542b\u5728 j = size[u] + size[v] \u7684\u60c5\u51b5\u4e2d,   \u56e0\u4e3a\u518d\u591a\u7684\u5bb9\u91cf\u4e5f\u88c5\u4e0d\u4e0b\u66f4\u591a\u7269\u54c1\uff0c\u7ed3\u679c\u4e0d\u4f1a\u53d8\u5316</p> <p>\u4e0a\u754c\u53ef\u4ee5\u7f29\u5c0f\u4e3a j = min(size[u] + size[v], capacity)</p> </li> <li> <p>\u7ed3\u679c\uff1a\u5982\u679c\u80cc\u5305\u5bb9\u91cf m \u80fd\u88c5\u4e0b\u5168\u90e8\u7269\u54c1\uff0cdp[root][size[root]] \u5373\u4e3a\u7ed3\u679c\uff0c\u7efc\u5408\u5373 dp[root][min(size[root], capacity)]</p> </li> </ul> </li> <li> <p>\u5bf9\u4e8e k\uff08\u5206\u914d\u7ed9\u5b50\u8282\u70b9 v \u7684\u5bb9\u91cf\uff09\uff1a</p> <ul> <li> <p>\u4e0a\u754c\uff1a\u679a\u4e3e k &gt; size[v] \u65f6\uff0c\u6700\u4f18\u89e3\u5df2\u7ecf\u8574\u542b\u5728 k = size[v] \u7684\u60c5\u51b5\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u518d\u591a\u7684\u5bb9\u91cf\u4e5f\u88c5\u4e0d\u4e0b\u66f4\u591a\u7269\u54c1\uff0c\u7ed3\u679c\u4e0d\u4f1a\u53d8\u5316</p> <p>\u4e0a\u754c\u53ef\u4ee5\u7f29\u5c0f\u4e3a k = min(size[v], j - weight[u])</p> </li> <li> <p>\u4e0b\u754c\uff1a\u7ed9\u5b50\u8282\u70b9\u5206\u914d 0 \u5bb9\u91cf\u65f6\u7ed3\u679c\u4e0d\u53d8\uff0c\u53ef\u4ee5\u4ece 1 \u5f00\u59cb\u679a\u4e3e</p> <p>\u5f53\u53ef\u7528\u5bb9\u91cf j \u5f88\u5927\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece j - size[u] \u5f00\u59cb\u679a\u4e3e\uff0c\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u4e4b\u524d\u7684\u7269\u54c1\u5df2\u7ecf\u5206\u914d\u5b8c\u6bd5\uff0c \u5269\u4f59\u5bb9\u91cf\u90fd\u53ef\u4ee5\u5206\u914d\u7ed9\u5b50\u8282\u70b9 v</p> <p>\u4e0b\u754c\u53ef\u4ee5\u6269\u5927\u4e3a k = max(1, j - size[u])</p> </li> </ul> </li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6</p> <ul> <li>\u539f\u59cb\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\cdot C^2)</li> <li>\u4f18\u5316\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\cdot C)</li> </ul> \u9009\u8bfe C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  vector&lt;int&gt; weights(n + 1, 1);\n  vector&lt;int&gt; values(n + 1);\n  for (int i = 1; i &lt;= n; i++) {\n    int k, s;\n    cin &gt;&gt; k &gt;&gt; s;\n    tree[k].push_back(i);\n    values[i] = s;\n  }\n  weights[0] = values[0] = 0;  // \u6839\u8282\u70b9\u91cd\u91cf\u548c\u4ef7\u503c\u4e3a0\n\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1));\n  vector&lt;int&gt; size(n + 1, 0);  // size[u]: u\u53ca\u5176\u5b50\u6811\u7684\u603b\u91cd\u91cf\n\n  function&lt;void(int, int)&gt; dfs = [&amp;](int u, int from) {\n    size[u] = weights[u];\n    for (int j = weights[u]; j &lt;= m; ++j) { dp[u][j] = values[u]; }\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      dfs(v, u);\n      int upper_j = min(size[u] + size[v], m);\n      for (int j = upper_j; j &gt;= weights[u]; --j) {  // \u5f53\u524d\u80cc\u5305\u5bb9\u91cf\n        for (int k = max(1, j - size[u]); k &lt;= min(size[v], j - weights[u]); ++k) {\n          dp[u][j] = max(dp[u][j], dp[u][j - k] + dp[v][k]);\n        }\n      }\n      size[u] += size[v];\n    }\n  };\n  dfs(0, -1);\n  cout &lt;&lt; dp[0][min(size[0], m)] &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#dfn\u5e8f\u4f18\u5316","title":"DFN\u5e8f\u4f18\u5316","text":"<p>\u901a\u8fc7\u5bf9\u6811\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\uff0c\u53ef\u4ee5\u5c06\u6811\u7684\u8282\u70b9\u6309\u7167\u8bbf\u95ee\u987a\u5e8f\u7ebf\u6027\u5316\uff0c\u5f62\u6210\u4e00\u4e2a\u6570\u7ec4\u3002\u8fd9\u79cd\u7ebf\u6027\u5316\u7684\u8868\u793a\u65b9\u5f0f\u79f0\u4e3a\u6df1\u5ea6\u4f18\u5148\u7f16\u53f7\uff08\\text{DFN}\uff09\u5e8f\u3002\u5229\u7528 \\text{DFN} \u5e8f\uff0c\u53ef\u4ee5\u5c06\u6811\u5f62 \\text{DP} \u95ee\u9898\u8f6c\u5316\u4e3a\u7ebf\u6027 \\text{DP} \u95ee\u9898\u3002</p> <p>u \u662f \\text{DFN} \u5e8f\u4e2d\u7b2c i \u4e2a\u8282\u70b9\uff0csize[i] \u662f\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002dp[i][j] \u8868\u793a\u4ece \\text{DFN} \u5e8f\u4e2d\u7b2c i \u4e2a\u8282\u70b9\u5f00\u59cb\u9009\uff0c\u80cc\u5305\u5bb9\u91cf\u4e3a j \u65f6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ol> <li>\u9009\u62e9\u5f53\u524d\u8282\u70b9 u\uff0c\u5219\u5b50\u6811\u4e2d\u53ef\u4ee5\u9009\u62e9\u653e\u5165\uff0c\u95ee\u9898\u53d8\u6210\u4ece i+1 \u4e2a\u8282\u70b9\u5f00\u59cb\u9009\uff0c\u5bb9\u91cf\u4e3a j - weight[u] \u7684\u80cc\u5305</li> <li>\u4e0d\u9009\u62e9\u5f53\u524d\u8282\u70b9 u\uff0c\u5219\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u653e\u5165\uff0c\u6240\u4ee5\u8df3\u8fc7\u5b50\u6811\u5927\u5c0f\u4e2a\u8282\u70b9</li> </ol> <p>\u5229\u7528 \\text{DFN} \u5e8f\u4ee5\u53ca\u5b50\u6811\u5927\u5c0f\uff0c\u53ef\u4ee5\u5c06\u6811\u5f62 \\text{DP} \u7684\u72b6\u6001\u8f6c\u79fb\u4f18\u5316\u4e3a\uff1a</p>  dp[i][j] = \\max \\big( dp[i + 1][j - weight[u]] + value[u],\\; dp[i + size[i]][j] \\big)  <p>\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u4f7f\u7528 \\text{DFN} \u4f18\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\cdot C)</p> \u9009\u8bfe C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int&gt; weights(n + 1, 1), values(n + 1);\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt;= n; ++i) {\n    int k, s;\n    cin &gt;&gt; k &gt;&gt; s;\n    tree[k].push_back(i);\n    values[i] = s;\n  }\n  weights[0] = values[0] = 0;  // \u6839\u8282\u70b9\u91cd\u91cf\u548c\u4ef7\u503c\u4e3a0\n\n  vector&lt;int&gt; dfn(n + 1);      // DFN\u5e8f\u5bf9\u5e94\u7684\u539f\u59cb\u8282\u70b9\u7f16\u53f7\n  vector&lt;int&gt; size(n + 1, 0);  // \u4ee5DFN\u5e8f\u8ba1\u7b97\u7684\u5b50\u6811\u5927\u5c0f\n  int timer = -1;\n  // \u8ba1\u7b97DFN\u548c\u5b50\u6811\u5927\u5c0f\n  function&lt;int(int, int)&gt; compute_dfn_size = [&amp;](int u, int from) {\n    int dfn_u   = ++timer;  // \u5f53\u524d\u8282\u70b9\u5728DFN\u5e8f\u4e2d\u7684\u4f4d\u7f6e\n    dfn[dfn_u]  = u;        // \u8bb0\u5f55DFN\u5e8f\n    size[dfn_u] = 1;        // \u521d\u59cb\u5316\u5b50\u6811\u5927\u5c0f\u4e3a1\n    for (int v : tree[u]) {\n      if (v == from) { continue; }\n      size[dfn_u] += compute_dfn_size(v, u);  // \u7d2f\u52a0\u5b50\u6811\u5927\u5c0f\n    }\n    return size[dfn_u];\n  };\n  compute_dfn_size(0, -1);\n\n  // dp[i][j]: \u524di\u4e2a\u8282\u70b9, \u5728\u5bb9\u91cf\u4e3aj\u7684\u80cc\u5305\u4e2d\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c, 0-n \u5171n+1\u4e2a\u8282\u70b9\n  vector&lt;vector&lt;int&gt;&gt; dp(n + 2, vector&lt;int&gt;(m + 1, 0));\n  for (int i = n; i &gt;= 0; --i) {             // \u9006\u5e8f\u679a\u4e3eDFN\u5e8f\u8282\u70b9\n    int u  = dfn[i];                         // \u5f53\u524d\u8282\u70b9\n    int sz = size[i];                        // \u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\n    for (int j = m; j &gt;= weights[u]; --j) {  // \u5f53\u524d\u80cc\u5305\u5bb9\u91cf\n      // \u653e\u5165\u5f53\u524d\u8282\u70b9, \u5219\u5b50\u6811\u4e2d\u53ef\u4ee5\u9009\u62e9\u653e\u5165, \u95ee\u9898\u53d8\u6210\u4ecei+1\u4e2a\u8282\u70b9\u5f00\u59cb\u9009,\n      // \u5bb9\u91cf\u4e3aj-weights[u]\u7684\u80cc\u5305\n      dp[i][j] = max(dp[i][j], dp[i + 1][j - weights[u]] + values[u]);\n      // \u4e0d\u653e\u5165\u5f53\u524d\u8282\u70b9, \u5219\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u653e\u5165, \u6240\u4ee5\u8df3\u8fc7\u5b50\u6811\u5927\u5c0f\u4e2a\u8282\u70b9\n      dp[i][j] = max(dp[i][j], dp[i + sz][j]);\n    }\n  }\n  cout &lt;&lt; dp[0][m] &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DP/Tree/#\u6362\u6839-dp","title":"\u6362\u6839 DP","text":"<p>\u6362\u6839 \\text{DP} \u662f\u6811\u5f62\u52a8\u6001\u89c4\u5212\u4e2d\u7684\u4e00\u79cd\u6280\u5de7\uff0c\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u9700\u8981\u8ba1\u7b97\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\u7684\u67d0\u79cd\u6700\u4f18\u89e3\u7684\u95ee\u9898\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u4e24\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u6765\u5b9e\u73b0\u3002</p> <p>\u7b2c\u4e00\u6b21 \\text{DFS} \u7528\u4e8e\u8ba1\u7b97\u4ee5\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u72b6\u6001\u503c\uff0c\u7b2c\u4e8c\u6b21 \\text{DFS} \u7528\u4e8e\u5c06\u8fd9\u4e9b\u72b6\u6001\u503c\u4f20\u9012\u5230\u5176\u4ed6\u8282\u70b9\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\u7684\u72b6\u6001\u503c\u3002</p> \u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c <p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u6811\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u3002</p> C++<pre><code>#include &lt;functional&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  vector&lt;int&gt; sumOfDistancesInTree(int n, vector&lt;vector&lt;int&gt;&gt; &amp;edges) {\n    vector&lt;vector&lt;int&gt;&gt; tree(n);\n    for (vector&lt;int&gt; &amp;edge : edges) {\n      int x = edge[0], y = edge[1];\n      tree[x].emplace_back(y);\n      tree[y].emplace_back(x);\n    }\n\n    vector&lt;int&gt; size(n, 1);  // \u5b50\u6811\u7684\u5927\u5c0f,\u5305\u62ec\u81ea\u8eab\n    vector&lt;int&gt; ans(n);\n\n    function&lt;void(int, int, int)&gt; dfs1 = [&amp;](int u, int from, int depth) {\n      ans[0] += depth;  // \u8ba1\u7b97\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u548c\n      for (int child : tree[u]) {\n        if (child != from) {\n          dfs1(child, u, depth + 1);\n          size[u] += size[child];\n        }\n      }\n    };\n    dfs1(0, -1, 0);\n\n    function&lt;void(int, int)&gt; dfs2 = [&amp;](int u, int from) {\n      for (int v : tree[u]) {\n        if (v != from) {\n          // \u6362\u6839\u65f6size[v]\u4e2a\u8282\u70b9\u8ddd\u79bb\u51cf\u5c111,\u5176\u4f59\u8282\u70b9\u8ddd\u79bb\u589e\u52a01\n          ans[v] = ans[u] - size[v] + (n - size[v]);\n          dfs2(v, u);\n        }\n      }\n    };\n    dfs2(0, -1);\n    return ans;\n  }\n};\n</code></pre>","tags":["\u52a8\u6001\u89c4\u5212","DP","\u6811\u5f62\u52a8\u6001\u89c4\u5212","Tree DP"]},{"location":"code/algorithm/DS/BIT/","title":"\u6811\u72b6\u6570\u7ec4","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#\u6811\u72b6\u6570\u7ec4","title":"\u6811\u72b6\u6570\u7ec4","text":"<p>\u6811\u72b6\u6570\u7ec4\uff08\\text{Binary Indexed Tree} / \\text{Fenwick Tree}\uff09\u7528\u4e8e\u7ef4\u62a4\u524d\u7f00\u7d2f\u79ef\u4fe1\u606f\uff08\u5982\u524d\u7f00\u548c\u3001\u524d\u7f00\u5f02\u6216\u3001\u9891\u7387\u7d2f\u52a0\u7b49\uff09\u3002 \u82e5\u8fd0\u7b97\u53ef\u9006\u4e14\u6ee1\u8db3\u7ed3\u5408\uff08\u5982\u52a0\u6cd5\u3001\u5f02\u6216\u6216\u6a21\u4e0b\u53ef\u9006\u7684\u4e58\u6cd5\uff09\uff0c\u4e5f\u53ef\u7528\u4e8e\u76f8\u5e94\u7684\u533a\u95f4/\u5dee\u5206\u573a\u666f\u3002</p> <p>\u6811\u72b6\u6570\u7ec4\u7684\u4e0b\u6807</p> <p>\u6570\u7ec4\u7684\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff08\\text{one-based indexing}\uff09</p>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#lowbit","title":"lowbit","text":"<p>lowbit \u53d6\u4e00\u4e2a\u6b63\u6574\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u4f4e\u4f4d\u7684 1\uff08\u6700\u4f4e\u6709\u6548\u7684 1 \u5bf9\u5e94\u7684\u503c\uff09\uff0c\u8fd9\u662f\u56e0\u4e3a -x \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f \\sim x + 1\uff0c\u5373\u5bf9 x \u53d6\u53cd\u540e\u52a0 1\uff0c\u56e0\u6b64 x \\And -x \u4f1a\u4fdd\u7559 x \u7684\u6700\u4f4e\u4f4d\u7684 1\uff0c\u5176\u4f59\u4f4d\u5747\u4e3a 0\u3002 lowbit \u53ea\u5bf9\u6b63\u6574\u6570\u6709\u610f\u4e49\uff08\u53d6\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u4f4e\u7684 1\uff09\u3002x=0 \u65f6\u6ca1\u6709\u4efb\u4f55\u4f4d\u4e3a 1\uff0c\u56e0\u6b64\u4ece\u8bed\u4e49\u4e0a\u8bf4 lowbit(0) \u662f\u65e0\u610f\u4e49\u7684\u3002  </p> lowbit C++<pre><code>int64_t lowbit(int64_t x) { return x &amp; (-x); }\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#\u5355\u70b9\u66f4\u65b0\u533a\u95f4\u67e5\u8be2","title":"\u5355\u70b9\u66f4\u65b0\u3001\u533a\u95f4\u67e5\u8be2","text":"<p>\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 tree\uff0c\u5176\u4e2d tree[i] \u5b58\u50a8\u539f\u6570\u7ec4\u4e2d\u4ece i - lowbit(i) + 1 \u5230 i \u7684\u533a\u95f4\u548c\uff08\u6216\u5176\u4ed6\u53ef\u9006\u7ed3\u5408\u8fd0\u7b97\u7684\u7ed3\u679c\uff09\u3002 \u524d\u7f00\u548c sum(1, pos) \u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u51cf\u53bb lowbit \u6765\u7d2f\u52a0 tree \u4e2d\u7684\u503c\u5b9e\u73b0\u3002 \u5355\u70b9\u66f4\u65b0\u65f6\uff0c\u9700\u8981\u5c06\u66f4\u65b0\u503c\u52a0\u5230\u6240\u6709\u5305\u542b\u8be5\u4f4d\u7f6e\u7684 tree \u5143\u7d20\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u52a0\u4e0a lowbit \u6765\u5b9e\u73b0\u3002</p> \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), tree(n + 1) {}\n\n  // \u5355\u70b9\u66f4\u65b0 x\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= n\n  void point_add(int64_t x, int64_t delta) {\n    for (; x &lt;= n; x += lowbit(x)) { tree[x] += delta; }\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c [1,x], 1 &lt;= x &lt;= n\n  int64_t sum(int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c [x,y], 1 &lt;= x &lt;= y &lt;= n\n  int64_t range_sum(int64_t x, int64_t y) { return sum(y) - sum(x - 1); }\n\n  // x &amp; (-x) \u53d6\u51fa x \u6700\u53f3\u8fb9\u7684 1\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  int64_t n;             // \u6570\u7ec4\u5927\u5c0f\n  vector&lt;int64_t&gt; tree;  // one-based indexing\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  BIT bit(n);\n  for (int64_t i = 1; i &lt;= n; i++) {\n    int64_t v;\n    cin &gt;&gt; v;\n    bit.point_add(i, v);\n  }\n\n  while ((m--) != 0) {\n    int64_t op, x, y;\n    cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n    if (op == 1) {  // \u5c06\u7b2c x \u4e2a\u6570\u52a0\u4e0a y\n      bit.point_add(x, y);\n    } else {  // \u67e5\u8be2\u533a\u95f4\u548c [x,y]\n      cout &lt;&lt; bit.range_sum(x, y) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#\u533a\u95f4\u66f4\u65b0\u5355\u70b9\u67e5\u8be2","title":"\u533a\u95f4\u66f4\u65b0\u3001\u5355\u70b9\u67e5\u8be2","text":"<ol> <li>\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 D: D[1]=A[1], D[i]=A[i]-A[i-1] (i&gt;1) </li> <li>\u533a\u95f4 [l,r] \u52a0 val \u7b49\u4ef7\u4e8e D[l]+=val, D[r+1]-=val\uff08\u4e24\u6b21\u70b9\u589e\uff09  </li> <li>\u67e5\u8be2 A[i] \u5219\u4e3a \\sum_{j=1}^i D[j]\uff08\u524d\u7f00\u548c\uff09</li> </ol> \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 2 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), tree(n + 2) {}\n\n  // \u533a\u95f4\u66f4\u65b0 [x,y] \u6bcf\u4e2a\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= y &lt;= n\n  void range_add(int64_t x, int64_t y, int64_t delta) {\n    point_add(x, delta);\n    point_add(y + 1, -delta);\n  }\n\n  // \u5355\u70b9\u67e5\u8be2 x\u4f4d\u7f6e\u7684\u503c, 1 &lt;= x &lt;= n\n  int64_t sum(int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  // \u5355\u70b9\u66f4\u65b0, \u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\n  void point_add(int64_t index, int64_t delta) {\n    // \u4e0d\u67e5n+1\u4f4d\u7f6e, \u4e0a\u754c\u5230n\u5373\u53ef\n    for (; index &lt;= n; index += lowbit(index)) { tree[index] += delta; }\n  }\n\n  int64_t n;             // \u6570\u7ec4\u5927\u5c0f\n  vector&lt;int64_t&gt; tree;  // \u5dee\u5206\u6811\u72b6\u6570\u7ec4, one-based indexing\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  BIT bit(n);\n  for (int64_t i = 1; i &lt;= n; i++) {\n    int64_t v;\n    cin &gt;&gt; v;\n    bit.range_add(i, i, v);\n  }\n\n  while ((m--) != 0) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {  // \u5c06\u533a\u95f4 [x,y] \u6bcf\u4e2a\u4f4d\u7f6e\u52a0 k\n      int64_t x, y, k;\n      cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n      bit.range_add(x, y, k);\n    } else {  // \u67e5\u8be2 x \u4f4d\u7f6e\u7684\u503c\n      int64_t x;\n      cin &gt;&gt; x;\n      cout &lt;&lt; bit.sum(x) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre> <p>\u533a\u95f4\u66f4\u65b0\u3001\u533a\u95f4\u67e5\u8be2</p> <ol> <li>\u533a\u95f4\u66f4\u65b0\u540c\u4e0a\uff0c\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 D</li> <li>\u533a\u95f4\u67e5\u8be2  <ol> <li>\u5355\u70b9\u7684\u503c: A[i]=\\sum_{j=1}^i D[j] </li> <li>\u533a\u95f4\u548c: \\begin{aligned} \\sum_{i=1}^r A[i] &amp;= \\sum_{i=1}^r \\sum_{j=1}^i D[j] = rD[1] + (r-1)D[2] + \\ldots + (r-(r-1))D[r] \\\\ &amp;=r\\sum_{i=1}^r D[i] - \\sum_{i=1}^r (i-1)D[i]\\end{aligned} </li> <li>\u4ee4 F[i]=(i-1)D[i]\uff0c\u5219 \\sum_{i=l}^r A[i]=r\\sum_{i=1}^r D[i]-\\sum_{i=1}^r F[i]-((l-1)\\sum_{i=1}^{l-1} D[i]-\\sum_{i=1}^{l-1} F[i]) </li> </ol> </li> <li>\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4 D \u7528\u4e8e\u533a\u95f4\u66f4\u65b0\uff0c\u4e00\u4e2a\u7ef4\u62a4 F \u7528\u4e8e\u533a\u95f4\u67e5\u8be2\uff0c\u5176\u4e2d F[i]=(i-1)*D[i]\uff0c\u5219 F[i] \u7684\u533a\u95f4\u66f4\u65b0\u7b49\u4ef7\u4e8e D[i] \u7684\u533a\u95f4\u66f4\u65b0\u4e58\u4ee5 (i-1)</li> </ol> <p>\u533a\u95f4\u66f4\u65b0\u3001\u533a\u95f4\u67e5\u8be2</p> <p>\u533a\u95f4\u67e5\u8be2\u5e38\u7528\u524d\u7f00\u548c\u7684\u5dee\u503c\u5b9e\u73b0\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u533a\u95f4\u67e5\u8be2\u8f6c\u5316\u4e3a\u524d\u7f00\u548c\u7684\u5f62\u5f0f \u533a\u95f4\u66f4\u65b0\u5e38\u7528\u5dee\u5206\u6570\u7ec4\u7684\u5f62\u5f0f\u5b9e\u73b0\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u533a\u95f4\u66f4\u65b0\u8f6c\u5316\u4e3a\u5dee\u5206\u6570\u7ec4\u7684\u5f62\u5f0f \u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u66f4\u65b0\u548c\u533a\u95f4\u67e5\u8be2  </p> \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), d(n + 2), f(n + 2) {}\n\n  // \u533a\u95f4\u66f4\u65b0 [x,y] \u6bcf\u4e2a\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= y &lt;= n\n  void range_add(int64_t x, int64_t y, int64_t delta) {\n    point_add(d, x, delta);\n    point_add(d, y + 1, -delta);\n    point_add(f, x, delta * (x - 1));\n    point_add(f, y + 1, -delta * y);\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c [x, y], 1 &lt;= x &lt;= y &lt;= n\n  int64_t range_sum(int64_t x, int64_t y) {\n    return y * sum(d, y) - sum(f, y) - ((x - 1) * sum(d, x - 1) - sum(f, x - 1));\n  }\n\n  // \u5355\u70b9\u66f4\u65b0 x\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= n\n  void point_add(vector&lt;int64_t&gt; &amp;tree, int64_t x, int64_t delta) const {\n    // \u4e0d\u67e5n+1\u4f4d\u7f6e, \u4e0a\u754c\u5230n\u5373\u53ef\n    for (; x &lt;= n; x += Lowbit(x)) { tree[x] += delta; }\n  }\n\n  // \u5355\u70b9\u67e5\u8be2 x\u4f4d\u7f6e\u7684\u503c, 1 &lt;= x &lt;= n\n  static int64_t sum(vector&lt;int64_t&gt; &amp;tree, int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= Lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  static int64_t Lowbit(int64_t x) { return x &amp; (-x); }\n\n  int64_t n;          // \u6570\u7ec4\u5927\u5c0f\n  vector&lt;int64_t&gt; d;  // \u5dee\u5206\u6811\u72b6\u6570\u7ec4, one-based indexing\n  vector&lt;int64_t&gt; f;  // \u5dee\u5206\u6811\u72b6\u6570\u7ec4, one-based indexing\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  BIT bit(n);\n  for (int64_t i = 1; i &lt;= n; i++) {\n    int64_t v;\n    cin &gt;&gt; v;\n    bit.range_add(i, i, v);\n  }\n\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {\n      int64_t l, r, val;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n      bit.range_add(l, r, val);\n    } else {\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; bit.range_sum(l, r) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#\u4e8c\u7ef4\u5355\u70b9\u66f4\u65b0\u533a\u95f4\u67e5\u8be2","title":"\u4e8c\u7ef4\u5355\u70b9\u66f4\u65b0\u3001\u533a\u95f4\u67e5\u8be2","text":"\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u53ef\u53d8 <p>Leetcode Premium</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n, int64_t m) : n(n), m(m), tree(n + 1, vector&lt;int64_t&gt;(m + 1)) {}\n\n  // \u4ece\u6570\u7ec4\u521d\u59cb\u5316\u6811\u72b6\u6570\u7ec4, nums\u4e0b\u6807\u4ece0\u5f00\u59cb\n  explicit BIT(vector&lt;vector&lt;int64_t&gt;&gt; nums) : BIT(nums.size(), nums[0].size()) {\n    for (int64_t i = 1; i &lt;= n; i++) {\n      for (int64_t j = 1; j &lt;= m; j++) { point_add(i, j, nums[i - 1][j - 1]); }\n    }\n  }\n\n  // \u5355\u70b9\u66f4\u65b0 (x,y)\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m\n  void point_add(int64_t x, int64_t y, int64_t delta) {\n    for (int64_t i = x; i &lt;= n; i += lowbit(i)) {\n      for (int64_t j = y; j &lt;= m; j += lowbit(j)) { tree[i][j] += delta; }\n    }\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c (x1,y1) \u5230 (x2,y2) , 1 &lt;= x1 &lt;= x2 &lt;= n, 1 &lt;= y1 &lt;= y2 &lt;= m\n  int64_t range_sum(int64_t x1, int64_t y1, int64_t x2, int64_t y2) {\n    return sum(x2, y2) - sum(x1 - 1, y2) - sum(x2, y1 - 1) + sum(x1 - 1, y1 - 1);\n  }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c (1,1) \u5230 (x,y) , 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m\n  int64_t sum(int64_t x, int64_t y) {\n    int64_t ret = 0;\n    for (int64_t i = x; i &gt; 0; i -= lowbit(i)) {\n      for (int64_t j = y; j &gt; 0; j -= lowbit(j)) { ret += tree[i][j]; }\n    }\n    return ret;\n  }\n\n  int64_t n, m;                  // \u6570\u7ec4\u5927\u5c0f\n  vector&lt;vector&lt;int64_t&gt;&gt; tree;  // one-based indexing\n};\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/BIT/#\u4e8c\u7ef4\u533a\u95f4\u66f4\u65b0\u533a\u95f4\u67e5\u8be2","title":"\u4e8c\u7ef4\u533a\u95f4\u66f4\u65b0\u3001\u533a\u95f4\u67e5\u8be2","text":"<p>\u7ef4\u62a4\u56db\u4e2a\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff0c\u5206\u522b\u7ef4\u62a4 D, i*D, j*D, i*j*D\uff0c\u5176\u4e2d D \u4e3a\u5dee\u5206\u6570\u7ec4\uff0cD[i][j]=A[i][j]-A[i-1][j]-A[i][j-1]+A[i-1][j-1]\u3002</p> \u4e0a\u5e1d\u9020\u9898\u7684\u4e03\u5206\u949f C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n, int64_t m)\n      : n(n),\n        m(m),\n        tree1(n + 1, vector&lt;int64_t&gt;(m + 1, 0)),\n        tree2(n + 1, vector&lt;int64_t&gt;(m + 1, 0)),\n        tree3(n + 1, vector&lt;int64_t&gt;(m + 1, 0)),\n        tree4(n + 1, vector&lt;int64_t&gt;(m + 1, 0)) {}\n\n  // \u4ece\u6570\u7ec4\u521d\u59cb\u5316\u6811\u72b6\u6570\u7ec4, nums\u4e0b\u6807\u4ece0\u5f00\u59cb\n  explicit BIT(vector&lt;vector&lt;int64_t&gt;&gt; nums) : BIT(nums.size(), nums[0].size()) {\n    for (int64_t i = 1; i &lt;= n; i++) {\n      for (int64_t j = 1; j &lt;= m; j++) { point_add(i, j, nums[i - 1][j - 1]); }\n    }\n  }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  // \u5355\u70b9\u66f4\u65b0 (x,y)\u4f4d\u7f6e\u52a0delta, 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m\n  void point_add(int64_t x, int64_t y, int64_t delta) {\n    int64_t delta1 = delta;\n    int64_t delta2 = delta * x;\n    int64_t delta3 = delta * y;\n    int64_t delta4 = delta * x * y;\n    for (int64_t i = x; i &lt;= n; i += lowbit(i)) {\n      for (int64_t j = y; j &lt;= m; j += lowbit(j)) {\n        tree1[i][j] += delta1;\n        tree2[i][j] += delta2;\n        tree3[i][j] += delta3;\n        tree4[i][j] += delta4;\n      }\n    }\n  }\n\n  // \u533a\u95f4\u66f4\u65b0 (x1,y1) \u5230 (x2,y2) \u6bcf\u4e2a\u4f4d\u7f6e\u52a0delta\n  // 1 &lt;= x1 &lt;= x2 &lt;= n, 1 &lt;= y1 &lt;= y2 &lt;= m\n  void range_add(int64_t x1, int64_t y1, int64_t x2, int64_t y2, int64_t delta) {\n    point_add(x1, y1, delta);\n    point_add(x1, y2 + 1, -delta);\n    point_add(x2 + 1, y1, -delta);\n    point_add(x2 + 1, y2 + 1, delta);\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c (1,1) \u5230 (x,y) , 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m\n  int64_t sum(int64_t x, int64_t y) {\n    int64_t ret = 0;\n    for (int64_t i = x; i &gt; 0; i -= lowbit(i)) {\n      for (int64_t j = y; j &gt; 0; j -= lowbit(j)) {\n        ret += (x + 1) * (y + 1) * tree1[i][j];\n        ret -= (y + 1) * tree2[i][j];\n        ret -= (x + 1) * tree3[i][j];\n        ret += tree4[i][j];\n      }\n    }\n    return ret;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c (x1,y1) \u5230 (x2,y2) , 1 &lt;= x1 &lt;= x2 &lt;= n, 1 &lt;= y1 &lt;= y2 &lt;= m\n  int64_t range_sum(int64_t x1, int64_t y1, int64_t x2, int64_t y2) {\n    return sum(x2, y2) - sum(x1 - 1, y2) - sum(x2, y1 - 1) + sum(x1 - 1, y1 - 1);\n  }\n\n private:\n  int64_t n, m;                   // \u6570\u7ec4\u5927\u5c0f\n  vector&lt;vector&lt;int64_t&gt;&gt; tree1;  // \u6811\u72b6\u6570\u7ec4, one-based indexing, \u7ef4\u62a4 d[i][j]\n  vector&lt;vector&lt;int64_t&gt;&gt; tree2;  // \u6811\u72b6\u6570\u7ec4, one-based indexing, \u7ef4\u62a4 i*d[i][j]\n  vector&lt;vector&lt;int64_t&gt;&gt; tree3;  // \u6811\u72b6\u6570\u7ec4, one-based indexing, \u7ef4\u62a4 j*d[i][j]\n  vector&lt;vector&lt;int64_t&gt;&gt; tree4;  // \u6811\u72b6\u6570\u7ec4, one-based indexing, \u7ef4\u62a4 i*j*d[i][j]\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  char op;\n  int64_t n, m;\n  cin &gt;&gt; op &gt;&gt; n &gt;&gt; m;\n  BIT bit(n, m);\n  while (cin &gt;&gt; op) {\n    if (op == 'L') {  // \u5c06 (x1, y1), (x2, y2) \u4e3a\u9876\u70b9\u7684\u77e9\u5f62\u533a\u57df\u5185\u7684\u6240\u6709\u6570\u5b57\u52a0\u4e0a\n                      // delta\n      int64_t x1, y1, x2, y2, val;\n      cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; val;\n      bit.range_add(x1, y1, x2, y2, val);\n    } else if (op == 'k') {  // \u67e5\u8be2 (x1, y1), (x2, y2)\n                             // \u4e3a\u9876\u70b9\u7684\u77e9\u5f62\u533a\u57df\u5185\u6240\u6709\u6570\u5b57\u7684\u548c\n      int64_t x1, y1, x2, y2;\n      cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;\n      cout &lt;&lt; bit.range_sum(x1, y1, x2, y2) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u6811\u72b6\u6570\u7ec4","BIT"]},{"location":"code/algorithm/DS/DSU/","title":"\u5e76\u67e5\u96c6","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/DSU/#\u5e76\u67e5\u96c6","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\uff08\\text{Disjoint Set Union}\uff0c\\text{DSU}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u4e0d\u4ea4\u96c6\uff08\\text{Disjoint Set}\uff09\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u652f\u6301\u4e24\u79cd\u4e3b\u8981\u64cd\u4f5c\uff1a</p> <ul> <li>\\text{Find}: \u67e5\u627e\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408\uff0c\u5e76\u8fd4\u56de\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff08\u6839\u8282\u70b9\uff09</li> <li>\\text{Union}: \u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408</li> </ul>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/DSU/#\u666e\u901a\u5e76\u67e5\u96c6","title":"\u666e\u901a\u5e76\u67e5\u96c6","text":"<p>\u5728\u5e76\u67e5\u96c6\u4e2d\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u548c\u8def\u5f84\u538b\u7f29\u8fd9\u4e24\u79cd\u4f18\u5316\u7b56\u7565\u3002</p> <ul> <li>\u6309\u79e9\u5408\u5e76: \u5728\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\uff0c\u603b\u662f\u5c06\u8f83\u5c0f\u7684\u6811\u8fde\u63a5\u5230\u8f83\u5927\u7684\u6811\u4e0a\uff0c\u4ece\u800c\u4fdd\u6301\u6811\u7684\u5e73\u8861\uff0c\u51cf\u5c11\u6811\u7684\u9ad8\u5ea6</li> <li>\u8def\u5f84\u538b\u7f29: \u5728\u6267\u884c\\text{Find}\u64cd\u4f5c\u65f6\uff0c\u5c06\u8bbf\u95ee\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u8282\u70b9\uff0c\u4ece\u800c\u52a0\u901f\u540e\u7eed\u7684\\text{Find}\u64cd\u4f5c</li> </ul> \u3010\u6a21\u677f\u3011\u5e76\u67e5\u96c6 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct DSU {\n  int64_t set_count;  // \u5f53\u524d\u8fde\u901a\u5206\u91cf\u6570\u76ee\n\n  vector&lt;int64_t&gt; root;  // \u8282\u70b9\u5bf9\u5e94\u7684\u6839\u8282\u70b9\n  vector&lt;int64_t&gt; size;  // \u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u96c6\u5408\u7684\u8282\u70b9\u6570\u76ee\n\n  // \u591a\u4e00\u4e2a\u865a\u62df\u8282\u70b9\n  explicit DSU(int64_t n) : set_count(n), root(n + 1), size(n + 1, 1) {\n    iota(root.begin(), root.end(), 0);\n  }\n\n  int64_t Find(int64_t x) { return root[x] == x ? x : root[x] = Find(root[x]); }\n\n  bool Union(int64_t x, int64_t y) {\n    x = Find(x);\n    y = Find(y);\n    if (x == y) { return false; }\n    // \u6309\u79e9\u5408\u5e76\n    if (size[x] &lt; size[y]) { swap(x, y); }\n    root[y]  = x;\n    size[x] += size[y];\n    --set_count;\n    return true;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  DSU uf(n);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t z, x, y;\n    cin &gt;&gt; z &gt;&gt; x &gt;&gt; y;\n    if (z == 1) {\n      uf.Union(x, y);\n    } else {\n      cout &lt;&lt; (uf.Find(x) == uf.Find(y) ? \"Y\" : \"N\") &lt;&lt; \"\\n\";\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/DSU/#\u6269\u5c55\u57df\u5e76\u67e5\u96c6","title":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6","text":"<p>\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff08\\text{Extended Disjoint Set Union}\uff09\u662f\u5e76\u67e5\u96c6\u7684\u4e00\u79cd\u6269\u5c55\u5e94\u7528\u3002 \u5f53\u9700\u8981\u5904\u7406\u5143\u7d20\u4e4b\u95f4\u5b58\u5728\u591a\u79cd\u5173\u7cfb\uff08\u5982\u670b\u53cb\u3001\u654c\u4eba\u3001\u6355\u98df\u7b49\uff09\u65f6\uff0c\u666e\u901a\u5e76\u67e5\u96c6\u53ea\u80fd\u5904\u7406\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u95ee\u9898\uff0c\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u5143\u7d20\u7684\u8868\u793a\u8303\u56f4\uff0c\u5c06\u4e00\u4e2a\u5143\u7d20\u62c6\u5206\u6210\u591a\u4e2a\u57df\uff0c\u6bcf\u4e2a\u57df\u4ee3\u8868\u8be5\u5143\u7d20\u5728\u4e0d\u540c\u5173\u7cfb\u4e0b\u7684\u72b6\u6001\uff0c\u4ece\u800c\u5229\u7528\u5e76\u67e5\u96c6\u6765\u5904\u7406\u8fd9\u4e9b\u590d\u6742\u5173\u7cfb\u3002  </p> \u670b\u53cb\u4e0e\u654c\u4eba\u5173\u7cfb <p>\u5728\u5904\u7406\u670b\u53cb\u548c\u654c\u4eba\u5173\u7cfb\u65f6\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5143\u7d20\u62c6\u5206\u6210\u4e24\u4e2a\u57df\uff1a\u4e00\u4e2a\u8868\u793a\u8be5\u5143\u7d20\u7684\u670b\u53cb\u96c6\u5408\uff0c\u53e6\u4e00\u4e2a\u8868\u793a\u8be5\u5143\u7d20\u7684\u654c\u4eba\u96c6\u5408\u3002 \u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5143\u7d20 x \u62c6\u5206\u6210\u4e24\u4e2a\u8282\u70b9 x \u548c x + n\uff0c\u5176\u4e2d n \u662f\u5143\u7d20\u603b\u6570\u3002\u8282\u70b9 x \u4ee3\u8868 x \u7684\u670b\u53cb\u96c6\u5408\uff0c\u8282\u70b9 x + n \u4ee3\u8868 x \u7684\u654c\u4eba\u96c6\u5408\u3002 \u670b\u53cb\u7684\u670b\u53cb\u662f\u670b\u53cb\uff0c\u654c\u4eba\u7684\u654c\u4eba\u662f\u670b\u53cb\uff0c\u670b\u53cb\u7684\u654c\u4eba\u662f\u654c\u4eba\uff0c\u654c\u4eba\u7684\u670b\u53cb\u662f\u654c\u4eba\u3002 \u5f53\u5408\u5e76\u4e24\u4e2a\u5143\u7d20 x \u548c y \u7684\u670b\u53cb\u5173\u7cfb\u65f6\uff0c\u9700\u8981\u540c\u65f6\u5408\u5e76 x \u7684\u670b\u53cb\u96c6\u5408\u548c y \u7684\u670b\u53cb\u96c6\u5408\uff0c\u4ee5\u53ca x \u7684\u654c\u4eba\u96c6\u5408\u548c y \u7684\u654c\u4eba\u96c6\u5408\u3002 \u5f53\u5408\u5e76\u4e24\u4e2a\u5143\u7d20 x \u548c y \u7684\u654c\u4eba\u5173\u7cfb\u65f6\uff0c\u9700\u8981\u540c\u65f6\u5408\u5e76 x \u7684\u670b\u53cb\u96c6\u5408\u548c y \u7684\u654c\u4eba\u96c6\u5408\uff0c\u4ee5\u53ca x \u7684\u654c\u4eba\u96c6\u5408\u548c y \u7684\u670b\u53cb\u96c6\u5408\u3002 \u5728\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20 x \u548c y \u7684\u5173\u7cfb\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u5b83\u4eec\u7684\u670b\u53cb\u96c6\u5408\u548c\u654c\u4eba\u96c6\u5408\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u6765\u786e\u5b9a\u5b83\u4eec\u662f\u670b\u53cb\u8fd8\u662f\u654c\u4eba\u3002  </p> <p>\u62d3\u5c55\u57df\u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u548c\u666e\u901a\u5e76\u67e5\u96c6\u76f8\u4f3c\uff0c\u53ea\u662f\u5728\u5408\u5e76\u548c\u67e5\u8be2\u65f6\u9700\u8981\u8003\u8651\u4e0d\u540c\u57df\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> \u98df\u7269\u94fe <p>\u6709\u4e09\u7c7b\u52a8\u7269 A,B,C\uff0c\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u98df\u7269\u94fe\u6784\u6210\u4e86\u6709\u8da3\u7684\u73af\u5f62\u3002A \u5403 B\uff0cB \u5403 C\uff0cC \u5403 A\u3002 \u73b0\u6709 N \u4e2a\u52a8\u7269\uff0c\u4ee5 [1,N] \u7f16\u53f7\u3002\u6bcf\u4e2a\u52a8\u7269\u90fd\u662f A,B,C \u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u5e76\u4e0d\u77e5\u9053\u5177\u4f53\u662f\u54ea\u4e00\u79cd\u3002 \u73b0\u5728\u6709 K \u6761\u4fe1\u606f\uff0c\u53ef\u80fd\u662f\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff1a</p> <ul> <li>1\\ x\\ y\uff1a\u8868\u793a x \u548c y \u662f\u540c\u7c7b</li> <li>2\\ x\\ y\uff1a\u8868\u793a x \u5403 y</li> </ul> <p>\u7531\u4e8e\u4fe1\u606f\u53ef\u80fd\u6709\u8bef\uff0c\u8981\u6c42\u8ba1\u7b97\u51fa\u5176\u4e2d\u6709\u591a\u5c11\u6761\u662f\u9519\u8bef\u7684\u3002  </p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct DSU {\n  int64_t set_count;  // \u5f53\u524d\u8fde\u901a\u5206\u91cf\u6570\u76ee\n\n  vector&lt;int64_t&gt; root;  // \u8282\u70b9\u5bf9\u5e94\u7684\u6839\u8282\u70b9\n  vector&lt;int64_t&gt; size;  // \u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u96c6\u5408\u7684\u8282\u70b9\u6570\u76ee\n\n  // \u591a\u4e00\u4e2a\u865a\u62df\u8282\u70b9\n  explicit DSU(int64_t n) : set_count(n), root(n + 1), size(n + 1, 1) {\n    iota(root.begin(), root.end(), 0);\n  }\n\n  int64_t Find(int64_t x) { return root[x] == x ? x : root[x] = Find(root[x]); }\n\n  bool Union(int64_t x, int64_t y) {\n    x = Find(x);\n    y = Find(y);\n    if (x == y) { return false; }\n    // \u6309\u79e9\u5408\u5e76\n    if (size[x] &lt; size[y]) { swap(x, y); }\n    root[y]  = x;\n    size[x] += size[y];\n    --set_count;\n    return true;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  int64_t ans = 0;\n  DSU uf(3 * n);\n  for (int64_t q = 0; q &lt; k; ++q) {\n    int64_t op, i, j;\n    cin &gt;&gt; op &gt;&gt; i &gt;&gt; j;\n    if (i &gt; n || j &gt; n || op == 2 &amp;&amp; i == j) {\n      ++ans;\n      continue;\n    }\n    // \u5c06i\u62c6\u5206\u4e3ai, i+n, i+2n\n    // i -&gt; i\u7684\u540c\u7c7b, i+n -&gt; i\u7684\u88ab\u5403\u8005, i+2n -&gt; i\u7684\u6355\u98df\u8005\n    int64_t xi = i, xi_eat = i + n, xi_pred = i + 2 * n;\n    int64_t yj = j, yj_eat = j + n, yj_pred = j + 2 * n;\n    if (op == 1) {  // i j\u662f\u540c\u7c7b\n      // \u51b2\u7a81: i\u7684\u540c\u7c7b\u662fj\u7684\u88ab\u5403\u8005\u6216\u6355\u98df\u8005\n      if (uf.Find(xi) == uf.Find(yj_eat) || uf.Find(xi) == uf.Find(yj_pred)) {\n        ++ans;\n        continue;\n      }\n      // \u5408\u5e76\u540c\u7c7b\n      uf.Union(xi, yj);\n      uf.Union(xi_eat, yj_eat);\n      uf.Union(xi_pred, yj_pred);\n    } else {  // op == 2, i \u5403 j\n      // \u51b2\u7a81: i\u7684\u540c\u7c7b\u662fj\u7684\u540c\u7c7b\u6216j\u7684\u6355\u98df\u8005\n      if (uf.Find(xi) == uf.Find(yj) || uf.Find(xi) == uf.Find(yj_pred)) {\n        ++ans;\n        continue;\n      }\n      // i\u7684\u540c\u7c7b\u662fj\u7684\u88ab\u5403\u8005, i\u7684\u88ab\u5403\u8005\u662fj\u7684\u6355\u98df\u8005, i\u7684\u6355\u98df\u8005\u662fj\u7684\u540c\u7c7b\n      uf.Union(xi, yj_eat);\n      uf.Union(xi_eat, yj_pred);\n      uf.Union(xi_pred, yj);\n    }\n  }\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/DSU/#\u5e26\u6743\u5e76\u67e5\u96c6","title":"\u5e26\u6743\u5e76\u67e5\u96c6","text":"<p>\u5e26\u6743\u5e76\u67e5\u96c6\uff08\\text{Weighted Disjoint Set Union}\uff09\u7ef4\u62a4\u7684\u662f\u5143\u7d20\u95f4\u7684\u6570\u503c\u5173\u7cfb\u3002 \u5e38\u89c1\u5f62\u5f0f\u662f\u7ef4\u62a4\u5230\u7236\u8282\u70b9\u7684\u6743\u503c weight[x]\uff0c\u4f7f\u5f97\u80fd\u901a\u8fc7\u4e0e\u7236\u8282\u70b9\u7684\u6743\u503c\u5173\u7cfb\u56de\u7b54 x \u5230 y \u7684\u6743\u503c\u5173\u7cfb\u3002 \u5982\u679c\u53ea\u5355\u72ec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u91cd, \u8003\u8651\u80fd\u5426\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u8282\u70b9,\u8ba9\u8be5\u8282\u70b9\u4e0e\u865a\u62df\u8282\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u4e3a\u8be5\u8282\u70b9\u7684\u6743\u91cd\u3002\u6ce8\u610f\u8be5\u865a\u62df\u8282\u70b9\u5e94\u8be5\u59cb\u7ec8\u4e3a\u6839\u8282\u70b9\u3002  </p> <p> \\text{Find}\u64cd\u4f5c\u9700\u8981\u540c\u65f6\u66f4\u65b0\u6743\u503c\u4fe1\u606f\uff0c\\text{Union}\u64cd\u4f5c\u9700\u8981\u8c03\u6574\u6743\u503c\u4ee5\u4fdd\u6301\u5173\u7cfb\u6b63\u786e\u3002  </p> <ol> <li>\\text{Find}: \u5728\u67e5\u627e\u6839\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u539f\u6765\u7684\u7236\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u5173\u7cfb\u66f4\u65b0\u8def\u5f84\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5176\u76f4\u63a5\u6307\u5411\u6839\u8282\u70b9  </li> <li> <p>\\text{Union}: \u5728\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\uff0c\u8c03\u6574\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u7684\u6743\u503c\uff0c\u4ee5\u4fdd\u6301\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u7684\u6570\u503c\u5173\u7cfb(1)</p> <ol> <li>\u5047\u8bbeweight[y] \u662f y \u5230 root_y \u7684\u6743\u91cd, weight[x] \u662f x \u5230 root_x \u7684\u6743\u91cd\uff0cvalue \u662f x \u5230 y \u7684\u6743\u91cd\uff0c\u5728\u8ddd\u79bb\u6743\u91cd\u7684\u610f\u4e49\u4e0b\uff1aroot_x \u5230 root_y (root_x \\rightarrow x \\rightarrow y \\rightarrow root_y)\u7684\u6743\u91cd\u4e3a: -weight[x] + value + weight[y] </li> </ol> </li> </ol> \u63a8\u5bfc\u90e8\u5206\u548c <p>\u7ed9\u5b9a M \u6761\u4fe1\u606f\uff0c\u6bcf\u6761\u4fe1\u606f\u5305\u542b l, r, s\uff0c\u8868\u793a\u533a\u95f4 [l, r] \u7684\u548c\u4e3a s\u3002 \u73b0\u5728\u6709 Q \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5305\u542b l, r\uff0c\u8be2\u95ee\u533a\u95f4 [l, r] \u7684\u548c\u3002 \u5982\u679c\u65e0\u6cd5\u786e\u5b9a\u533a\u95f4\u548c\uff0c\u8f93\u51fa \"UNKNOWN\"\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct weighted_DSU {\n  int64_t set_count;  // \u5f53\u524d\u8fde\u901a\u5206\u91cf\u6570\u76ee\n\n  vector&lt;int64_t&gt; root;    // \u8282\u70b9\u5bf9\u5e94\u7684\u6839\u8282\u70b9\n  vector&lt;int64_t&gt; weight;  // \u76f8\u5bf9\u4e8e\u7236\u8282\u70b9\u7684\u6743\u503c\n\n  explicit weighted_DSU(int64_t n) : set_count(n), root(n + 1), weight(n + 1, 0) {\n    iota(root.begin(), root.end(), 0);\n  }\n\n  // \u8def\u5f84\u538b\u7f29, \u4fee\u6b63\u5230\u6839\u8282\u70b9\u7684\u6743\u91cd\n  int64_t Find(int64_t x) {\n    // \u9012\u5f52\u5bfb\u627e\u6839\u8282\u70b9\uff0c\u66f4\u65b0\u8be5\u70b9\u5230\u6839\u7684\u6743\u91cd\n    if (x != root[x]) {\n      int64_t origin_root = root[x];\n      root[x]             = Find(root[x]);\n      // \u7236\u8282\u70b9\u7684\u6743\u91cd\u5df2\u7ecf\u66f4\u65b0\u4e3a\u5230\u6839\u8282\u70b9\u7684\u6743\u91cd, \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u6743\u91cd\n      weight[x] += weight[origin_root];\n    }\n    return root[x];\n  }\n\n  // value\u8868\u793ax\u5230y\u7684\u6743\u91cd\n  bool Union(int64_t x, int64_t y, int64_t value) {\n    int64_t root_x = Find(x), root_y = Find(y);\n    if (root_x == root_y) { return false; }\n    root[root_x] = root_y;\n    --set_count;\n    // \u66f4\u65b0root_x\u5230root_y\u7684\u6743\u91cd\n    weight[root_x] = weight[y] - weight[x] + value;\n    return true;\n  }\n\n  int64_t Query(int64_t x, int64_t y) {\n    int64_t root_x = Find(x);\n    int64_t root_y = Find(y);\n    // \u5982\u679c\u4e24\u4e2a\u503c\u6709\u5171\u540c\u7684\u6839\u4e5f\u5c31\u662f\u53ef\u4ee5\u8ba1\u7b97\uff0c\u5219\u7b97\u7ed3\u679c\n    if (root_x == root_y) { return weight[x] - weight[y]; }\n    return -1;  // \u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m, q;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n  n += 1;  // \u6269\u5c55\u70b9\u5230 n + 1 (1)\n  weighted_DSU wuf(n);\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t l, r, s;\n    cin &gt;&gt; l &gt;&gt; r &gt;&gt; s;\n    wuf.Union(l, r + 1, s);\n  }\n  for (int64_t i = 0; i &lt; q; i++) {\n    int64_t l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    int64_t ans = wuf.Query(l, r + 1);\n    if (ans == -1) {\n      cout &lt;&lt; \"UNKNOWN\\n\";\n    } else {\n      cout &lt;&lt; ans &lt;&lt; \"\\n\";\n    }\n  }\n  return 0;\n}\n</code></pre> <ol> <li> <p>Tip</p> \u4e60\u60ef\u5c06\u533a\u95f4\u8ddd\u79bb [l,r] \u8868\u793a\u4e3a\u70b9 l \u5230\u70b9 r+1 \u7684\u8ddd\u79bb\u4f8b\u5982\u533a\u95f4 [1,3] \u7684\u957f\u5ea6\u4e3a 5, \u5219\u8868\u793a\u70b9 1 \u5230\u70b9 4 \u7684\u8ddd\u79bb\u4e3a 5 </li> </ol> <p>\u5e26\u6743\u5e76\u67e5\u96c6\u4e5f\u80fd\u5904\u7406\u5206\u7c7b\u95ee\u9898\uff08\u6269\u5c55\u57df\uff09\uff0c\u53ea\u9700\u5c06\u6743\u503c\u5b9a\u4e49\u4e3a\u7c7b\u522b\u5173\u7cfb\u5373\u53ef\u3002</p> \u98df\u7269\u94fe(\u5e26\u6743\u5e76\u67e5\u96c6\u89e3\u6cd5) C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct weighted_DSU {\n  int64_t set_count;  // \u5f53\u524d\u8fde\u901a\u5206\u91cf\u6570\u76ee\n\n  vector&lt;int64_t&gt; root;    // \u8282\u70b9\u5bf9\u5e94\u7684\u6839\u8282\u70b9\n  vector&lt;int64_t&gt; weight;  // \u5f53\u524d\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u6743\u503c\n\n  explicit weighted_DSU(int64_t n) : set_count(n), root(n + 1), weight(n + 1) {\n    iota(root.begin(), root.end(), 0);\n  }\n\n  int64_t Find(int64_t x) {\n    if (x != root[x]) {\n      int64_t origin_root = root[x];\n      root[x]             = Find(root[x]);\n      // \u4e09\u79cd\u5173\u7cfb: 0-\u540c\u7c7b, 1-\u5403, 2-\u88ab\u5403\n      weight[x] = (weight[x] + weight[origin_root]) % 3;\n    }\n    return root[x];\n  }\n\n  // value\u8868\u793ax\u5230y\u7684\u6743\u91cd, 0-\u540c\u7c7b, 1-\u5403, \u88ab\u5403\u5173\u7cfb\u9690\u542b\u4e3a2\n  bool Union(int64_t x, int64_t y, int64_t value) {\n    int64_t root_x = Find(x), root_y = Find(y);\n    if (root_x == root_y) { return false; }\n    // \u5408\u5e76x\u6240\u5728\u96c6\u5408\u5230y\u6240\u5728\u96c6\u5408\n    root[root_x] = root_y;\n    --set_count;\n    // \u66f4\u65b0root_x\u5230root_y\u7684\u6743\u91cd\n    weight[root_x] = (weight[y] - weight[x] + value + 3) % 3;\n    return true;\n  }\n\n  int64_t Query(int op, int64_t x, int64_t y) {\n    int64_t root_x = Find(x);\n    int64_t root_y = Find(y);\n    // \u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n    if (root_x != root_y) { return 1; }\n    // x y \u662f\u540c\u7c7b, \u6743\u91cd\u76f8\u540c\n    if (op == 1) { return weight[x] == weight[y] ? 1 : -1; }\n    // x \u5403 y, \u6743\u91cd\u5dee\u4e3a1\n    if (op == 2) { return (weight[x] - weight[y] + 3) % 3 == 1 ? 1 : -1; }\n    return 1;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  int64_t ans = 0;\n  weighted_DSU wuf(n);\n  for (int64_t q = 0; q &lt; k; ++q) {\n    int64_t op, i, j;\n    cin &gt;&gt; op &gt;&gt; i &gt;&gt; j;\n    if (i &gt; n || j &gt; n || op == 2 &amp;&amp; i == j) {\n      ++ans;\n      continue;\n    }\n    int64_t res = wuf.Query(op, i, j);\n    if (res == -1) {\n      ++ans;\n    } else {\n      wuf.Union(i, j, op - 1);\n    }\n  }\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/DSU/#\u53ef\u64a4\u9500\u5e76\u67e5\u96c6","title":"\u53ef\u64a4\u9500\u5e76\u67e5\u96c6","text":"<p>\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff08\\text{Rollback Union-Find}\uff09\u662f\u5728\u666e\u901a\u5e76\u67e5\u96c6\uff08\\text{Union-Find / DSU}\uff09\u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e86\u64a4\u9500\uff08undo\uff09\u6700\u8fd1\u4e00\u6b21\u5408\u5e76\u64cd\u4f5c\u7684\u80fd\u529b\u3002</p> <p>\u5728\u5b9e\u73b0\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u4e00\u4e2a\u6808\u6765\u8bb0\u5f55\u6bcf\u6b21\u5408\u5e76\u64cd\u4f5c\u7684\u72b6\u6001\u53d8\u5316\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u64a4\u9500\u65f6\u80fd\u591f\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002\u5e76\u4e14\u53ea\u8fdb\u884c\u6309\u79e9\u5408\u5e76\uff0c\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u4ee5\u4fbf\u4e8e\u64a4\u9500\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002</p> Ball Collector <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 N \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a 1 \u5230 N\u3002\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e24\u4e2a\u7403\uff0c\u6bcf\u4e2a\u7403\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\u3002\u4ece\u8282\u70b9 1 \u5230\u8282\u70b9 i \u7684\u8def\u5f84\u4e0a\uff0c\u6bcf\u4e2a\u70b9\u53ea\u80fd\u6536\u96c6\u4e00\u4e2a\u7403\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u80fd\u6536\u96c6\u5230\u7684\u4e0d\u540c\u7f16\u53f7\u7403\u7684\u6700\u5927\u6570\u91cf\u3002</p> Hint <p>\u6bcf\u4e2a\u7403\u7684\u7f16\u53f7\u53ef\u4ee5\u770b\u4f5c\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u6811\u8282\u70b9\u63d0\u4f9b\u4e86\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9\u7684\u8fb9\u3002\u8bbe\u8fd9\u4e2a\u8fde\u901a\u5757\u5305\u542b\u7684\u8282\u70b9\u6570\u4e3a s\uff0c\u8fb9\u6570\u4e3a e\uff0c\u5982\u679c e \\lt s\uff0c\u8bf4\u660e\u8fd9\u4e2a\u8fde\u901a\u5757\u4ecd\u7136\u662f\u6811\u6216\u8005\u68ee\u6797\uff0c\u65b0\u52a0\u4e00\u6761\u8fb9\u53ef\u4ee5\u591a\u6536\u96c6\u4e00\u4e2a\u4e0d\u540c\u7f16\u53f7\u7684\u7403\uff1b\u5982\u679c e \\geq s\uff0c\u8bf4\u660e\u8fd9\u4e2a\u8fde\u901a\u5757\u5df2\u7ecf\u5f62\u6210\u73af\u8def\uff0c\u65b0\u52a0\u4e00\u6761\u8fb9\u4e0d\u80fd\u589e\u52a0\u4e0d\u540c\u7f16\u53f7\u7403\u7684\u6570\u91cf\u3002</p> <p>\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6765\u5904\u7406\u3002\u5728\u8fdb\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5408\u5e76\u8def\u5f84\u4e0a\u7684\u7403\u7f16\u53f7\u96c6\u5408\uff1b\u5728\u79bb\u5f00\u8282\u70b9\u65f6\uff0c\u64a4\u9500\u5408\u5e76\u64cd\u4f5c\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n;\n  cin &gt;&gt; n;\n  vector&lt;pair&lt;int64_t, int64_t&gt;&gt; balls(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; balls[i].first &gt;&gt; balls[i].second; }\n  vector&lt;vector&lt;int64_t&gt;&gt; tree(n + 1);\n  for (int64_t i = 1; i &lt; n; i++) {\n    int64_t u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    tree[u].emplace_back(v);\n    tree[v].emplace_back(u);\n  }\n\n  vector&lt;int64_t&gt; root(n + 1, 0);\n  iota(root.begin(), root.end(), 0);\n  vector&lt;int64_t&gt; size(n + 1, 1);        // \u8bb0\u5f55\u6bcf\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\n  vector&lt;int64_t&gt; edge_count(n + 1, 0);  // \u8bb0\u5f55\u6bcf\u4e2a\u96c6\u5408\u4e2d\u7684\u8fb9\u6570\n  vector&lt;pair&lt;int64_t, int64_t&gt;&gt; rollback;\n\n  auto find = [&amp;](int64_t x) {\n    while (root[x] != x) { x = root[x]; }\n    return x;\n  };\n\n  auto union_set = [&amp;](int64_t x, int64_t y) {\n    int64_t fx = find(x);\n    int64_t fy = find(y);\n    if (fx == fy) { return; }\n    if (size[fx] &lt; size[fy]) { swap(fx, fy); }\n    root[fy]        = fx;\n    size[fx]       += size[fy];\n    edge_count[fx] += edge_count[fy] + 1;\n    rollback.emplace_back(fy, fx);\n  };\n\n  auto union_rollback = [&amp;]() {\n    if (rollback.empty()) { return; }\n    auto [fy, fx] = rollback.back();\n    rollback.pop_back();\n    root[fy]        = fy;\n    size[fx]       -= size[fy];\n    edge_count[fx] -= edge_count[fy] + 1;\n  };\n\n  int64_t count = 0;\n  vector&lt;int64_t&gt; answer(n + 1, 0);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    int64_t fx = find(balls[u].first);\n    int64_t fy = find(balls[u].second);\n    bool added = false, merged = false;\n    if (fx == fy) {  // \u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408\u4e2d\n      if (edge_count[fx] &lt; size[fx]) {\n        count++;  // \u96c6\u5408\u4e2d\u8fb9\u6570\u5c0f\u4e8e\u8282\u70b9\u6570\uff0c\u53ef\u4ee5\u591a\u9009\u4e00\u79cd\u7403\n        added = true;\n      }\n      edge_count[fx]++;\n    } else {  // \u4e0d\u5728\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u5408\u5e76\n      if (edge_count[fx] &lt; size[fx] || edge_count[fy] &lt; size[fy]) {\n        count++;  // \u4efb\u4e00\u96c6\u5408\u4e2d\u8fb9\u6570\u5c0f\u4e8e\u8282\u70b9\u6570\uff0c\u53ef\u4ee5\u591a\u9009\u4e00\u79cd\u7403\n        added = true;\n      }\n      union_set(fx, fy);\n      merged = true;\n    }\n    answer[u] = count;\n    for (auto &amp;v : tree[u]) {\n      if (v == from) { continue; }\n      self(self, v, u);\n    }\n    // \u56de\u6eda\n    if (added) { count--; }\n    if (merged) {\n      union_rollback();\n    } else {\n      edge_count[fx]--;\n    }\n  };\n  dfs(dfs, 1, -1);\n\n  for (int64_t i = 2; i &lt;= n; i++) { cout &lt;&lt; answer[i] &lt;&lt; \" \"; }\n  cout &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> <p>Tip</p> <p>\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u4ee5\u4fbf\u4e8e\u64a4\u9500\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002</p> <p>\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u914d\u5408\u5206\u6cbb\u3001\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5904\u7406\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u3002</p>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5e76\u67e5\u96c6","Union Find","Disjoint Set Union","DSU"]},{"location":"code/algorithm/DS/MonotoneStack/","title":"\u5355\u8c03\u6808","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5355\u8c03\u6808","Monotone Stack"]},{"location":"code/algorithm/DS/MonotoneStack/#\u5355\u8c03\u6808","title":"\u5355\u8c03\u6808","text":"<p>\u5355\u8c03\u6808\uff08\\text{Monotone Stack}\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e0e\u6570\u7ec4\u6216\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u76f8\u5173\u7684\u95ee\u9898\u3002\u5355\u8c03\u6808\u901a\u8fc7\u7ef4\u62a4\u6808\u5185\u5143\u7d20\u7684\u5355\u8c03\u6027\uff08\u9012\u589e\u6216\u9012\u51cf\uff09\u6765\u9ad8\u6548\u5730\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\uff0c\u5e38\u89c1\u5e94\u7528\u5305\u62ec\u5bfb\u627e\u4e0b\u4e00\u4e2a\u66f4\u5927\u6216\u66f4\u5c0f\u7684\u5143\u7d20\u3001\u8ba1\u7b97\u76f4\u65b9\u56fe\u4e2d\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\u7b49\u3002</p> <p>\u5355\u8c03\u6808\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a</p> <ol> <li>\u5f3a\u5e8f\u5355\u8c03\u6808\uff1a\u6808\u5185\u5143\u7d20\u4e25\u683c\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf</li> <li>\u5f31\u5e8f\u5355\u8c03\u6808\uff1a\u6808\u5185\u5143\u7d20\u5355\u8c03\u4e0d\u589e\u6216\u4e0d\u51cf</li> </ol> <p>\u6700\u5e38\u7528\u7684\u5355\u8c03\u6808\u7c7b\u578b\u662f\u5f3a\u5e8f\u5355\u8c03\u6808\u3002\u6839\u636e\u5177\u4f53\u9700\u6c42\uff0c\u53ef\u4ee5\u9009\u62e9\u9002\u5408\u7684\u5355\u8c03\u6808\u7c7b\u578b\u6765\u89e3\u51b3\u95ee\u9898\u3002</p> \u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 temperatures\uff0c\u8868\u793a\u6bcf\u5929\u7684\u6e29\u5ea6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 answer\uff0c\u5176\u4e2d answer[i] \u662f\u6307\u5728\u7b2c i \u5929\u4e4b\u540e\uff0c\u624d\u4f1a\u6709\u66f4\u9ad8\u7684\u6e29\u5ea6\u3002\u5982\u679c\u4e4b\u540e\u6ca1\u6709\u66f4\u9ad8\u7684\u6e29\u5ea6\uff0c\u5219\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002</p> C++<pre><code>vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt; &amp;temperatures) {\n  int n = temperatures.size();\n  vector&lt;int&gt; answer(n, 0);\n  stack&lt;int&gt; st;  // \u5355\u8c03\u6808\uff0c\u5b58\u4e0b\u6807\n  for (int i = 0; i &lt; n; ++i) {\n    // \u5f39\u51fa\u6240\u6709\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u5143\u7d20, \u5e76\u4e14\u66f4\u65b0\u5b83\u4eec\u7684\u7b54\u6848\n    while (!st.empty() &amp;&amp; temperatures[i] &gt; temperatures[st.top()]) {\n      answer[st.top()] = i - st.top();\n      st.pop();\n    }\n    st.push(i);\n  }\n  // \u6e05\u7b97\u6808\uff0c\u6b64\u5904\u53ef\u7701\u7565\uff0c\u56e0\u4e3a\u7b54\u6848\u6570\u7ec4\u5df2\u521d\u59cb\u5316\u4e3a 0\n  // while (!st.empty()) {\n  //   answer[st.top()] = 0;\n  //   st.pop();\n  // }\n  return answer;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5355\u8c03\u6808","Monotone Stack"]},{"location":"code/algorithm/DS/MonotoneStack/#\u5de6\u5f31\u53f3\u5f3a\u5355\u8c03\u6808","title":"\u5de6\u5f31\u53f3\u5f3a\u5355\u8c03\u6808","text":"<p>\u5728\u5de6\u5f31\u53f3\u5f3a\u5355\u8c03\u6808\u4e2d\uff0c\u6808\u5185\u5143\u7d20\u4ece\u6808\u5e95\u5230\u6808\u9876\u662f\u5355\u8c03\u4e0d\u589e\u7684\uff08\u5373\u5de6\u4fa7\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u4fa7\u5143\u7d20\uff09\u3002\u8fd9\u79cd\u7ed3\u6784\u9002\u7528\u4e8e\u9700\u8981\u5bfb\u627e\u6bcf\u4e2a\u5143\u7d20\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20\u548c\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u95ee\u9898\u3002  </p> \u5bfb\u627e\u6bcf\u4e2a\u5143\u7d20\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20\u548c\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20 C++<pre><code>void MonotoneStack(vector&lt;int64_t&gt; &amp;nums) {\n  int n = nums.size();\n  vector&lt;int&gt; left(n, -1);  // \u521d\u59cb\u5316, \u540e\u5e8f\u65e0\u9700\u6e05\u7b97\u6808\n  vector&lt;int&gt; right(n, n);\n  stack&lt;int&gt; st;  // \u5355\u8c03\u6808\uff0c\u5b58\u4e0b\u6807\n  for (int i = 0; i &lt; n; ++i) {\n    // \u53f3\u8fb9\u5f3a\u5e8f\uff1a\u5f39\u51fa\u6240\u6709\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u5143\u7d20, \u5e76\u4e14\u66f4\u65b0\u5b83\u4eec\u7684\u53f3\u8fb9\u754c\n    while (!st.empty() &amp;&amp; nums[i] &lt; nums[st.top()]) {\n      right[st.top()] = i;\n      st.pop();\n    }\n    // \u5de6\u8fb9\u5f31\u5e8f\uff1a\u6808\u9876\u53ef\u80fd\u662f\u76f8\u7b49\u5143\u7d20\n    if (!st.empty()) { left[i] = st.top(); }\n    st.push(i);\n  }\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5355\u8c03\u6808","Monotone Stack"]},{"location":"code/algorithm/DS/MonotoneStack/#\u5f3a\u5e8f\u5355\u8c03\u6808","title":"\u5f3a\u5e8f\u5355\u8c03\u6808","text":"<p>\u5728\u5f3a\u5e8f\u5355\u8c03\u6808\u4e2d\uff0c\u6808\u5185\u5143\u7d20\u4ece\u6808\u5e95\u5230\u6808\u9876\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\uff08\u5373\u5de6\u4fa7\u5143\u7d20\u5c0f\u4e8e\u53f3\u4fa7\u5143\u7d20\uff09\u3002\u8fd9\u79cd\u7ed3\u6784\u9002\u7528\u4e8e\u9700\u8981\u5bfb\u627e\u6bcf\u4e2a\u5143\u7d20\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u548c\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u95ee\u9898\u3002  </p> \u5bfb\u627e\u6bcf\u4e2a\u5143\u7d20\u5de6\u53f3\u4e24\u4fa7\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20 <p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u503c\u7684\u6570\u7ec4 arr\uff0c\u627e\u5230\u6bcf\u4e00\u4e2a i \u4f4d\u7f6e\u5de6\u8fb9\u548c\u53f3\u8fb9\u79bb i \u4f4d\u7f6e\u6700\u8fd1\u4e14\u503c\u6bd4 arr[i] \u5c0f\u7684\u4f4d\u7f6e\u3002\u8fd4\u56de\u6240\u6709\u4f4d\u7f6e\u76f8\u5e94\u7684\u4fe1\u606f\u3002</p> \u5355\u8c03\u6808\u4fee\u6b63\u53cc\u6808\u6cd5 <p>\u5de6\u5f31\u53f3\u5f3a\u5355\u8c03\u6808\u53ef\u4ee5\u6b63\u786e\u5904\u7406\u53f3\u4fa7\u8fb9\u754c\uff0c\u4f46\u5de6\u4fa7\u8fb9\u754c\u65e0\u6cd5\u5904\u7406\u91cd\u590d\u5143\u7d20\uff0c\u9700\u8981\u5728\u4e3b\u5faa\u73af\u540e\u5bf9 left \u6570\u7ec4\u8fdb\u884c\u4fee\u6b63\uff0c\u8df3\u8fc7\u6240\u6709\u4e0e\u5f53\u524d\u5143\u7d20\u76f8\u7b49\u7684\u5143\u7d20\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  int64_t ans = 0;\n  vector&lt;int&gt; left(n, -1);\n  vector&lt;int&gt; right(n, -1);\n  stack&lt;int&gt; st;  // \u5355\u8c03\u6808\uff0c\u6808\u9876\u5143\u7d20\u662f\u6700\u5c0f\u7684\n  for (int i = 0; i &lt; n; ++i) {\n    // \u8bb0\u5f55\u53f3\u8fb9\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n    while (!st.empty() &amp;&amp; nums[i] &lt; nums[st.top()]) {\n      right[st.top()] = i;\n      st.pop();\n    }\n    // \u8bb0\u5f55\u5de6\u8fb9\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n    if (!st.empty()) { left[i] = st.top(); }\n    st.push(i);\n  }\n  // \u4e3b\u5faa\u73af\u540e\u4fee\u6b63 left\n  for (int i = 0; i &lt; n; ++i) {\n    int p = left[i];\n    // \u4fee\u6b63 left\uff0c\u8df3\u8fc7\u6240\u6709\u76f8\u7b49\u5143\u7d20\uff0c\u4fdd\u8bc1 left[i] \u548c nums[i] \u662f\u4e25\u683c\u5355\u8c03\u7684\n    while (p != -1 &amp;&amp; nums[p] == nums[i]) { p = left[p]; }\n    left[i] = p;\n  }\n  for (int i = 0; i &lt; n; ++i) { cout &lt;&lt; left[i] &lt;&lt; \" \" &lt;&lt; right[i] &lt;&lt; \"\\n\"; }\n}\n</code></pre> <p>\u53cc\u6808\u6cd5\u4f7f\u7528\u4e24\u4e2a\u5355\u8c03\u6808\u5206\u522b\u5904\u7406\u5de6\u4fa7\u548c\u53f3\u4fa7\u7684\u8fb9\u754c\u95ee\u9898\uff0c\u907f\u514d\u4e86\u5de6\u5f31\u53f3\u5f3a\u5355\u8c03\u6808\u4e2d\u5de6\u4fa7\u8fb9\u754c\u4fee\u6b63\u7684\u590d\u6742\u6027\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  int64_t ans = 0;\n  vector&lt;int&gt; left(n, -1);\n  vector&lt;int&gt; right(n, -1);\n  stack&lt;int&gt; st1;  // \u5904\u7406\u5de6\u8fb9\u754c\n  stack&lt;int&gt; st2;  // \u5904\u7406\u53f3\u8fb9\u754c\n  for (int i = 0; i &lt; n; ++i) {\n    // \u5904\u7406\u53f3\u8fb9\u754c: \u6808\u4e2d\u5143\u7d20\u975e\u51cf\u5e8f, \u5373\u53ef\u80fd\u5b58\u5728\u76f8\u7b49\u5143\u7d20\n    while (!st2.empty() &amp;&amp; nums[i] &lt; nums[st2.top()]) {\n      right[st2.top()] = i;\n      st2.pop();\n    }\n    st2.push(i);\n    // \u5904\u7406\u5de6\u8fb9\u754c: \u6808\u4e2d\u5143\u7d20\u4e25\u683c\u5355\u8c03\u9012\u589e\n    while (!st1.empty() &amp;&amp; nums[i] &lt;= nums[st1.top()]) { st1.pop(); }\n    if (!st1.empty()) { left[i] = st1.top(); }\n    st1.push(i);\n  }\n  for (int i = 0; i &lt; n; ++i) { cout &lt;&lt; left[i] &lt;&lt; \" \" &lt;&lt; right[i] &lt;&lt; \"\\n\"; }\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","\u5355\u8c03\u6808","Monotone Stack"]},{"location":"code/algorithm/DS/ST/","title":"ST\u8868","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","ST\u8868","Sparse Table","\u500d\u589e"]},{"location":"code/algorithm/DS/ST/#st\u8868","title":"ST\u8868","text":"<p>ST \u8868\uff08\\text{Sparse Table}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u9759\u6001\u6570\u7ec4\u4e0a\u9ad8\u6548\u5904\u7406\u533a\u95f4\u67e5\u8be2\u7684\u7b97\u6cd5\u6570\u636e\u7ed3\u6784\u3002 ST \u8868\u9002\u7528\u4e8e\u5e42\u7b49\uff08\\text{idempotent}\uff09\u64cd\u4f5c\uff0c\u800c\u533a\u95f4\u548c\uff08sum\uff09\u7b49\u975e\u5e42\u7b49\u64cd\u4f5c\u5219\u4e0d\u9002\u7528\u3002 ST \u8868\u7684\u6838\u5fc3\u601d\u60f3\u662f\u9884\u5904\u7406\u6570\u7ec4\u7684\u591a\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u4efb\u4f55\u67e5\u8be2\u90fd\u53ef\u4ee5\u901a\u8fc7\u5408\u5e76\u9884\u5904\u7406\u7684\u533a\u95f4\u6765\u5feb\u901f\u5f97\u5230\u7ed3\u679c\u3002 ST \u8868\u662f\u4e00\u79cd\u5178\u578b\u7684\u500d\u589e\uff08\\text{Doubling}\uff09\u6280\u672f\u5e94\u7528\u3002  </p> <p>\u5e94\u7528\u573a\u666f</p> <ul> <li>\u533a\u95f4\u6700\u503c\u67e5\u8be2\uff08\\text{Range Minimum/Maximum Query}\uff09</li> <li>\u533a\u95f4\u6700\u5927\u516c\u7ea6\u6570\u67e5\u8be2\uff08\\text{Range GCD Query}\uff09</li> <li>\u5176\u4ed6\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u5e42\u7b49\u64cd\u4f5c\uff08\u5982 \\min\u3001\\max\u3001\\gcd\u3001\\text{bitwise\\_and}\u3001\\text{bitwise\\_or} \u7b49\uff09</li> </ul> <p>ST \u8868\u6a21\u677f</p> C++<pre><code>struct ST {\n  int n, m;\n\n  vector&lt;int&gt; log2;  // floor(log2(i)), \u4e5f\u53ef\u4ee5\u7528 31 - __builtin_clz(i)\n  vector&lt;vector&lt;int&gt;&gt; st;\n  std::function&lt;int(int, int)&gt; func;  // \u7ed3\u5408\u5f8b\u8fd0\u7b97\u51fd\u6570, \u5982 min, max, gcd\n\n  ST(const vector&lt;int&gt; &amp;nums, const std::function&lt;int(int, int)&gt; &amp;f)\n      : n(nums.size()), log2(n + 1), func(f) {\n    for (int i = 2; i &lt;= n; i++) { log2[i] = log2[i / 2] + 1; }\n    m = log2[n] + 1;  // m = log2[n] + 1 = 32 - __builtin_clz(n) (1)\n    st = vector&lt;vector&lt;int&gt;&gt;(n, vector&lt;int&gt;(m));\n    // \u9884\u5904\u7406 ST \u8868, O(nlogn)\n    for (int i = 0; i &lt; n; i++) { st[i][0] = nums[i]; }\n    for (int j = 1; j &lt; m; j++) {\n      for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt; n; i++) {  // \u786e\u4fdd\u533a\u95f4\u53f3\u7aef\u70b9\u4e0d\u4f1a\u8d8a\u754c (2) (3)\n        st[i][j] = func(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]);\n      }\n    }\n  }\n\n  // \u67e5\u8be2\u533a\u95f4 [l, r] \u7684\u503c\uff0c0 &lt;= l &lt;= r &lt; n (4)\n  int query(int l, int r) {\n    int j = log2[r - l + 1];  // \u8ba1\u7b97\u4e0d\u8d85\u8fc7\u533a\u95f4\u957f\u5ea6\u7684\u6700\u59272\u7684\u5e42\u6b21 (5)\n    return func(st[l][j], st[r - (1 &lt;&lt; j) + 1][j]);\n  }\n};\n</code></pre> <ol> <li>\u9700\u8981\u7684\u5217\u6570 m \u7531 n \u51b3\u5b9a\uff0c\u6700\u591a\u9700\u8981 \\lfloor log_{2}(n) \\rfloor + 1 \u5217 \uff1a 2^m = 2^{\\lfloor log_{2}(n) \\rfloor + 1} &gt; n</li> <li>\u6574\u4e2a\u533a\u95f4 [i, i + 2^{j} - 1] \u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u5b50\u533a\u95f4: [i, i + 2^{j - 1}) \u548c [i + 2^{j - 1}, i + 2^{j})     \u8fd9\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u5747\u4e3a 2^{j - 1}</li> <li>\u53e6\u4e00\u79cd\u5e38\u89c1\u5904\u7406\u65b9\u6cd5\uff0c\u6839\u636e\u524d\u8fdb 2^{j-1} \u6b65\u518d\u524d\u8fdb 2^{j-1} \u6b65\u6765\u5408\u5e76, \u89c1LCA <code>for (int i = 0; i &lt; n; i++) { st[i][j] = st[st[i][j - 1]][j - 1]; }</code></li> <li>\u533a\u95f4 [l, r] \u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u5b50\u533a\u95f4: [l, l + 2^{j} - 1] \u548c [r - 2^{j} + 1, r]     \u8fd9\u4e24\u4e2a\u5b50\u533a\u95f4\u8986\u76d6\u4e86\u6574\u4e2a\u533a\u95f4 [l, r] \uff08\u53ef\u80fd\u91cd\u53e0\uff0c\u4f46\u662f\u5e42\u7b49\u6027\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff09\uff0c\u5e76\u4e14\u957f\u5ea6\u5747\u4e3a 2^{j}\u3002  </li> <li>\u4e5f\u53ef\u4ee5\u7528 j = 31 - __builtin_clz(r - l + 1);</li> </ol> Balanced Lineup G <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217 a_1, a_2, \\ldots, a_n\uff0c\u4ee5\u53ca m \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u8981\u6c42\u4f60\u5728\u5b50\u5e8f\u5217 a_l, a_{l+1}, \\ldots, a_r \u4e2d\u627e\u5230\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u503c\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct ST {\n  int n, m;\n  vector&lt;vector&lt;int&gt;&gt; st_max;\n  vector&lt;vector&lt;int&gt;&gt; st_min;\n\n  explicit ST(const vector&lt;int&gt; &amp;nums)\n      : n(nums.size()),\n        m(32 - __builtin_clz(n + 1)),\n        st_max(n + 1, vector&lt;int&gt;(m)),\n        st_min(n + 1, vector&lt;int&gt;(m)) {\n    // \u9884\u5904\u7406 ST \u8868, O(nlogn)\n    for (int i = 1; i &lt;= n; i++) {\n      st_max[i][0] = nums[i - 1];\n      st_min[i][0] = nums[i - 1];\n    }\n    for (int j = 1; j &lt; m; j++) {\n      for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; i++) {  // \u786e\u4fdd\u4e0d\u4f1a\u8d8a\u754c\n        st_max[i][j] = max(st_max[i][j - 1], st_max[i + (1 &lt;&lt; (j - 1))][j - 1]);\n        st_min[i][j] = min(st_min[i][j - 1], st_min[i + (1 &lt;&lt; (j - 1))][j - 1]);\n      }\n    }\n  }\n\n  int query(int l, int r) {\n    int j = 32 - __builtin_clz(r - l + 1) - 1;  // \u8ba1\u7b97\u4e0d\u8d85\u8fc7\u533a\u95f4\u957f\u5ea6\u7684\u6700\u59272\u7684\u5e42\u6b21\n    return max(st_max[l][j], st_max[r - (1 &lt;&lt; j) + 1][j])\n         - min(st_min[l][j], st_min[r - (1 &lt;&lt; j) + 1][j]);\n  }\n};\n\nint main() {\n  int n, q;\n  cin &gt;&gt; n &gt;&gt; q;\n  vector&lt;int&gt; nums(n);\n  for (int i = 0; i &lt; n; i++) { cin &gt;&gt; nums[i]; }\n  ST st(nums);\n  while ((q--) != 0) {\n    int l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    cout &lt;&lt; st.query(l, r) &lt;&lt; '\\n';\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","ST\u8868","Sparse Table","\u500d\u589e"]},{"location":"code/algorithm/DS/SegmentTree/","title":"\u7ebf\u6bb5\u6811","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u7ebf\u6bb5\u6811","title":"\u7ebf\u6bb5\u6811","text":"<p>\u7ebf\u6bb5\u6811\uff08\\text{Segment Tree}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u9ad8\u6548\u5904\u7406\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u66f4\u65b0\u7684\u6811\u5f62\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5c06\u4e00\u4e2a\u6570\u7ec4\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u5e76\u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d\u5b58\u50a8\u8fd9\u4e9b\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u652f\u6301\u5feb\u901f\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\u3002</p>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u57fa\u672c\u64cd\u4f5c","title":"\u57fa\u672c\u64cd\u4f5c","text":"<p>\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u5305\u62ec\uff1a</p> <ol> <li>\u5355\u70b9\u4fee\u6539</li> <li>\u533a\u95f4\u52a0\u6cd5</li> <li>\u533a\u95f4\u8d4b\u503c</li> <li>\u533a\u95f4\u6c42\u548c</li> </ol> <p>\u5176\u4e2d\u533a\u95f4\u64cd\u4f5c\u901a\u5e38\u4f7f\u7528\u61d2\u6807\u8bb0\uff08\\text{Lazy Propagation}\uff09\u6765\u4f18\u5316\u6027\u80fd\u3002</p>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u533a\u95f4\u52a0\u6cd5\u4e0e\u533a\u95f4\u6c42\u548c","title":"\u533a\u95f4\u52a0\u6cd5\u4e0e\u533a\u95f4\u6c42\u548c","text":"\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 <p>\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u52a0\u6cd5\u4e0e\u533a\u95f4\u6c42\u548c</p> <p></p>C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {       // (1)!\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c (2)\n  vector&lt;int64_t&gt; tag_add;  // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n\n  explicit segment_tree(int64_t n) : sum(n * 4), tag_add(n * 4) {}\n\n  void push_up(int64_t i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }  // (3)!\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      sum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  // \u5355\u70b9\u4fee\u6539: point_set(x, val, 1, 1, n) \u5c06\u4e0b\u6807 x \u7684\u503c\u4fee\u6539\u4e3a val (4)\n  void point_set(int64_t index, int64_t val, int64_t i, int64_t left, int64_t right) {\n    if (left == index &amp;&amp; right == index) {  // \u5230\u53f6\u5b50\uff0c\u76f4\u63a5\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u503c\n      sum[i] = val;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    if (index &lt;= mid) {  // \u7ee7\u7eed\u5f80\u4e0b\u627e\n      point_set(index, val, 2 * i, left, mid);\n    } else {\n      point_set(index, val, 2 * i + 1, mid + 1, right);\n    }\n    push_up(i);  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u503c\n  }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     += count * val;\n    tag_add[i] += val;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {  // \u533a\u95f4\u52a0\u6cd5\n      int64_t l, r, val;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n      seg.range_add(l, r, val, 1, 1, n);\n    } else {  // \u533a\u95f4\u6c42\u548c\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_sum(l, r, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u95ed\u533a\u95f4\uff0c\u4e0b\u6807\u4ece 1 \u5f00\u59cb [1,...,n]\uff0c\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1</li> <li>\u9700\u8981\u7ef4\u62a4\u7684\u4e00\u4e9b\u6027\u8d28\uff1a\u5982 sum\u3001max\u3001min\u3001gcd\u3001lcm\u3001\u5747\u503c\u3001\u65b9\u5dee gcd\u3001lcm\u4e00\u822c\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff0c\u4e0d\u652f\u6301\u533a\u95f4\u4fee\u6539</li> <li>\u5411\u4e0a\u66f4\u65b0\uff0c\u5982\u679c\u662f\u5176\u4ed6\u6027\u8d28\u4e5f\u9700\u8981\u4e00\u5e76\u4fee\u6539</li> <li>\u5355\u70b9\u4fee\u6539\u76f4\u63a5\u5230\u53f6\u8282\u70b9\uff0c\u65e0\u9700\u61d2\u6807\u8bb0    \u5355\u70b9\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7528\u533a\u95f4\u64cd\u4f5c\u6765\u4ee3\u66ff\uff0c\u8ba9\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u76f8\u7b49\u5373\u53ef</li> </ol>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u533a\u95f4\u8d4b\u503c","title":"\u533a\u95f4\u8d4b\u503c","text":"<p>\u61d2\u6807\u8bb0\u4f18\u5148\u7ea7</p> <p>\u533a\u95f4\u8d4b\u503c &gt; \u533a\u95f4\u4e58 &gt; \u533a\u95f4\u52a0 = \u533a\u95f4\u5f00\u65b9\uff0c\u9ad8\u4f18\u5148\u7ea7\u64cd\u4f5c\u5e94\u5148\u6267\u884c</p> \u6276\u82cf\u7684\u95ee\u9898 <p>\u533a\u95f4\u8d4b\u503c\u3001\u533a\u95f4\u52a0\u6cd5\u3001\u533a\u95f4\u6700\u5927\u503c\u3001\u533a\u95f4\u6c42\u548c</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;          // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; maximum;      // \u533a\u95f4\u6700\u5927\u503c\n  vector&lt;int64_t&gt; tag_add;      // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n  vector&lt;int64_t&gt; tag_set;      // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\n  vector&lt;int64_t&gt; tag_set_val;  // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\u503c, \u53ea\u6709tag_set\u4e3atrue\u65f6\u8be5\u503c\u624d\u6709\u610f\u4e49\n\n  explicit segment_tree(int64_t n)\n      : sum(n * 4), maximum(n * 4), tag_add(n * 4), tag_set(n * 4), tag_set_val(n * 4) {}\n\n  void push_up(int64_t i) {\n    sum[i]     = sum[2 * i] + sum[2 * i + 1];\n    maximum[i] = max(maximum[2 * i], maximum[2 * i + 1]);\n  }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      sum[i] = maximum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     += count * val;\n    maximum[i] += val;\n    tag_add[i] += val;\n  }\n\n  void lazy_set(int64_t i, int64_t val, int64_t count) {\n    sum[i]         = count * val;\n    maximum[i]     = val;\n    tag_set[i]     = 1;\n    tag_set_val[i] = val;\n    tag_add[i]     = 0;  // \u6e05\u7a7a\u52a0\u6cd5\u6807\u8bb0\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_set[i] != 0) {  // \u5904\u7406\u8d4b\u503c\n      lazy_set(2 * i, tag_set_val[i], left_count);\n      lazy_set(2 * i + 1, tag_set_val[i], right_count);\n      tag_set[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u8d4b\u503c\u6807\u8bb0\n    }\n\n    if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u8d4b\u503c: range_set(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u4fee\u6539\u4e3a val\n  void range_set(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_set(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_set(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_set(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n\n  // \u533a\u95f4\u6c42\u6700\u5927\u503c: range_max(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u6700\u5927\u503c\n  int64_t range_max(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return maximum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = INT64_MIN;\n    if (ql &lt;= mid) { res = max(res, range_max(ql, qr, 2 * i, l, mid)); }\n    if (qr &gt; mid) { res = max(res, range_max(ql, qr, 2 * i + 1, mid + 1, r)); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, q;\n  cin &gt;&gt; n &gt;&gt; q;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n  for (int64_t i = 0; i &lt; q; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {  // \u533a\u95f4\u8d4b\u503c\n      int64_t l, r, x;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n      seg.range_set(l, r, x, 1, 1, n);\n    } else if (op == 2) {  // \u533a\u95f4\u52a0\u6cd5\n      int64_t l, r, x;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n      seg.range_add(l, r, x, 1, 1, n);\n    } else if (op == 3) {  // \u533a\u95f4\u6700\u5927\u503c\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_max(l, r, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u66f4\u590d\u6742\u7684\u533a\u95f4\u64cd\u4f5c","title":"\u66f4\u590d\u6742\u7684\u533a\u95f4\u64cd\u4f5c","text":"","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u4e58\u6cd5","title":"\u4e58\u6cd5","text":"<p>\u533a\u95f4\u4e58\u6cd5</p> <p>\u533a\u95f4\u4e58\u6cd5\u4f18\u5148\u7ea7\u9ad8\u4e8e\u533a\u95f4\u52a0\u6cd5\uff0c\u5e76\u4e14\u6bcf\u6b21\u4e58\u6cd5\u64cd\u4f5c\u4f1a\u5f71\u54cd\u4e4b\u524d\u7684\u52a0\u6cd5\u6807\u8bb0\uff0c\u9700\u8981\u5c06\u52a0\u6cd5\u6807\u8bb0\u4e5f\u4e58\u4e0a\u76f8\u5e94\u7684\u503c</p> \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\uff08\u533a\u95f4\u4e58\u6cd5\uff09 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u5bf9\u533a\u95f4 [l,r] \u4e58\u4ee5\u4e00\u4e2a\u6574\u6570 val\u3002</li> <li>\u5bf9\u533a\u95f4 [l,r] \u52a0\u4e0a\u4e00\u4e2a\u6574\u6570 val\u3002</li> <li>\u67e5\u8be2\u533a\u95f4 [l,r] \u7684\u548c\u3002</li> </ol> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; tag_add;  // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n  vector&lt;int64_t&gt; tag_mul;  // \u533a\u95f4\u4e58\u6cd5\u61d2\u6807\u8bb0\n\n  int64_t m;  // \u53d6\u6a21\n\n  explicit segment_tree(int64_t n, int64_t m)\n      : sum(n * 4), tag_add(n * 4), tag_mul(n * 4, 1), m(m) {}\n\n  void push_up(int64_t i) { sum[i] = (sum[2 * i] + sum[2 * i + 1]) % m; }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      sum[i] = nums[left] % m;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     = (sum[i] + count * val) % m;\n    tag_add[i] = (tag_add[i] + val) % m;\n  }\n\n  void lazy_mul(int64_t i, int64_t val, int64_t count) {\n    sum[i]     = (sum[i] * val) % m;\n    tag_mul[i] = (tag_mul[i] * val) % m;\n    tag_add[i] = (tag_add[i] * val) % m;  // \u4e58\u6cd5\u4f1a\u5f71\u54cd\u52a0\u6cd5\u6807\u8bb0\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_mul[i] != 1) {  // \u5c06\u4e58\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_mul(2 * i, tag_mul[i], left_count);\n      lazy_mul(2 * i + 1, tag_mul[i], right_count);\n      tag_mul[i] = 1;  // \u6e05\u7a7a\u6839\u8282\u70b9\u4e58\u6cd5\u6807\u8bb0\n    }\n    if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u4e58\u6cd5: range_mul(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u4e58\u4ee5 val\n  void range_mul(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_mul(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_mul(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_mul(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res = (res + range_sum(ql, qr, 2 * i, l, mid)) % m; }\n    if (qr &gt; mid) { res = (res + range_sum(ql, qr, 2 * i + 1, mid + 1, r)) % m; }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, q, m;\n  cin &gt;&gt; n &gt;&gt; q &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n, m);\n  seg.build(1, 1, n, nums);\n  for (int64_t i = 0; i &lt; q; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {  // \u533a\u95f4\u4e58\u6cd5\n      int64_t l, r, x;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n      seg.range_mul(l, r, x, 1, 1, n);\n    } else if (op == 2) {  // \u533a\u95f4\u52a0\u6cd5\n      int64_t l, r, x;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n      seg.range_add(l, r, x, 1, 1, n);\n    } else if (op == 3) {  // \u533a\u95f4\u6c42\u548c\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_sum(l, r, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u5f00\u65b9","title":"\u5f00\u65b9","text":"<p>\u533a\u95f4\u5f00\u65b9</p> <p>\u6574\u6570\u8303\u56f4\u5185\u4e0d\u65ad\u5f00\u65b9\u7684\u6570\u5217\u6700\u7ec8\u4f1a\u6536\u655b\u5230 1\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u533a\u95f4\u6700\u5927\u503c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u7ee7\u7eed\u9012\u5f52\u3002\u5982\u679c\u533a\u95f4\u6700\u5927\u503c\u5df2\u7ecf\u662f 1\uff0c\u5219\u8be5\u533a\u95f4\u5185\u6240\u6709\u6570\u5747\u4e3a 1\uff0c\u65e0\u9700\u7ee7\u7eed\u5f00\u65b9\u3002\u5426\u5219\u7ee7\u7eed\u9012\u5f52\u5904\u7406\u5b50\u8282\u70b9\u3002</p> \u4e0a\u5e1d\u9020\u9898\u7684\u4e03\u5206\u949f 2 / \u82b1\u795e\u6e38\u5386\u5404\u56fd\uff08\u533a\u95f4\u5f00\u65b9\uff09 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u5bf9\u533a\u95f4 [l,r] \u5185\u7684\u6bcf\u4e2a\u6570\u5f00\u5e73\u65b9\uff08\u5411\u4e0b\u53d6\u6574\uff09\u3002\uff08op=0\uff09</li> <li>\u67e5\u8be2\u533a\u95f4 [l,r] \u7684\u548c\u3002\uff08op=1\uff09</li> </ol> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; maximum;  // \u533a\u95f4\u6700\u5927\u503c\n\n  explicit segment_tree(int64_t n) : sum(n * 4), maximum(n * 4) {}\n\n  void push_up(int64_t i) {\n    sum[i]     = sum[2 * i] + sum[2 * i + 1];\n    maximum[i] = max(maximum[2 * i], maximum[2 * i + 1]);\n  }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      sum[i] = maximum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u5f00\u65b9: range_sqrt(x, y, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u5f00\u65b9\n  void range_sqrt(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (l == r) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u5f00\u65b9\n      auto val   = static_cast&lt;int64_t&gt;(sqrt(sum[i]));\n      sum[i]     = val;\n      maximum[i] = val;\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    // \u53ea\u5bf9\u6709\u53ef\u80fd\u53d8\u5316\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u9012\u5f52\n    if (ql &lt;= mid &amp;&amp; maximum[2 * i] &gt; 1) { range_sqrt(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid &amp;&amp; maximum[2 * i + 1] &gt; 1) { range_sqrt(ql, qr, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n\n  int m;\n  cin &gt;&gt; m;\n  for (int i = 0; i &lt; m; ++i) {\n    int op, l, r;\n    cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;\n    if (l &gt; r) { swap(l, r); }\n    if (op == 0) {\n      seg.range_sqrt(l, r, 1, 1, n);\n    } else if (op == 1) {\n      cout &lt;&lt; seg.range_sum(l, r, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#gcd","title":"GCD","text":"<p>\u533a\u95f4\u52a0\u6cd5\u4e0e \\gcd</p> <p>n \u4e2a\u6570\u7684 \\gcd \u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u6570\u7ec4\u6765\u7ef4\u62a4\u3002\u7531\u4e8e \\gcd(x, y) = \\gcd(x, y - x)\uff0c\u56e0\u6b64\u6709\u4ee5\u4e0b\u7b49\u5f0f\u6210\u7acb\uff1a</p>  \\gcd(a_l, a_{l+1}, \\ldots, a_r) = \\gcd(a_l, a_{l+1} - a_l, a_{l+2} - a_{l+1}, \\ldots, a_r - a_{r-1})  <p>\u4ee4 d_i = a_i - a_{i-1}\uff0c\u5219\u4e0a\u5f0f\u53ef\u6539\u5199\u4e3a\uff1a</p>  \\gcd(a_l, a_{l+1}, \\ldots, a_r) = \\gcd(a_l, d_{l+1}, d_{l+2}, \\ldots, d_r)  <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 d \u7684\u533a\u95f4 gcd\uff0c\u4ee5\u53ca\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\u6765\u8ba1\u7b97 a_l \u7684\u503c\uff08a_l = \\sum_{i=1}^{l} d_i\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff09\u3002</p> <p>\u66f4\u65b0\u65f6\uff0c\u533a\u95f4\u52a0\u6cd5\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5dee\u5206\u6570\u7ec4\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff1ad_l \u589e\u52a0 val\uff0cd_{r+1} \u51cf\u5c11 val\uff08\u5982\u679c r + 1 \\leq n\uff09\u3002</p> Interval GCD\uff08\u533a\u95f4\\gcd\uff09 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u5bf9\u533a\u95f4 [l,r] \u52a0\u4e0a\u4e00\u4e2a\u6574\u6570 val\u3002\uff08op=C\uff09</li> <li>\u67e5\u8be2\u533a\u95f4 [l,r] \u7684 \\gcd\u3002\uff08op=Q\uff09</li> </ol> C++<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;  // \u533a\u95f4\u548c\u4fe1\u606f\n  vector&lt;int64_t&gt; gcd;  // \u533a\u95f4gcd\u4fe1\u606f\n\n  explicit segment_tree(int64_t n) : sum(n * 4), gcd(n * 4) {}\n\n  void push_up(int64_t i) {\n    sum[i] = sum[2 * i] + sum[2 * i + 1];\n    gcd[i] = std::gcd(gcd[2 * i], gcd[2 * i + 1]);\n  }\n\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u503c\n      sum[i] = gcd[i] = nums[left] - nums[left - 1];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  void point_add(int64_t index, int64_t val, int64_t i, int64_t left, int64_t right) {\n    if (left == index &amp;&amp; right == index) {  // \u5230\u53f6\u5b50\uff0c\u76f4\u63a5\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u503c\n      sum[i] += val;\n      gcd[i] += val;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    if (index &lt;= mid) {  // \u7ee7\u7eed\u5f80\u4e0b\u627e\n      point_add(index, val, 2 * i, left, mid);\n    } else {\n      point_add(index, val, 2 * i + 1, mid + 1, right);\n    }\n    push_up(i);  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u503c\n  }\n\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n\n  int64_t range_gcd(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return gcd[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    int64_t res = 0;\n    if (ql &lt;= mid) { res = std::gcd(res, range_gcd(ql, qr, 2 * i, l, mid)); }\n    if (qr &gt; mid) { res = std::gcd(res, range_gcd(ql, qr, 2 * i + 1, mid + 1, r)); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    char op;\n    cin &gt;&gt; op;\n    if (op == 'Q') {\n      int64_t left, right;\n      cin &gt;&gt; left &gt;&gt; right;\n      int64_t a_left    = seg.range_sum(1, left, 1, 1, n);\n      int64_t range_gcd = seg.range_gcd(left + 1, right, 1, 1, n);\n      cout &lt;&lt; std::abs(std::gcd(a_left, range_gcd)) &lt;&lt; '\\n';\n    } else if (op == 'C') {\n      int64_t left, right, val;\n      cin &gt;&gt; left &gt;&gt; right &gt;&gt; val;\n      seg.point_add(left, val, 1, 1, n);\n      if (right + 1 &lt;= n) { seg.point_add(right + 1, -val, 1, 1, n); }\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u7b49\u5dee\u6570\u5217","title":"\u7b49\u5dee\u6570\u5217","text":"<p>\u533a\u95f4\u52a0\u4e0a\u7b49\u5dee\u6570\u5217</p> <p>\u5bf9\u4e8e\u533a\u95f4 [l,r]\uff0c\u5c06\u5176\u52a0\u4e0a\u7b49\u5dee\u6570\u5217 s, s+d, s+2d, \\ldots, s+(r-l)d\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4 D\uff0c\u5176\u4e2d D_i = a_i - a_{i-1}\u3002\u5219\u64cd\u4f5c\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a</p> <ul> <li>D_l = D_l + s</li> <li>[D_{l+1}, D_r] \u589e\u52a0 d\uff08\\text{if } l + 1 \\leq r\uff09</li> <li>D_{r+1} = D_{r+1} - (s + (r - l)d) = D_{r+1} - e\uff08\\text{if }r + 1 \\leq n\uff09</li> </ul> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e8c\u9636\u5dee\u5206\u6570\u7ec4\uff0c\u89c1\u9ad8\u9636\u5dee\u5206\u6570\u7ec4\u4e2d\u7b49\u5dee\u6570\u5217\u7684\u6027\u8d28\u7ef4\u62a4\u3002</p> \u65e0\u804a\u7684\u6570\u5217 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u5bf9\u533a\u95f4 [l,r] \u52a0\u4e0a\u7b49\u5dee\u6570\u5217\uff0cl \u4f4d\u7f6e\u52a0\u4e0a k\uff0c\u4e4b\u540e\u6bcf\u4e2a\u4f4d\u7f6e\u6bd4\u524d\u4e00\u4e2a\u4f4d\u7f6e\u591a\u52a0 d\u3002\uff08op=1\uff09</li> <li>\u67e5\u8be2\u4e0b\u6807\u4e3a index \u7684\u4f4d\u7f6e\u7684\u503c\u3002\uff08op=2\uff09</li> </ol> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;\n  vector&lt;int64_t&gt; tag_add;\n\n  explicit segment_tree(int64_t n) : sum(n * 4), tag_add(n * 4) {}\n\n  void push_up(int64_t i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }\n\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {\n      sum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     += count * val;\n    tag_add[i] += val;\n  }\n\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_add[i] != 0) {\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;\n    }\n  }\n\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  vector&lt;int64_t&gt; diff(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    cin &gt;&gt; nums[i];\n    diff[i] = nums[i] - nums[i - 1];\n  }\n  segment_tree seg_tree(n);\n  seg_tree.build(1, 1, n, diff);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {\n      int64_t l, r, k, d;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; k &gt;&gt; d;\n      // \u52a0\u4e0a\u7b49\u5dee\u6570\u5217, l\u4f4d\u7f6e\u52a0k, [l+1,r]\u533a\u95f4\u52a0d, r+1\u4f4d\u7f6e\u51cf\u53bbk+(r-l)*d\n      seg_tree.range_add(l, l, k, 1, 1, n);\n      if (l + 1 &lt;= r) { seg_tree.range_add(l + 1, r, d, 1, 1, n); }\n      if (r + 1 &lt;= n) {\n        int64_t val = k + (r - l) * d;\n        seg_tree.range_add(r + 1, r + 1, -val, 1, 1, n);\n      }\n    } else if (op == 2) {\n      int64_t index;\n      cin &gt;&gt; index;\n      int64_t result = seg_tree.range_sum(1, index, 1, 1, n);\n      cout &lt;&lt; result &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u7ebf\u6bb5\u6811\u4e8c\u5206","title":"\u7ebf\u6bb5\u6811\u4e8c\u5206","text":"<p>\u7ebf\u6bb5\u6811\u4e8c\u5206\uff08\\text{Segment Tree Binary Search}\uff09\u662f\u4e00\u79cd\u7ed3\u5408\u7ebf\u6bb5\u6811\u548c\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u5728\u533a\u95f4\u5185\u5feb\u901f\u5b9a\u4f4d\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7d20\u4f4d\u7f6e\u3002\u5176\u57fa\u672c\u601d\u8def\u662f\u5229\u7528\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fe1\u606f\uff0c\u5728\u67e5\u8be2\u65f6\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\u6765\u7f29\u5c0f\u641c\u7d22\u8303\u56f4\uff0c\u4ece\u800c\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u3002</p> \u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u6a21\u7248 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u51fa l,r,k\uff0c\u8be2\u95ee\u5728 [l,r] \u4e2d\u4ece\u5de6\u5f80\u53f3\u6570\u7b2c\u4e00\u4e2a\u5927\u4e8e k \u7684\u6570\u7684\u4f4d\u7f6e\uff08\u4e0b\u6807\uff09\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u6570\uff0c\u8f93\u51fa \u22121\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; maximum;  // \u533a\u95f4\u6700\u5927\u503c\n\n  explicit segment_tree(int64_t n) : maximum(n * 4) {}\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      maximum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    maximum[i] = max(maximum[2 * i], maximum[2 * i + 1]);\n  }\n\n  int64_t query(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (maximum[i] &lt;= val) { return -1; }\n    if (l == r) { return l; }\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185, \u5206\u522b\u67e5\u8be2\u5de6\u53f3\u5b50\u6811\n      if (maximum[2 * i] &gt; val) { return query(ql, qr, val, 2 * i, l, (l + r) / 2); }\n      return query(ql, qr, val, 2 * i + 1, (l + r) / 2 + 1, r);\n    }\n    int64_t mid = l + ((r - l) / 2);\n    int64_t res = -1;\n    // \u5de6\u5b50\u6811\u6709\u4ea4\u96c6\n    if (ql &lt;= mid) {\n      res = query(ql, qr, val, 2 * i, l, mid);\n      if (res != -1) { return res; }  // \u5de6\u5b50\u6811\u627e\u5230\u7b54\u6848\uff0c\u76f4\u63a5\u8fd4\u56de\n    }\n    // \u53f3\u5b50\u6811\u6709\u4ea4\u96c6\n    if (qr &gt; mid) { res = query(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n  while ((m--) != 0) {\n    int64_t l, r, x;\n    cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n    cout &lt;&lt; seg.query(l, r, x, 1, 1, n) &lt;&lt; '\\n';\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u6743\u503c\u7ebf\u6bb5\u6811","title":"\u6743\u503c\u7ebf\u6bb5\u6811","text":"<p>\u6743\u503c\u7ebf\u6bb5\u6811\uff08\\text{Weight Segment Tree}\uff09\u5bf9\u6743\u503c\uff08\u503c\u57df\uff09\u8fdb\u884c\u7ef4\u62a4\uff0c\u5176\u57fa\u672c\u601d\u8def\u662f\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u89c6\u4e3a\u4e00\u4e2a\u6743\u503c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6765\u8868\u793a\u8fd9\u4e9b\u6743\u503c\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u5e38\u5e38\u9700\u8981\u5bf9\u503c\u57df\u8fdb\u884c\u79bb\u6563\u5316\u64cd\u4f5c\u3002</p> \u9006\u5e8f\u5bf9 <p>\u6c42\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u6570\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;  // \u533a\u95f4\u548c\n\n  explicit segment_tree(int64_t n) : sum(n * 4) {}\n\n  void push_up(int64_t i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }\n\n  // \u5355\u70b9\u4fee\u6539: point_add(x, val, 1, 1, n) \u5c06\u4e0b\u6807 x \u7684\u503c\u52a0\u4e0a val\n  void point_add(int64_t index, int64_t val, int64_t i, int64_t left, int64_t right) {\n    if (left == index &amp;&amp; right == index) {  // \u5230\u53f6\u5b50\uff0c\u76f4\u63a5\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u503c\n      sum[i] += val;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    if (index &lt;= mid) {  // \u7ee7\u7eed\u5f80\u4e0b\u627e\n      point_add(index, val, 2 * i, left, mid);\n    } else {\n      point_add(index, val, 2 * i + 1, mid + 1, right);\n    }\n    push_up(i);  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u503c\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &gt; r || qr &lt; l) { return 0; }         // \u65e0\u8986\u76d6\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; nums(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  vector&lt;int&gt; sorted_nums = nums;\n  sort(sorted_nums.begin(), sorted_nums.end());\n\n  auto get_rank = [&amp;](int num) {\n    return lower_bound(sorted_nums.begin(), sorted_nums.end(), num) - sorted_nums.begin() + 1;\n  };\n\n  int64_t ans = 0;\n  segment_tree seg(n + 1);\n  for (int64_t i = n - 1; i &gt;= 0; --i) {\n    int rank  = get_rank(nums[i]);\n    ans      += seg.range_sum(1, rank - 1, 1, 1, n);\n    seg.point_add(rank, 1, 1, 1, n);\n  }\n  cout &lt;&lt; ans &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u975e\u5bf9\u79f0\u4fe1\u606f\u7ef4\u62a4","title":"\u975e\u5bf9\u79f0\u4fe1\u606f\u7ef4\u62a4","text":"<p>\u5728\u533a\u95f4\u67e5\u8be2\u65f6\uff0c\u6709\u65f6\u9700\u8981\u7ef4\u62a4\u4e00\u4e9b\u975e\u5bf9\u79f0\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3001\u6700\u5927\u524d\u7f00\u548c\u3001\u6700\u5927\u540e\u7f00\u548c\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u80fd\u7b80\u5355\u5730\u901a\u8fc7\u5de6\u53f3\u5b50\u533a\u95f4\u7684\u4fe1\u606f\u5408\u5e76\u5f97\u5230\uff0c\u9700\u8981\u989d\u5916\u7684\u7ef4\u62a4\u3002</p> \u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c <p>\u6c42\u6570\u7ec4\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u3002</p> <p>\u6700\u5927\u5b50\u6bb5\u548c</p> <p>\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u53ef\u80fd\u51fa\u73b0\u5728\u5de6\u5b50\u533a\u95f4\u3001\u53f3\u5b50\u533a\u95f4\uff0c\u6216\u8005\u8de8\u8d8a\u5de6\u53f3\u5b50\u533a\u95f4\u7684\u4e2d\u70b9\u3002 \u56e0\u6b64\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u9700\u8981\u7ef4\u62a4\u56db\u4e2a\u5c5e\u6027\uff1a\u533a\u95f4\u548c\u3001\u6700\u5927\u5b50\u6bb5\u548c\u3001\u6700\u5927\u524d\u7f00\u548c\u3001\u6700\u5927\u540e\u7f00\u548c\u3002 \u5176\u4e2d\uff0c\u6700\u5927\u524d\u7f00\u548c\u662f\u6307\u4ece\u533a\u95f4\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed\u5b50\u6bb5\u7684\u6700\u5927\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\u662f\u6307\u4ece\u533a\u95f4\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed\u5b50\u6bb5\u7684\u6700\u5927\u548c\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;          // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; max_seq;      // \u533a\u95f4\u6700\u5927\u5b50\u5e8f\u5217\u548c\n  vector&lt;int64_t&gt; max_prefix;   // \u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\n  vector&lt;int64_t&gt; max_suffix;   // \u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\n  vector&lt;int64_t&gt; tag_set;      // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\n  vector&lt;int64_t&gt; tag_set_val;  // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\u503c, \u53ea\u6709tag_set\u4e3atrue\u65f6\u8be5\u503c\u624d\u6709\u610f\u4e49\n\n  explicit segment_tree(int64_t n)\n      : sum(n * 4),\n        max_seq(n * 4),\n        max_prefix(n * 4),\n        max_suffix(n * 4),\n        tag_set(n * 4),\n        tag_set_val(n * 4) {}\n\n  void push_up(int64_t i) {\n    sum[i] = sum[2 * i] + sum[2 * i + 1];\n    // \u6700\u5927\u5b50\u5e8f\u5217\u548c\u76f8\u5173, \u9700\u8981\u8003\u8651\u8de8\u8d8a\u5de6\u53f3\u5b50\u6811\u7684\u60c5\u51b5\n    max_prefix[i] = max(max_prefix[2 * i], sum[2 * i] + max_prefix[2 * i + 1]);\n    max_suffix[i] = max(max_suffix[2 * i + 1], sum[2 * i + 1] + max_suffix[2 * i]);\n    max_seq[i]\n        = max({max_seq[2 * i], max_seq[2 * i + 1], max_suffix[2 * i] + max_prefix[2 * i + 1]});\n  }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316\n      // \u5305\u542b\u81ea\u8eab\u521d\u59cb\u5316\u4e3aval, \u5426\u5219\u521d\u59cb\u5316\u4e3amax(0, val)\n      sum[i] = max_seq[i] = max_prefix[i] = max_suffix[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  void lazy_set(int64_t i, int64_t val, int64_t count) {\n    sum[i] = count * val;\n    // \u82e5val\u4e3a\u8d1f\u6570, \u5219\u6700\u5927\u5b50\u5e8f\u5217\u548c, \u524d\u7f00\u548c, \u540e\u7f00\u548c\u5747\u53d6val, \u5426\u5219\u53d6 val*count\n    max_seq[i] = max_prefix[i] = max_suffix[i] = max(val, val * count);\n    tag_set[i]                                 = 1;\n    tag_set_val[i]                             = val;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_set[i] != 0) {  // \u5904\u7406\u8d4b\u503c\n      lazy_set(2 * i, tag_set_val[i], left_count);\n      lazy_set(2 * i + 1, tag_set_val[i], right_count);\n      tag_set[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u8d4b\u503c\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u8d4b\u503c: range_set(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u4fee\u6539\u4e3a val\n  void range_set(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_set(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_set(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_set(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  struct Node {\n    int64_t sum, max_seq, max_prefix, max_suffix;\n  };\n\n  // \u533a\u95f4\u6700\u5927\u5b50\u5e8f\u5217\u548c: range_maxseq(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\n  Node range_maxseq(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n      return {.sum        = sum[i],\n              .max_seq    = max_seq[i],\n              .max_prefix = max_prefix[i],\n              .max_suffix = max_suffix[i]};\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u67e5\u8be2\u533a\u95f4\u5b8c\u5168\u5728\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\n    if (qr &lt;= mid) { return range_maxseq(ql, qr, 2 * i, l, mid); }\n    if (ql &gt; mid) { return range_maxseq(ql, qr, 2 * i + 1, mid + 1, r); }\n    // \u67e5\u8be2\u533a\u95f4\u8de8\u8d8a\u5de6\u53f3\u5b50\u6811, \u9700\u8981\u5408\u5e76\u7ed3\u679c\n    Node left_res  = range_maxseq(ql, qr, 2 * i, l, mid);\n    Node right_res = range_maxseq(ql, qr, 2 * i + 1, mid + 1, r);\n    Node res;\n    res.sum        = left_res.sum + right_res.sum;  // \u7528\u4e8e\u66f4\u65b0\u7236\u8282\u70b9\u7684\u524d\u7f00\u548c\u540e\u7f00\u548c\n    res.max_prefix = max(left_res.max_prefix, left_res.sum + right_res.max_prefix);\n    res.max_suffix = max(right_res.max_suffix, right_res.sum + left_res.max_suffix);\n    res.max_seq\n        = max({left_res.max_seq, right_res.max_seq, left_res.max_suffix + right_res.max_prefix});\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n  int64_t m;\n  cin &gt;&gt; m;\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 0) {  // \u533a\u95f4\u8d4b\u503c\n      int64_t x, y;\n      cin &gt;&gt; x &gt;&gt; y;\n      seg.range_set(x, x, y, 1, 1, n);\n    } else {  // \u533a\u95f4\u6700\u5927\u5b50\u5e8f\u5217\u548c\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_maxseq(l, r, 1, 1, n).max_seq &lt;&lt; '\\n';\n    }\n  }\n\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u533a\u95f4\u6700\u503c\u548c\u5386\u53f2\u6700\u503c","title":"\u533a\u95f4\u6700\u503c\u548c\u5386\u53f2\u6700\u503c","text":"<p>\u5728\u533a\u95f4\u67e5\u8be2\u65f6\uff0c\u8fd4\u56de\u7684\u4e0d\u4ec5\u662f\u5f53\u524d\u7684\u6700\u503c\uff0c\u8fd8\u9700\u8981\u8fd4\u56de\u5386\u53f2\u6700\u503c\uff0c\u5373\u5728\u6240\u6709\u7684\u66f4\u65b0\u64cd\u4f5c\u4e2d\uff0c\u8be5\u533a\u95f4\u66fe\u7ecf\u51fa\u73b0\u8fc7\u7684\u6700\u503c\u3002</p> \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 3\uff08\u533a\u95f4\u6700\u503c\u64cd\u4f5c\u3001\u533a\u95f4\u5386\u53f2\u6700\u503c\uff09 <p>\u533a\u95f4\u8bbe\u7f6e\u6700\u503c\u3001\u533a\u95f4\u5386\u53f2\u6700\u503c</p> <p>Hint</p> <ol> <li>\u533a\u95f4\u8bbe\u7f6e\u6700\u6700\u5c0f\u503c\u64cd\u4f5c\u53ea\u80fd\u5c06\u533a\u95f4\u5185\u7684\u503c\u53d8\u5c0f\uff0c\u4e0d\u80fd\u53d8\u5927\uff0c\u56e0\u6b64\u5982\u679c\u533a\u95f4\u7684\u6700\u5927\u503c\u5df2\u7ecf\u5c0f\u4e8e\u7b49\u4e8e\u8bbe\u7f6e\u503c\uff0c\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\uff08\u8bbe\u7f6e\u6700\u5927\u503c\u540c\u7406\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u5373\u53ef\uff09  </li> <li>\u533a\u95f4\u5386\u53f2\u6700\u503c\u9700\u8981\u5728\u6bcf\u6b21\u66f4\u65b0\u65f6\uff0c\u6bd4\u8f83\u5f53\u524d\u6700\u5927\u503c\u4e0e\u5386\u53f2\u6700\u5927\u503c\uff0c\u53d6\u8f83\u5927\u8005\u3002  </li> <li>\u533a\u95f4\u52a0\u6cd5\u64cd\u4f5c\u5206\u4e3a\u5bf9\u6700\u5927\u503c\u7684\u52a0\u6cd5\u548c\u5bf9\u975e\u6700\u5927\u503c\u7684\u52a0\u6cd5\u4e24\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u5206\u522b\u7ef4\u62a4\u4e24\u4e2a\u61d2\u6807\u8bb0\u3002  </li> <li>\u533a\u95f4\u52a0\u6cd5\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5386\u53f2\u6700\u503c\uff0c\u56e0\u6b64\u9700\u8981\u5206\u522b\u7ef4\u62a4\u6700\u5927\u503c\u548c\u975e\u6700\u5927\u503c\u8fbe\u5230\u8fc7\u7684\u6700\u5927\u6da8\u5e45\u3002</li> </ol> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;ios&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;          // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; maximum;      // \u533a\u95f4\u6700\u5927\u503c\n  vector&lt;int64_t&gt; max_count;    // \u533a\u95f4\u5185\u6700\u5927\u503c\u7684\u4e2a\u6570\n  vector&lt;int64_t&gt; second_max;   // \u533a\u95f4\u5185\u4e25\u683c\u7b2c\u4e8c\u5927\u503c\n  vector&lt;int64_t&gt; history_max;  // \u533a\u95f4\u5185\u5386\u53f2\u6700\u5927\u503c\n\n  vector&lt;int64_t&gt; max_add;    // \u6700\u5927\u503c\u7684\u52a0\u6cd5\u61d2\u60f0\u6807\u8bb0\n  vector&lt;int64_t&gt; other_add;  // \u975e\u6700\u5927\u503c\u7684\u52a0\u6cd5\n  vector&lt;int64_t&gt; max_up;     // \u6700\u5927\u503c\u8fbe\u5230\u8fc7\u7684\u6700\u5927\u6da8\u5e45\n  vector&lt;int64_t&gt; other_up;   // \u975e\u6700\u5927\u503c\u8fbe\u5230\u8fc7\u7684\u6700\u5927\u6da8\u5e45\n\n  explicit segment_tree(int64_t n)\n      : sum(n * 4),\n        maximum(n * 4),\n        max_count(n * 4),\n        second_max(n * 4),\n        history_max(n * 4),\n        max_add(n * 4),\n        other_add(n * 4),\n        max_up(n * 4),\n        other_up(n * 4) {}\n\n  void push_up(int64_t i) {\n    sum[i]         = sum[2 * i] + sum[2 * i + 1];\n    maximum[i]     = max(maximum[2 * i], maximum[2 * i + 1]);\n    history_max[i] = max(history_max[2 * i], history_max[2 * i + 1]);\n\n    if (maximum[2 * i] &gt; maximum[2 * i + 1]) {  // \u5de6\u5b50\u6811\u6700\u5927\u503c\u66f4\u5927\n      max_count[i]  = max_count[2 * i];\n      second_max[i] = max(second_max[2 * i], maximum[2 * i + 1]);\n    } else if (maximum[2 * i] &lt; maximum[2 * i + 1]) {  // \u53f3\u5b50\u6811\u6700\u5927\u503c\u66f4\u5927\n      max_count[i]  = max_count[2 * i + 1];\n      second_max[i] = max(second_max[2 * i + 1], maximum[2 * i]);\n    } else {  // \u4e24\u4e2a\u5b50\u6811\u6700\u5927\u503c\u76f8\u7b49\n      max_count[i]  = max_count[2 * i] + max_count[2 * i + 1];\n      second_max[i] = max(second_max[2 * i], second_max[2 * i + 1]);\n    }\n  }\n\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {\n      sum[i] = maximum[i] = history_max[i] = nums[left];\n      max_count[i]                         = 1;\n      second_max[i]                        = INT64_MIN;  // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u7b2c\u4e8c\u5927\u503c\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    push_up(i);\n  }\n\n  // max_add_val: \u6700\u5927\u503c\u7684\u52a0\u6cd5\u66f4\u65b0\u503c, other_add_val: \u975e\u6700\u5927\u503c\u7684\u52a0\u6cd5\u66f4\u65b0\u503c\n  // max_up: \u6700\u5927\u503c\u7684\u6da8\u5e45, other_up: \u975e\u6700\u5927\u503c\u7684\u6da8\u5e45\n  void lazy_add(int64_t i, int64_t count, int64_t max_add_val, int64_t other_add_val,\n                int64_t max_up_val, int64_t other_up_val) {\n    // \u9996\u5148\u7ef4\u62a4\u533a\u95f4\u5386\u53f2\u6700\u5927\u503c\n    history_max[i] = max(history_max[i], maximum[i] + max_up_val);\n    max_up[i]      = max(max_up[i], max_add[i] + max_up_val);\n    other_up[i]    = max(other_up[i], other_add[i] + other_up_val);\n    // \u7ef4\u62a4\u8282\u70b9\u503c\n    sum[i]        += max_add_val * max_count[i] + other_add_val * (count - max_count[i]);\n    maximum[i]    += max_add_val;\n    second_max[i] += second_max[i] == INT64_MIN ? 0 : other_add_val;\n    // \u7ef4\u62a4\u61d2\u60f0\u6807\u8bb0\n    max_add[i]   += max_add_val;\n    other_add[i] += other_add_val;\n  }\n\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    int64_t max_val = max(maximum[2 * i], maximum[2 * i + 1]);\n\n    if (maximum[2 * i] == max_val) {  // \u5de6\u5b50\u6811\u6700\u5927\u503c\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u6700\u5927\u503c\n      lazy_add(2 * i, left_count, max_add[i], other_add[i], max_up[i], other_up[i]);\n    } else {  // \u5de6\u5b50\u6811\u6700\u5927\u503c\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u6700\u5927\u503c\n      lazy_add(2 * i, left_count, other_add[i], other_add[i], other_up[i], other_up[i]);\n    }\n\n    if (maximum[2 * i + 1] == max_val) {  // \u53f3\u5b50\u6811\u6700\u5927\u503c\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u6700\u5927\u503c\n      lazy_add(2 * i + 1, right_count, max_add[i], other_add[i], max_up[i], other_up[i]);\n    } else {  // \u53f3\u5b50\u6811\u6700\u5927\u503c\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u6700\u5927\u503c\n      lazy_add(2 * i + 1, right_count, other_add[i], other_add[i], other_up[i], other_up[i]);\n    }\n    // \u6e05\u7a7a\u6839\u8282\u70b9\u7684\u52a0\u6cd5\u6807\u8bb0\n    max_add[i] = other_add[i] = 0;\n    max_up[i] = other_up[i] = 0;\n  }\n\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n      lazy_add(i, r - l + 1, val, val, val, val);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u53d6min\u64cd\u4f5c, \u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u5927\u4e8e\u7b49\u4e8eval\u5219\u66f4\u65b0\u4e3aval, \u5426\u5219\u4e0d\u66f4\u65b0\n  void range_set_min(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (val &gt;= maximum[i]) { return; }  // \u5f53\u524d\u8282\u70b9\u503c\u5df2\u7ecf\u5c0f\u4e8e\u7b49\u4e8eval, \u4e0d\u9700\u8981\u66f4\u65b0\n\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n      if (val &gt; second_max[i]) {  // \u53ea\u4f1a\u5f71\u54cd\u6700\u5927\u503c, \u4e0d\u4f1a\u5f71\u54cd\u7b2c\u4e8c\u5927\u503c, \u76f4\u63a5\u66f4\u65b0\u8fd4\u56de\n        lazy_add(i, r - l + 1, val - maximum[i], 0, val - maximum[i], 0);\n        return;\n      }\n      // \u9700\u8981\u5f71\u54cd\u975e\u6700\u5927\u503c, \u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\n    }\n\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_set_min(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_set_min(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c: range_sum(x, y, 1, 1, n) \u8868\u793a\u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c: range_max(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u6700\u5927\u503c\n  int64_t range_max(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return maximum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = INT64_MIN;\n    if (ql &lt;= mid) { res = max(res, range_max(ql, qr, 2 * i, l, mid)); }\n    if (qr &gt; mid) { res = max(res, range_max(ql, qr, 2 * i + 1, mid + 1, r)); }\n    return res;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u5386\u53f2\u6700\u5927\u503c: range_history_max(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y]\n  // \u7684\u5386\u53f2\u6700\u5927\u503c\n  int64_t range_history_max(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return history_max[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u5206\u5272\u533a\u95f4\n    int64_t res = INT64_MIN;\n    if (ql &lt;= mid) { res = max(res, range_history_max(ql, qr, 2 * i, l, mid)); }\n    if (qr &gt; mid) { res = max(res, range_history_max(ql, qr, 2 * i + 1, mid + 1, r)); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums);\n\n  for (int i = 0; i &lt; m; i++) {\n    int op;\n    cin &gt;&gt; op;\n    if (op == 1) {\n      int l, r, k;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n      seg.range_add(l, r, k, 1, 1, n);\n    } else if (op == 2) {\n      int l, r, v;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;\n      seg.range_set_min(l, r, v, 1, 1, n);\n    } else if (op == 3) {\n      int l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_sum(l, r, 1, 1, n) &lt;&lt; '\\n';\n    } else if (op == 4) {\n      int l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_max(l, r, 1, 1, n) &lt;&lt; '\\n';\n    } else if (op == 5) {\n      int l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_history_max(l, r, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/DS/SegmentTree/#\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811","title":"\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811","text":"<p>\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff08\\text{Dynamic Segment Tree}\uff09\u9002\u7528\u4e8e\u5904\u7406\u5927\u8303\u56f4\u7684\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5c24\u5176\u662f\u5728\u503c\u57df\u8f83\u5927\u4f46\u5b9e\u9645\u4f7f\u7528\u7684\u70b9\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u3002\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u901a\u8fc7\u6309\u9700\u521b\u5efa\u8282\u70b9\u6765\u8282\u7701\u7a7a\u95f4\u3002</p>","tags":["Data Structure","\u6570\u636e\u7ed3\u6784","Segment Tree"]},{"location":"code/algorithm/Graph/%20CongruenceShortestPath/","title":"\u540c\u4f59\u6700\u77ed\u8def\u5f84","text":"","tags":["Graph","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/%20CongruenceShortestPath/#\u540c\u4f59\u6700\u77ed\u8def\u5f84","title":"\u540c\u4f59\u6700\u77ed\u8def\u5f84","text":"<p>\u540c\u4f59\u6700\u77ed\u8def\u5f84\u95ee\u9898\u662f\u4e00\u7c7b\u5728\u56fe\u8bba\u4e2d\u6d89\u53ca\u8def\u5f84\u957f\u5ea6\u6ee1\u8db3\u7279\u5b9a\u6a21\u6570\u6761\u4ef6\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\u548c\u4e00\u4e2a\u6574\u6570\u6a21\u6570 k\uff0c\u5e0c\u671b\u627e\u5230\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u957f\u5ea6\u5bf9 k \u53d6\u6a21\u540e\u6ee1\u8db3\u67d0\u4e2a\u7279\u5b9a\u7684\u6761\u4ef6\uff08\u4f8b\u5982\u7b49\u4e8e\u67d0\u4e2a\u503c\uff09\u3002</p> <p>\u540c\u4f59\u6700\u77ed\u8def\u5f84\u9002\u7528\u4e8e\u8fb9\u6743\u975e\u8d1f\u7684\u60c5\u51b5\uff0c\u4e00\u822c\u7528\u4e8e\u89e3\u51b3\u5982\u4e0b\u95ee\u9898\uff1a</p> <ol> <li>\u7ed9\u5b9a n \u4e2a\u6574\u6570\uff0c\u6c42\u8fd9 n \u4e2a\u6574\u6570\u80fd\u62fc\u51d1\u51fa\u591a\u5c11\u7684\u5176\u4ed6\u6574\u6570\uff08n \u4e2a\u6574\u6570\u53ef\u4ee5\u91cd\u590d\u53d6\uff09</li> <li>\u7ed9\u5b9a n \u4e2a\u6574\u6570\uff0c\u6c42\u8fd9 n \u4e2a\u6574\u6570\u4e0d\u80fd\u62fc\u51d1\u51fa\u7684\u6700\u5c0f\uff08\u6700\u5927\uff09\u7684\u6574\u6570</li> <li>\u7ed9\u5b9a n \u4e2a\u6574\u6570\uff0c\u6c42\u8fd9 n \u4e2a\u6574\u6570\u62fc\u51d1\u51fa\u6a21 K \u4f59 p \u7684\u6570\u7684\u6700\u5c0f\uff08\u6700\u5927\uff09\u6b21\u6570</li> <li>\u603b\u4f53\u79ef\u6781\u5927\uff0c\u5355\u4e2a\u7269\u54c1\u4f53\u79ef\u8f83\u5c0f\uff0c\u8fd9\u4e00\u7c7b\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff08\u540c\u4f59\u5206\u7ec4\uff09</li> </ol>","tags":["Graph","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/%20CongruenceShortestPath/#\u5355\u6e90\u6700\u77ed\u8def","title":"\u5355\u6e90\u6700\u77ed\u8def","text":"<p>\u89e3\u51b3\u540c\u4f59\u6700\u77ed\u8def\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6269\u5c55\u4e3a K \u4e2a\u72b6\u6001\u8282\u70b9\uff0c\u8868\u793a\u8def\u5f84\u957f\u5ea6\u5bf9 K \u53d6\u6a21\u540e\u7684\u4e0d\u540c\u4f59\u6570\u3002\u7136\u540e\u5728\u8fd9\u4e2a\u6269\u5c55\u540e\u7684\u56fe\u4e0a\u8fd0\u884c\u6807\u51c6\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff08\u5982 \\text{Dijkstra} \u6216 \\text{Bellman-Ford}\uff09\uff0c\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u5177\u4f53\u5982\u4e0b\uff1a</p> <ol> <li>\u6784\u9020\u56fe\u7684\u8282\u70b9\u4e3a [0, K-1]\uff0c\u8868\u793a\u5f53\u524d\u6570\u5bf9 K \u53d6\u6a21\u7684\u7ed3\u679c</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 u\uff0c\u679a\u4e3e n \u4e2a\u6574\u6570 a_i\uff0c\u6784\u9020\u4e00\u6761\u4ece u \u5230 v \u7684\u8fb9\uff0c\u5176\u4e2d v = (u + a_i) \\bmod K\uff0c\u8fb9\u6743\u4e3a a_i</li> <li>\u4ece\u8282\u70b9 0 \u51fa\u53d1\uff0c\u4f7f\u7528 \\text{Dijkstra} (\u5982\u679c\u8fb9\u6743\u90fd\u662f 0,1 \u53ef\u4ee5\u4f7f\u7528 \\text{0-1 BFS}) \u6c42\u89e3\u6700\u77ed\u8def</li> </ol> <p>\u5229\u7528\u540c\u4f59\u6784\u9020\u7684\u8fd9\u4e9b\u72b6\u6001\u53ef\u4ee5\u770b\u4f5c\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u70b9\u3002\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b:</p> <p>f(i + y) = f(i) + y\uff0c\u7c7b\u4f3c\u5355\u6e90\u6700\u77ed\u8def\u4e2d f(v) = f(u) + edge(u, v)</p> \u8df3\u697c\u673a <p>\u7ed9\u5b9a\u4e09\u4e2a\u6b63\u6574\u6570 x, y, z \u548c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 h\uff0c\u6c42\u4f7f\u7528 x, y, z \u8fd9\u4e09\u4e2a\u6570\uff08\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff09\u62fc\u51d1\u51fa\u4e0d\u8d85\u8fc7 h \u7684\u6240\u6709\u6b63\u6574\u6570\u7684\u4e2a\u6570\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <p>1 \\leq h \\leq 2^{63}-1\uff0c\u5728\u6c42\u89e3\u6700\u77ed\u8def\u65f6\u521d\u59cb\u503c\u5e94\u8be5\u81f3\u5c11\u8bbe\u7f6e\u6210 2^{63}\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u5df2\u7ecf\u8d85\u51fa\u4e86 <code>int64_t</code> \u7684\u8303\u56f4\u3002</p> <p>\u53ef\u4ee5\u5c06 h \u51cf 1\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0c\u4e5f\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002\u6216\u8005\u4f7f\u7528<code>uint64_t</code>\u7c7b\u578b\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t dijkstra(uint64_t x, uint64_t y, uint64_t z, uint64_t h) {\n  uint64_t k = min({x, y, z});\n  vector&lt;uint64_t&gt; distance(k, UINT64_MAX);\n  distance[1] = 1;  // \u4ece 1 \u5f00\u59cb\u8ba1\u6570\n  // Dijkstra\n  using PII = pair&lt;uint64_t, uint64_t&gt;;\n  priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt; pq;  // {dist, node}\n  pq.emplace(1, 1);\n  while (!pq.empty()) {\n    auto [dist, u] = pq.top();\n    pq.pop();\n    if (dist &gt; distance[u]) { continue; }\n    for (auto edge : {x, y, z}) {  // \u679a\u4e3e\u6bcf\u6761\u8fb9, \u907f\u514d\u5efa\u56fe\n      uint64_t v = (u + edge) % k;\n      if (distance[u] + edge &lt; distance[v]) {\n        distance[v] = distance[u] + edge;\n        pq.emplace(distance[v], v);\n      }\n    }\n  }\n\n  int64_t result = 0;\n  for (int64_t i = 0; i &lt; k; ++i) {\n    if (distance[i] &lt;= h) { result += (h - distance[i]) / k + 1; }\n  }\n  return result;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  uint64_t h, x, y, z;\n  cin &gt;&gt; h &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n  if (x == 1 || y == 1 || z == 1) {  // \u6709 1 \u53ef\u4ee5\u62fc\u51d1\u51fa\u6240\u6709\u6570\n    cout &lt;&lt; h &lt;&lt; \"\\n\";\n    return 0;\n  }\n  cout &lt;&lt; dijkstra(x, y, z, h) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Graph","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/%20CongruenceShortestPath/#\u4e24\u6b21\u8f6c\u5708\u6cd5","title":"\u4e24\u6b21\u8f6c\u5708\u6cd5","text":"<p>\u89e3\u51b3\u540c\u4f59\u6700\u77ed\u8def\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e24\u6b21\u8f6c\u5708\u6cd5\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u7ed9\u5b9a\u4e00\u4e2a\u57fa\u51c6\u6570 x\uff0c\u90a3\u4e48\u53ef\u80fd\u7684\u4f59\u6570\u4e3a [0, x-1]</li> <li>\u5047\u8bbe\u5f53\u524d\u4f59\u6570\u662f cur\uff0c\u5f53\u524d\u51fa\u73b0\u6570\u5b57\u4e3a y\uff0c(cur + y) \\bmod x \u662f\u51fa\u73b0\u7684\u65b0\u4f59\u6570\uff0c\u6700\u7ec8\u4f1a\u56de\u5230 cur</li> <li>\u5f53\u524d\u51fa\u73b0\u6570\u5b57\u4e3a y\uff0c[0, x-1] \u8fd9\u4e9b\u70b9\uff0c\u4f1a\u5f62\u6210 \\gcd(x,y) \u4e2a\u5b50\u73af\uff0c\u6240\u6709\u5b50\u73af\u7684\u8d77\u70b9\u4e3a\uff1a[0, \\gcd(x,y)-1]</li> <li>\u6bcf\u4e2a\u5b50\u73af\u7684\u957f\u5ea6\u4e3a x/\\gcd(x,y)</li> <li>\u56e0\u4e3a\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u6bcf\u51fa\u73b0\u4e00\u4e2a\u65b0\u7684\u6570\u5b57 y\uff0c\u6240\u5f62\u6210\u7684\u6bcf\u4e2a\u5b50\u73af\uff0c\u53ea\u9700\u8981\u8f6c\u4e00\u5708\u5373\u53ef\u5b8c\u6210\u66f4\u65b0</li> </ol> <p>\u7279\u522b\u6ce8\u610f</p> <p>\u5b50\u73af\u7684\u8d77\u70b9\u4e0d\u4e00\u5b9a\u662f\u70b9\u6743\u6700\u5c0f\u7684\u70b9\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e2d\u5f80\u5f80\u7528\u8f6c\u4e24\u5708\u7684\u65b9\u5f0f\u3002</p> \u58a8\u58a8\u7684\u7b49\u5f0f <p>\u7ed9\u5b9a n \u4e2a\u6574\u6570 a_1, a_2, \\ldots, a_n\uff0c\u6c42 \\sum a_i \\cdot b_i = b \\in [l, r]\uff0c\u5728 [l, r] \u8303\u56f4\u5185\u6709\u591a\u5c11\u4e2a\u6570\u53ef\u4ee5\u88ab\u8868\u793a\u3002a_i \u4e3a\u6b63\u6574\u6570\uff0cb_i \u4e3a\u975e\u8d1f\u6574\u6570\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t two_loop(const vector&lt;int64_t&gt; &amp;a, int64_t l, int64_t r) {\n  int64_t k = *min_element(a.begin(), a.end());  // \u57fa\u51c6\u6570\n  vector&lt;int64_t&gt; distance(k, INT64_MAX);\n  distance[0] = 0;    // \u4ece0\u5f00\u59cb\u8ba1\u6570\n  for (auto x : a) {  // \u679a\u4e3e\u6bcf\u4e2a\u7269\u54c1\n    int64_t g    = gcd(k, x);\n    int64_t step = k / g;\n    for (int64_t start = 0; start &lt; g; ++start) {  // \u679a\u4e3e\u6bcf\u4e2a\u5b50\u73af\u7684\u8d77\u70b9\n      for (int64_t t = 0; t &lt; 2 * step; ++t) {     // \u8f6c\u4e24\u5708\n        int64_t u = (start + t * x) % k;\n        int64_t v = (u + x) % k;\n        if (distance[u] != INT64_MAX &amp;&amp; distance[u] + x &lt; distance[v]) {\n          distance[v] = distance[u] + x;\n        }\n      }\n    }\n  }\n\n  int64_t result = 0;\n  for (int64_t i = 0; i &lt; k; ++i) {  // \u679a\u4e3e\u6bcf\u4e2a\u6a21, \u8ba1\u7b97\u80fd\u8868\u793a\u7684\u6570\u5b57\u4e2a\u6570\n    if (distance[i] &lt;= r) { result += (r - distance[i]) / k + 1; }\n    if (distance[i] &lt;= l - 1) { result -= (l - 1 - distance[i]) / k + 1; }\n  }\n  return result;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, l, r;\n  cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;\n  vector&lt;int64_t&gt; a(n);\n  int64_t j = 0;\n  for (int64_t i = 0; i &lt; n; ++i) {\n    cin &gt;&gt; a[j];\n    if (a[j] == 0) { continue; }  // 0 \u4e0d\u5f71\u54cd\u65b9\u7a0b\u7684\u89e3\n    j++;\n  }\n  a.resize(j);\n\n  cout &lt;&lt; two_loop(a, l, r) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Graph","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/BFS/","title":"BFS","text":"","tags":["Graph","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","Breadth First Search","0-1 BFS","\u53cc\u5411 BFS","Bidirectional BFS","Meet in the Middle"]},{"location":"code/algorithm/Graph/BFS/#\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22-bfs","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 (BFS)","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{Breadth First Search}\uff0c\\text{BFS}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u904d\u5386\u6216\u641c\u7d22\u6811\u6216\u56fe\u7684\u7b97\u6cd5\u3002\u5b83\u4ece\u6839\u8282\u70b9\uff08\u6216\u4efb\u610f\u9009\u5b9a\u7684\u8d77\u59cb\u8282\u70b9\uff09\u5f00\u59cb\uff0c\u6cbf\u7740\u6811\u7684\u5bbd\u5ea6\u904d\u5386\u8282\u70b9\uff0c\u5148\u8bbf\u95ee\u6240\u6709\u90bb\u8fd1\u8282\u70b9\uff0c\u7136\u540e\u518d\u9010\u5c42\u5411\u4e0b\u8bbf\u95ee\u66f4\u6df1\u5c42\u6b21\u7684\u8282\u70b9\u3002</p> <p>\\text{BFS} \u7684\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u4f7f\u7528\u961f\u5217\uff08Queue\uff09\u6765\u5b58\u50a8\u5f85\u8bbf\u95ee\u7684\u8282\u70b9</li> <li>\u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u5c06\u5176\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\u5e76\u52a0\u5165\u961f\u5217</li> <li>\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff1a<ul> <li>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbf\u95ee\u8be5\u8282\u70b9</li> <li>\u5c06\u8be5\u8282\u70b9\u7684\u6240\u6709\u672a\u8bbf\u95ee\u8fc7\u7684\u90bb\u8fd1\u8282\u70b9\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\u5e76\u52a0\u5165\u961f\u5217</li> </ul> </li> <li>\u7ee7\u7eed\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u6240\u6709\u53ef\u8fbe\u8282\u70b9\u90fd\u88ab\u8bbf\u95ee</li> </ol> BFS C++<pre><code>vector&lt;int&gt; BFS(const vector&lt;vector&lt;int&gt;&gt; &amp;graph, int start = 0) {\n  int n = graph.size();\n  vector&lt;bool&gt; visited(n, false);\n  vector&lt;int&gt; distance(n, -1);  // \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\n\n  queue&lt;int&gt; q;\n  q.push(start);  // \u4ecestart\u8282\u70b9\u5f00\u59cb\u5165\u961f\n  visited[start] = true;\n  int depth      = 0;\n\n  while (!q.empty()) {\n    int size = q.size();\n    for (int i = 0; i &lt; size; ++i) {\n      int u = q.front();\n      q.pop();\n      distance[u] = depth;      // \u8bb0\u5f55\u8282\u70b9u\u7684\u6df1\u5ea6\n      for (int v : graph[u]) {  // \u5904\u7406\u8282\u70b9u\n        if (!visited[v]) {\n          visited[v] = true;\n          q.push(v);  // \u90bb\u63a5\u70b9\u5165\u961f\n        }\n      }\n    }\n    ++depth;  // \u6df1\u5ea6\u589e\u52a0\n  }\n  return distance;\n}\n</code></pre>","tags":["Graph","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","Breadth First Search","0-1 BFS","\u53cc\u5411 BFS","Bidirectional BFS","Meet in the Middle"]},{"location":"code/algorithm/Graph/BFS/#0-1-bfs","title":"0-1 BFS","text":"<p>\u5728\u67d0\u4e9b\u56fe\u4e2d\uff0c\u8fb9\u7684\u6743\u91cd\u53ea\u6709\u4e24\u79cd\u53ef\u80fd\u503c\uff08\u901a\u5e38\u662f 0 \u548c 1\uff09\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\\text{0-1 BFS}\u7684\u7279\u6b8a\u7b97\u6cd5\u6765\u9ad8\u6548\u5730\u627e\u5230\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\\text{0-1 BFS} \u7684\u57fa\u672c\u601d\u60f3\u662f\u4f7f\u7528\u53cc\u7aef\u961f\u5217\uff08\\text{Deque}\uff09\u6765\u5b58\u50a8\u5f85\u8bbf\u95ee\u7684\u8282\u70b9\u3002\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5176\u6743\u91cd\u4e3a 0\uff0c\u5219\u5c06\u5176\u7ec8\u70b9\u6dfb\u52a0\u5230\u961f\u5217\u7684\u524d\u7aef\uff1b\u5982\u679c\u6743\u91cd\u4e3a 1\uff0c\u5219\u5c06\u5176\u7ec8\u70b9\u6dfb\u52a0\u5230\u961f\u5217\u7684\u540e\u7aef\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5728\u5904\u7406\u8282\u70b9\u65f6\uff0c\u603b\u662f\u4f18\u5148\u5904\u7406\u6743\u91cd\u8f83\u5c0f\u7684\u8fb9\u3002</p> <p>\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\\text{0-1 BFS} \u53ef\u4ee5\u5728 O(V + E) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u6700\u77ed\u8def\u5f84\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\uff0cE \u662f\u8fb9\u6570\u3002\u8fd9\u6bd4\u4f20\u7edf\u7684 \\text{Dijkstra} \u7b97\u6cd5\u5728\u5904\u7406\u53ea\u6709\u4e24\u79cd\u6743\u91cd\u7684\u56fe\u65f6\u66f4\u9ad8\u6548\u3002</p> \u5230\u8fbe\u89d2\u843d\u9700\u8981\u79fb\u9664\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c grid\uff0c\u5176\u4e2d 0 \u8868\u793a\u7a7a\u5730\uff0c1 \u8868\u793a\u969c\u788d\u7269\u3002\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u5230\u5176\u76f8\u90bb\u7684\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u683c\u5b50\u3002\u4f60\u9700\u8981\u627e\u5230\u4ece\u5de6\u4e0a\u89d2 (0, 0) \u5230\u53f3\u4e0b\u89d2 (m-1, n-1) \u7684\u8def\u5f84\u4e0a\u9700\u8981\u79fb\u9664\u7684\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee\u3002</p> C++<pre><code>#include &lt;deque&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int minimumObstacles(vector&lt;vector&lt;int&gt;&gt; &amp;grid) {\n    int m = grid.size(), n = grid[0].size();\n    array&lt;pair&lt;int, int&gt;, 4&gt; directions = {\n        {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}\n    };\n    vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n    using TIII = tuple&lt;int, int, int&gt;;  // (x, y, obstacles)\n    deque&lt;TIII&gt; dq;\n    dq.emplace_back(0, 0, 0);\n    visited[0][0] = true;\n\n    while (!dq.empty()) {\n      auto [x, y, obstacles] = dq.front();\n      dq.pop_front();\n      if (x == m - 1 &amp;&amp; y == n - 1) { return obstacles; }\n      for (auto &amp;[dx, dy] : directions) {\n        int nx = x + dx, ny = y + dy;\n        if (nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n &amp;&amp; !visited[nx][ny]) {\n          visited[nx][ny] = true;\n          if (grid[nx][ny] == 1) {  // \u969c\u788d\u7269\n            dq.emplace_back(nx, ny, obstacles + 1);\n          } else {\n            dq.emplace_front(nx, ny, obstacles);\n          }\n        }\n      }\n    }\n    return -1;\n  }\n};\n</code></pre> \u7f51\u683c\u4f20\u9001\u95e8\u65c5\u6e38 <p>\u7ed9\u5b9a\u4e00\u4e2a m \\times n \u7684\u4e8c\u7ef4\u7f51\u683c matrix\uff0c\u6bcf\u4e2a\u683c\u5b50\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\uff0c\u53ef\u80fd\u662f\u5927\u5199\u5b57\u6bcd\uff08\u8868\u793a\u4f20\u9001\u95e8\uff09\u6216 \\#\uff08\u8868\u793a\u969c\u788d\u7269\uff09\u3002\u4f60\u53ef\u4ee5\u4ece\u5de6\u4e0a\u89d2 (0, 0) \u51fa\u53d1\uff0c\u76ee\u6807\u662f\u5230\u8fbe\u53f3\u4e0b\u89d2 (m-1, n-1)\u3002\u4f60\u53ef\u4ee5\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u79fb\u52a8\u5230\u76f8\u90bb\u7684\u683c\u5b50\uff0c\u6216\u8005\u4f7f\u7528\u4f20\u9001\u95e8\u5c06\u4f60\u4f20\u9001\u5230\u76f8\u540c\u5b57\u6bcd\u7684\u683c\u5b50\u3002\u6bcf\u6b21\u79fb\u52a8\u5230\u76f8\u90bb\u683c\u5b50\u9700\u8981 1 \u6b65\uff0c\u800c\u4f7f\u7528\u4f20\u9001\u95e8\u4e0d\u9700\u8981\u4efb\u4f55\u6b65\u6570\uff0c\u6bcf\u79cd\u4f20\u9001\u95e8\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002\u8bf7\u8fd4\u56de\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u5c11\u6b65\u6570\uff0c\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u5219\u8fd4\u56de -1\u3002</p> <p>\u4f20\u9001\u95e8</p> <p>\u5c06\u4e8c\u7ef4\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u683c\u5b50\u89c6\u4e3a\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u3002\u6240\u6709\u76f8\u540c\u5b57\u6bcd\uff08\u4f20\u9001\u95e8\uff09\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\u6743\u4e3a 0 \u7684\u8fb9\uff0c\u6240\u6709\u76f8\u90bb\u683c\u5b50\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\u6743\u4e3a 1 \u7684\u8fb9\u3002</p> <p>\u4f20\u9001\u95e8\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u4f20\u9001\u95e8\u662f\u5426\u5df2\u7ecf\u88ab\u4f7f\u7528\u8fc7\uff08\u6216\u8005\u4f7f\u7528\u4f20\u9001\u95e8\u4e4b\u540e\u5c06\u8be5\u4f20\u9001\u95e8\u5bf9\u5e94\u7684\u6240\u6709\u8282\u70b9\u4ece\u56fe\u4e2d\u5220\u9664\uff09\u3002</p> C++<pre><code>#include &lt;deque&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int minMoves(vector&lt;string&gt; &amp;matrix) {\n    int m = matrix.size(), n = matrix[0].size();\n    if (matrix[0][0] == '#') { return -1; }\n\n    using PII                = pair&lt;int, int&gt;;\n    array&lt;PII, 4&gt; directions = {\n        {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}\n    };\n\n    vector&lt;vector&lt;PII&gt;&gt; portals(26);  // \u4f20\u9001\u95e8\u4f4d\u7f6e\n    for (int i = 0; i &lt; m; ++i) {\n      for (int j = 0; j &lt; n; ++j) {\n        if (matrix[i][j] &gt;= 'A' &amp;&amp; matrix[i][j] &lt;= 'Z') {\n          portals[matrix[i][j] - 'A'].emplace_back(i, j);\n        }\n      }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; distance(m, vector&lt;int&gt;(n, INT_MAX));\n\n    deque&lt;PII&gt; dq;  // (x, y)\n    dq.emplace_back(0, 0);\n\n    distance[0][0] = 0;\n    while (!dq.empty()) {\n      auto [x, y] = dq.front();\n      dq.pop_front();\n      if (x == m - 1 &amp;&amp; y == n - 1) { return distance[x][y]; }\n\n      // \u4f20\u9001\u95e8\n      if (matrix[x][y] &gt;= 'A' &amp;&amp; matrix[x][y] &lt;= 'Z') {\n        int p = matrix[x][y] - 'A';\n        for (auto &amp;[px, py] : portals[p]) {\n          if (px == x &amp;&amp; py == y) { continue; }\n          if (distance[px][py] &gt; distance[x][y]) {\n            distance[px][py] = distance[x][y];  // \u4f20\u9001\uff0c\u8ddd\u79bb\u4e0d\u53d8\n            dq.emplace_front(px, py);\n          }\n        }\n        portals[p].clear();  // \u9632\u6b62\u91cd\u590d\u4f20\u9001\n      }\n\n      for (auto &amp;[dx, dy] : directions) {\n        int nx = x + dx, ny = y + dy;\n        if (nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n &amp;&amp; matrix[nx][ny] != '#') {\n          if (distance[nx][ny] &gt; distance[x][y] + 1) {  // \u66f4\u65b0\u8ddd\u79bb\n            distance[nx][ny] = distance[x][y] + 1;      // \u666e\u901a\u79fb\u52a8\uff0c\u8ddd\u79bb+1\n            dq.emplace_back(nx, ny);\n          }\n        }\n      }\n    }\n    return -1;\n  }\n};\n</code></pre>","tags":["Graph","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","Breadth First Search","0-1 BFS","\u53cc\u5411 BFS","Bidirectional BFS","Meet in the Middle"]},{"location":"code/algorithm/Graph/BFS/#\u53cc\u5411-bfs","title":"\u53cc\u5411 BFS","text":"<p>\u53cc\u5411 \\text{BFS} \u662f\u4e00\u79cd\u4f18\u5316\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u5728\u65e0\u6743\u56fe\u4e2d\u5bfb\u627e\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u4e0e\u4f20\u7edf\u7684 \\text{BFS} \u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\u5411\u5916\u6269\u5c55\u4e0d\u540c\uff0c\u53cc\u5411 \\text{BFS} \u540c\u65f6\u4ece\u8d77\u59cb\u8282\u70b9\u548c\u76ee\u6807\u8282\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u76f4\u5230\u4e24\u6b21\u641c\u7d22\u76f8\u9047\u3002</p> <p>\u53cc\u5411 \\text{BFS} \u7684\u597d\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4\uff0c\u4ece\u800c\u63d0\u9ad8\u641c\u7d22\u6548\u7387\u3002\u56e0\u4e3a\u6bcf\u6b21\u641c\u7d22\u7684\u6df1\u5ea6\u53ea\u6709\u539f\u6765\u7684\u4e00\u534a\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cc\u5411 \\text{BFS} \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(b^{d/2})\uff0c\u5176\u4e2d b \u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u5e73\u5747\u5206\u652f\u56e0\u5b50\uff0cd \u662f\u8d77\u59cb\u8282\u70b9\u548c\u76ee\u6807\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p> <p>\u53cc\u5411 \\text{BFS} \u7684\u6838\u5fc3\u601d\u60f3\u548c \\text{Meet in the Middle} \u76f8\u4f3c\uff0c\u90fd\u662f\u901a\u8fc7\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u4e24\u4e2a\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\u6765\u63d0\u9ad8\u6548\u7387\u3002\u53cc\u5411 \\text{BFS} \u4e3b\u8981\u7528\u4e8e\u56fe\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\\text{Meet in the Middle} \u4e3b\u8981\u7528\u4e8e\u7ec4\u5408\u95ee\u9898\uff08\u5982\u5b50\u96c6\u548c\u95ee\u9898\uff09\u3002</p> \u5355\u8bcd\u63a5\u9f99 <p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08\\text{beginWord} \u548c \\text{endWord}\uff09\u548c\u4e00\u4e2a\u5b57\u5178 \\text{wordList}\uff0c\u627e\u51fa\u4ece \\text{beginWord} \u5230 \\text{endWord} \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a</p> <ul> <li>\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002</li> <li>\u8f6c\u6362\u540e\u7684\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002</li> <li>\u6ce8\u610f\uff1a\\text{beginWord} \u4e0d\u9700\u8981\u5728\u5b57\u5178\u4e2d\u3002</li> </ul> C++<pre><code>#include &lt;unordered_set&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int ladderLength(string beginWord, string endWord, vector&lt;string&gt; &amp;wordList) {\n    unordered_set&lt;string&gt; wordSet(wordList.begin(), wordList.end());\n    if (wordSet.find(endWord) == wordSet.end()) { return 0; }\n\n    unordered_set&lt;string&gt; small{beginWord};  // \u4ecebeginWord\u5f00\u59cb\u641c\u7d22\uff08\u5c0f\u96c6\u5408\uff09\n    unordered_set&lt;string&gt; large{endWord};    // \u4eceendWord\u5f00\u59cb\u641c\u7d22\uff08\u5927\u96c6\u5408\uff09\n    unordered_set&lt;string&gt; next;              // \u4e0b\u4e00\u5c42\u8282\u70b9\n\n    int step = 1;\n    while (!small.empty() &amp;&amp; !large.empty()) {\n      if (small.size() &gt; large.size()) { swap(small, large); }  // \u4fdd\u6301small\u662f\u8f83\u5c0f\u7684\u96c6\u5408\n      for (const string &amp;word : small) { wordSet.erase(word); }  // \u79fb\u9664\u5df2\u8bbf\u95ee\u7684\u5355\u8bcd\n      for (const string &amp;word : small) {\n        string curr = word;\n        // \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5355\u8bcd\n        for (int i = 0; i &lt; curr.size(); ++i) {\n          char original = curr[i];\n          for (char c = 'a'; c &lt;= 'z'; ++c) {\n            if (c == original) { continue; }\n            curr[i] = c;\n            if (large.find(curr) != large.end()) { return step + 1; }\n            if (wordSet.find(curr) != wordSet.end()) { next.insert(curr); }\n          }\n          curr[i] = original;\n        }\n      }\n\n      swap(small, next);\n      next.clear();\n      ++step;\n    }\n    return 0;\n  }\n};\n</code></pre>","tags":["Graph","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","Breadth First Search","0-1 BFS","\u53cc\u5411 BFS","Bidirectional BFS","Meet in the Middle"]},{"location":"code/algorithm/Graph/Build/","title":"\u5efa\u56fe","text":"","tags":["Graph","Build Graph"]},{"location":"code/algorithm/Graph/Build/#\u5efa\u56fe","title":"\u5efa\u56fe","text":"","tags":["Graph","Build Graph"]},{"location":"code/algorithm/Graph/Build/#\u94fe\u5f0f\u524d\u5411\u661f","title":"\u94fe\u5f0f\u524d\u5411\u661f","text":"<p>\u94fe\u5f0f\u524d\u5411\u661f\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u56fe\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u9002\u7528\u4e8e\u7a00\u758f\u56fe\u3002\u5b83\u901a\u8fc7\u4e09\u4e2a\u6570\u7ec4\u6765\u8868\u793a\u56fe\u7684\u8fb9\uff1ahead\u3001to \u548c next\u3002</p> <ul> <li>head \u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u51fa\u8fb9\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002</li> <li>to \u6570\u7ec4\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u7ec8\u70b9\u8282\u70b9\u3002</li> <li>next \u6570\u7ec4\u5b58\u50a8\u540c\u4e00\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u3002</li> </ul> \u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe C++<pre><code>const int MAX_NODES = 10'005;     // \u56fe\u7684\u6700\u5927\u8282\u70b9\u6570\nconst int MAX_EDGES = 20'005;     // \u56fe\u7684\u6700\u5927\u8fb9\u6570, \u6709\u5411\u56fe\u4e3a\u8fb9\u6570, \u65e0\u5411\u56fe\u4e3a\u8fb9\u6570\u76842\u500d\n\nvector&lt;int&gt; head(MAX_NODES, -1);  // \u8282\u70b9i\u7684\u7b2c\u4e00\u6761\u8fb9\u5728edges\u4e2d\u7684\u4e0b\u6807\nvector&lt;int&gt; next(MAX_EDGES);      // \u4e0eedges[i]\u540c\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u5728edges\u4e2d\u7684\u4e0b\u6807\nvector&lt;int&gt; to(MAX_EDGES);        // edges[i]\u7684\u7ec8\u70b9\nvector&lt;int&gt; weight(MAX_EDGES);    // edges[i]\u7684\u6743\u91cd\nint edge_count = 0;               // \u5f53\u524d\u8fb9\u6570\n\nvoid init_graph(int n) {\n  edge_count = 0;\n  fill(head.begin(), head.begin() + n, -1);\n}\n\n// \u6dfb\u52a0\u8fb9. \u5982\u679c\u662f\u65e0\u5411\u56fe, \u9700\u8981\u5206\u522b\u5bf9u-&gt;v\u548cv-&gt;u\u8c03\u7528add_edge\nvoid add_edge(int u, int v, int w = 1) {\n  to[edge_count]     = v;           // \u6dfb\u52a0\u4e00\u6761\u4eceu\u5230v\u7684\u8fb9\n  next[edge_count]   = head[u];     // \u5c06\u65b0\u8fb9\u7684\u4e0b\u4e00\u6761\u8fb9\u6307\u5411\u5f53\u524du\u7684\u7b2c\u4e00\u6761\u8fb9\n  head[u]            = edge_count;  // \u66f4\u65b0u\u7684\u7b2c\u4e00\u6761\u8fb9\u4e3a\u65b0\u6dfb\u52a0\u7684\u8fb9\n  weight[edge_count] = w;           // \u8bbe\u7f6e\u8fb9\u7684\u6743\u91cd\n  ++edge_count;                     // \u589e\u52a0\u8fb9\u8ba1\u6570\n}\n\n// \u904d\u5386\u8282\u70b9u\u7684\u6240\u6709\u51fa\u8fb9\nvoid traverse_edges(int u) {\n  for (int i = head[u]; i != -1; i = next[i]) {  // \u904d\u5386u\u7684\u6240\u6709\u51fa\u8fb9\n    int v = to[i];\n    // \u5bf9\u8fb9(u, v)\u6267\u884c\u64cd\u4f5c\n  }\n}\n</code></pre>","tags":["Graph","Build Graph"]},{"location":"code/algorithm/Graph/Connectivity/","title":"\u8fde\u901a\u6027","text":"","tags":["Graph","\u5f3a\u8fde\u901a\u5206\u91cf","Strongly Connected Component","SCC","\u5272\u70b9","Articulation Point","\u6865","Bridge","Tarjan"]},{"location":"code/algorithm/Graph/Connectivity/#\u8fde\u901a\u6027","title":"\u8fde\u901a\u6027","text":"<p>\u56fe\u7684\u8fde\u901a\u6027\u6307\u7684\u662f\u56fe\u4e2d\u9876\u70b9\u4e4b\u95f4\u7684\u53ef\u8fbe\u6027\u3002</p> <p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u5b58\u5728\u8def\u5f84\u76f8\u4e92\u53ef\u8fbe\uff0c\u5219\u79f0\u8be5\u56fe\u4e3a\u8fde\u901a\u56fe\uff1b\u5426\u5219\u79f0\u4e3a\u975e\u8fde\u901a\u56fe\u3002</p> <p>\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u5b58\u5728\u8def\u5f84\u76f8\u4e92\u53ef\u8fbe\uff0c\u5219\u79f0\u8be5\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe\uff1b\u5982\u679c\u6709\u5411\u56fe\u7684\u57fa\u56fe\uff08\u5c06\u6709\u5411\u8fb9\u89c6\u4e3a\u65e0\u5411\u8fb9\uff09\u662f\u8fde\u901a\u7684\uff0c\u5219\u79f0\u8be5\u56fe\u4e3a\u5f31\u8fde\u901a\u56fe\uff1b\u5426\u5219\u79f0\u4e3a\u975e\u8fde\u901a\u56fe\u3002</p>","tags":["Graph","\u5f3a\u8fde\u901a\u5206\u91cf","Strongly Connected Component","SCC","\u5272\u70b9","Articulation Point","\u6865","Bridge","Tarjan"]},{"location":"code/algorithm/Graph/Connectivity/#\u5f3a\u8fde\u901a\u5206\u91cf","title":"\u5f3a\u8fde\u901a\u5206\u91cf","text":"<p>\u5f3a\u8fde\u901a\u5206\u91cf\uff08\\text{Strongly Connected Component}, \\text{SCC}\uff09\u662f\u6307\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u8def\u5f84\u76f8\u4e92\u53ef\u8fbe\u7684\u6700\u5927\u5b50\u56fe\u3002\\text{Tarjan} \u7b97\u6cd5\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u56fe\u4e2d\u7684\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p>\\text{Tarjan} \u7b97\u6cd5\u6c42\u89e3\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6838\u5fc3\u601d\u60f3\u662f\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u904d\u5386\u56fe\uff0c\u5e76\u5229\u7528\u65f6\u95f4\u6233\uff08timer\uff09\u548c\u6808\u6765\u8ddf\u8e2a\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u5728\u88ab\u8bbf\u95ee\u65f6\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684\u65f6\u95f4\u6233\uff08dfn\uff09\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u4f4e\u94fe\u63a5\u503c\uff08low\uff09\uff0c\u8868\u793a\u4ece\u8be5\u8282\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u7684\u6700\u65e9\u8282\u70b9\u7684\u65f6\u95f4\u6233\u3002\u5f53\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u6233\u7b49\u4e8e\u5176\u4f4e\u94fe\u63a5\u503c\uff0c\u5219\u8bf4\u660e\u8be5\u8282\u70b9\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u53ef\u4ee5\u5c06\u6808\u4e2d\u7684\u8282\u70b9\u5f39\u51fa\uff0c\u5f62\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p>\\text{Tarjan} \u7b97\u6cd5\u6c42\u5f97\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ul> <li>\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u662f\u56fe\u7684\u6700\u5927\u5b50\u56fe\uff0c\u4e14\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u8def\u5f84\u76f8\u4e92\u53ef\u8fbe\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08\\text{DAG}\uff09\uff0c\u5373\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u4e0d\u5b58\u5728\u73af\u8def\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5212\u5206\u662f\u552f\u4e00\u7684\uff0c\u5373\u5bf9\u4e8e\u540c\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u65b9\u6cd5\u6c42\u89e3\uff0c\u5f97\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5212\u5206\u90fd\u662f\u76f8\u540c\u7684\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u6309\u7167\u62d3\u6251\u6392\u5e8f\u7684\u9006\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u5373\u7f16\u53f7\u8f83\u5c0f\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u62d3\u6251\u6392\u5e8f\u4e2d\u4f4d\u4e8e\u540e\u9762\u3002</li> </ul> \u5f3a\u8fde\u901a\u5206\u91cf <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u51fa\u56fe\u4e2d\u7684\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u8f93\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u4ee5\u53ca\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\uff0c\u8981\u6c42\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u70b9\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u4e5f\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n  }\n\n  vector&lt;int&gt; dfn(n + 1);\n  vector&lt;int&gt; low(n + 1);     // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\n  vector&lt;int&gt; scc_id(n + 1);  // \u8be5\u70b9\u6240\u5728\u7684SCC\u7f16\u53f7\n\n  stack&lt;int&gt; st;              // \u5f53\u524dSCC\u4e2d\u7684\u70b9\n  vector&lt;bool&gt; visit(n + 1);  // \u8868\u793a\u662f\u5426\u5728\u5f53\u524d\u7684SCC\u4e2d\n\n  int timer = 0, scc_count = 0;\n  auto tarjan = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    dfn[u] = low[u] = ++timer;\n    st.push(u);\n    visit[u] = true;\n    for (int v : g[u]) {\n      if (!dfn[v]) {  // v\u672a\u88ab\u8bbf\u95ee, \u7ee7\u7eedDFS\n        self(self, v);\n        low[u] = min(low[u], low[v]);\n      } else if (visit[v]) {  // v\u5728\u5f53\u524dSCC\u4e2d, \u66f4\u65b0low[u]\n        low[u] = min(low[u], dfn[v]);\n      }\n    }\n    if (dfn[u] == low[u]) {        // u\u662f\u5f53\u524dSCC\u7684\u9996\u8282\u70b9\n      for (int x = -1; x != u;) {  // \u5c06\u8be5SCC\u4e2d\u70b9\u5168\u90e8\u51fa\u6808\n        x = st.top();\n        st.pop();\n        visit[x]  = false;      // \u5c06x\u79fb\u51fa\u5f53\u524dSCC\n        scc_id[x] = scc_count;  // \u6807\u8bb0x\u6240\u5c5e\u7684SCC\u7f16\u53f7\n      }\n      ++scc_count;\n    }\n  };\n\n  for (int i = 1; i &lt;= n; i++) {\n    if (dfn[i] == 0) { tarjan(tarjan, i); }\n  }\n\n  vector&lt;vector&lt;int&gt;&gt; scc(scc_count);\n  for (int i = 1; i &lt;= n; i++) { scc[scc_id[i]].push_back(i); }\n\n  cout &lt;&lt; scc.size() &lt;&lt; '\\n';\n  // \u8f93\u51fa\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9, \u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n  for (auto &amp;component : scc) { sort(component.begin(), component.end()); }\n  sort(scc.begin(), scc.end());\n  for (const auto &amp;component : scc) {\n    for (int v : component) { cout &lt;&lt; v &lt;&lt; ' '; }\n    cout &lt;&lt; '\\n';\n  }\n\n  return 0;\n}\n</code></pre> <p>\u5229\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u4ee5\u5c06\u6709\u5411\u56fe\u8fdb\u884c\u7f29\u70b9\uff0c\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08\\text{DAG}\uff09\u3002\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e2d\uff0c\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u8282\u70b9\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fb9\u5219\u8868\u793a\u539f\u56fe\u4e2d\u4e0d\u540c\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002\u7f29\u70b9\u540e\u7684\u6709\u5411\u65e0\u73af\u56fe\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ul> <li>\u7f29\u70b9\u540e\u7684\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\u8def\uff0c\u56e0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u662f\u5355\u5411\u7684\u3002</li> <li>\u53ef\u4ee5\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u4ece\u800c\u786e\u5b9a\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002</li> <li>\u53ef\u4ee5\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u7b49\u7b97\u6cd5\uff0c\u4ece\u800c\u89e3\u51b3\u539f\u56fe\u4e2d\u7684\u4e00\u4e9b\u590d\u6742\u95ee\u9898\u3002</li> </ul> \u3010\u6a21\u677f\u3011\u7f29\u70b9 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u6c42\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\uff0c\u7ecf\u8fc7\u82e5\u5e72\u6761\u8fb9\u540e\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u6743\u503c\u548c\u3002\u7ecf\u8fc7\u7684\u70b9\u7684\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int&gt; weight(n + 1);\n  for (int i = 1; i &lt;= n; ++i) { cin &gt;&gt; weight[i]; }\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n  }\n\n  vector&lt;int&gt; dfn(n + 1);\n  vector&lt;int&gt; low(n + 1);     // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\n  vector&lt;int&gt; scc_id(n + 1);  // \u8be5\u70b9\u6240\u5728\u7684SCC\u7f16\u53f7\n\n  stack&lt;int&gt; st;              // \u5f53\u524dSCC\u4e2d\u7684\u70b9\n  vector&lt;bool&gt; visit(n + 1);  // \u8868\u793a\u662f\u5426\u5728\u5f53\u524d\u7684SCC\u4e2d\n\n  int timer = 0, scc_count = 0;\n  auto tarjan = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    dfn[u] = low[u] = ++timer;\n    st.push(u);\n    visit[u] = true;\n    for (int v : g[u]) {\n      if (!dfn[v]) {  // v\u672a\u88ab\u8bbf\u95ee, \u7ee7\u7eedDFS\n        self(self, v);\n        low[u] = min(low[u], low[v]);\n      } else if (visit[v]) {  // v\u5728\u5f53\u524dSCC\u4e2d, \u66f4\u65b0low[u]\n        low[u] = min(low[u], dfn[v]);\n      }\n    }\n    if (dfn[u] == low[u]) {        // u\u662f\u5f53\u524dSCC\u7684\u9996\u8282\u70b9\n      for (int x = -1; x != u;) {  // \u5c06\u8be5SCC\u4e2d\u70b9\u5168\u90e8\u51fa\u6808\n        x = st.top();\n        st.pop();\n        visit[x]  = false;      // \u5c06x\u79fb\u51fa\u5f53\u524dSCC\n        scc_id[x] = scc_count;  // \u6807\u8bb0x\u6240\u5c5e\u7684SCC\u7f16\u53f7\n      }\n      ++scc_count;\n    }\n  };\n\n  for (int i = 1; i &lt;= n; i++) {\n    if (dfn[i] == 0) { tarjan(tarjan, i); }\n  }\n\n  vector&lt;vector&lt;int&gt;&gt; dag(scc_count);\n  vector&lt;int&gt; scc_weight(scc_count);\n  for (int i = 1; i &lt;= n; i++) { scc_weight[scc_id[i]] += weight[i]; }\n  for (int u = 1; u &lt;= n; ++u) {\n    for (int v : g[u]) {  // \u6784\u5efa\u7f29\u70b9\u540e\u7684DAG\n      if (scc_id[u] != scc_id[v]) { dag[scc_id[u]].push_back(scc_id[v]); }\n    }\n  }\n\n  vector&lt;int&gt; dp(scc_count);\n  int answer = 0;\n\n  // \u62d3\u6251\u6392\u5e8f+DP\n  vector&lt;int&gt; in_degree(scc_count);\n  for (int u = 0; u &lt; scc_count; ++u) {  // \u8ba1\u7b97\u5165\u5ea6\n    for (int v : dag[u]) { in_degree[v]++; }\n  }\n\n  queue&lt;int&gt; q;\n  for (int i = 0; i &lt; scc_count; ++i) {\n    if (in_degree[i] == 0) { q.push(i); }\n    dp[i] = scc_weight[i];\n  }\n\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    for (int v : dag[u]) {\n      dp[v] = max(dp[v], dp[u] + scc_weight[v]);\n      if (--in_degree[v] == 0) { q.push(v); }\n    }\n    answer = max(answer, dp[u]);\n  }\n\n  cout &lt;&lt; answer &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> Note <ol> <li> <p>\u5b8c\u6210 \\text{DAG} \u7684\u6784\u5efa\u540e\u6700\u597d\u53bb\u91cd, \u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u6761\u8fb9\u8fde\u5411\u540c\u4e00\u4e2aSCC\u3002\u5982\u679c\u4e0d\u5f71\u54cd\u7b54\u6848\u4e0d\u53bb\u91cd\u4e5f\u6ca1\u5173\u7cfb, \u53ea\u662f\u4f1a\u591a\u505a\u4e00\u4e9b\u91cd\u590d\u8ba1\u7b97\uff0c\u5f71\u54cd\u6548\u7387\u3002\u6216\u8005\u4f7f\u7528 <code>set</code> \u4ee3\u66ff <code>vector</code> \u5b58\u50a8\u8fb9\u3002</p> C++<pre><code>for (int i = 0; i &lt; scc_count; ++i) {\n  sort(dag[i].begin(), dag[i].end());\n  dag[i].erase(unique(dag[i].begin(), dag[i].end()), dag[i].end());\n}\n</code></pre> </li> <li> <p>\u5728\u7f29\u70b9\u540e\u7684 \\text{DAG} \u4e0a\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u52a0\u52a8\u6001\u89c4\u5212\uff08\\text{DP}\uff09\u7684\u65b9\u6cd5\u6c42\u89e3\u6700\u5927\u6743\u503c\u548c\u95ee\u9898\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u65b9\u6cd5\u5b9e\u73b0\u3002</p> C++<pre><code>vector&lt;int&gt; visit_dag(scc_count);\nauto dfs = [&amp;](auto &amp;&amp;self, int u) -&gt; int {\n  if (visit_dag[u]) { return dp[u]; }\n  visit_dag[u] = 1;\n  for (int v : dag[u]) {\n    dp[u] = max(dp[u], self(self, v) + scc_weight[u]);\n  }\n  return dp[u];\n};\n\nfor (int i = 0; i &lt; scc_count; ++i) {\n  answer = max(answer, dfs(dfs, i));\n}\n</code></pre> </li> </ol> \u53d7\u6b22\u8fce\u7684\u725b G <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4f7f\u5f97\u6240\u6709\u5176\u4ed6\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u53ef\u4ee5\u901a\u8fc7\u6709\u5411\u8fb9\u5230\u8fbe\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8f93\u51fa\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u8282\u70b9\u7684\u6570\u91cf\uff1b\u5426\u5219\u8f93\u51fa 0\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n  }\n\n  vector&lt;int&gt; dfn(n + 1);\n  vector&lt;int&gt; low(n + 1);     // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\n  vector&lt;int&gt; scc_id(n + 1);  // \u8be5\u70b9\u6240\u5728\u7684SCC\u7f16\u53f7\n\n  stack&lt;int&gt; st;              // \u5f53\u524dSCC\u4e2d\u7684\u70b9\n  vector&lt;bool&gt; visit(n + 1);  // \u8868\u793a\u662f\u5426\u5728\u5f53\u524d\u7684SCC\u4e2d\n\n  int timer = 0, scc_count = 0;\n  auto tarjan = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    dfn[u] = low[u] = ++timer;\n    st.push(u);\n    visit[u] = true;\n    for (int v : g[u]) {\n      if (!dfn[v]) {  // v\u672a\u88ab\u8bbf\u95ee, \u7ee7\u7eedDFS\n        self(self, v);\n        low[u] = min(low[u], low[v]);\n      } else if (visit[v]) {  // v\u5728\u5f53\u524dSCC\u4e2d, \u66f4\u65b0low[u]\n        low[u] = min(low[u], dfn[v]);\n      }\n    }\n    if (dfn[u] == low[u]) {        // u\u662f\u5f53\u524dSCC\u7684\u9996\u8282\u70b9\n      for (int x = -1; x != u;) {  // \u5c06\u8be5SCC\u4e2d\u70b9\u5168\u90e8\u51fa\u6808\n        x = st.top();\n        st.pop();\n        visit[x]  = false;      // \u5c06x\u79fb\u51fa\u5f53\u524dSCC\n        scc_id[x] = scc_count;  // \u6807\u8bb0x\u6240\u5c5e\u7684SCC\u7f16\u53f7\n      }\n      ++scc_count;\n    }\n  };\n\n  for (int i = 1; i &lt;= n; i++) {\n    if (dfn[i] == 0) { tarjan(tarjan, i); }\n  }\n\n  vector&lt;vector&lt;int&gt;&gt; dag(scc_count);\n  vector&lt;int&gt; scc_weight(scc_count);\n  for (int i = 1; i &lt;= n; i++) { scc_weight[scc_id[i]] += 1; }\n  for (int u = 1; u &lt;= n; ++u) {\n    for (int v : g[u]) {\n      if (scc_id[u] != scc_id[v]) { dag[scc_id[u]].push_back(scc_id[v]); }\n    }\n  }\n\n  int star_id = -1;\n  for (int u = 0; u &lt; scc_count; ++u) {\n    if (dag[u].empty()) {\n      if (star_id != -1) {  // \u4e0d\u6b62\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684SCC\n        star_id = -1;\n        break;\n      }\n      star_id = u;\n    }\n  }\n  if (star_id == -1) {\n    cout &lt;&lt; 0 &lt;&lt; '\\n';\n    return 0;\n  }\n  cout &lt;&lt; scc_weight[star_id] &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre>","tags":["Graph","\u5f3a\u8fde\u901a\u5206\u91cf","Strongly Connected Component","SCC","\u5272\u70b9","Articulation Point","\u6865","Bridge","Tarjan"]},{"location":"code/algorithm/Graph/Connectivity/#\u5272\u70b9","title":"\u5272\u70b9","text":"<p>\u5272\u70b9\uff08\\text{Articulation Point}\uff09\u662f\u6307\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u53bb\u6389\u8be5\u8282\u70b9\u53ca\u5176\u76f8\u5173\u7684\u8fb9\u540e\uff0c\u56fe\u7684\u8fde\u901a\u5206\u91cf\u6570\u91cf\u589e\u52a0\u7684\u8282\u70b9\u3002\\text{Tarjan} \u7b97\u6cd5\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u56fe\u4e2d\u7684\u6240\u6709\u5272\u70b9\u3002</p> <p>\u5272\u70b9\u7684\u5224\u5b9a\u6761\u4ef6\u5982\u4e0b\uff1a</p> <ul> <li>\u5bf9\u4e8e\u975e\u6839\u8282\u70b9 u\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5b50\u8282\u70b9 v\uff0c\u4f7f\u5f97\u4ece v \u51fa\u53d1\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u8def\u5f84\u56de\u5230 u \u6216 u \u7684\u7956\u5148\u8282\u70b9\uff08\u5373 low[v] \\geq dfn[u]\uff09\uff0c\u5219 u \u662f\u5272\u70b9\u3002</li> <li>\u5bf9\u4e8e\u6839\u8282\u70b9 u\uff0c\u5982\u679c u \u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u5b50\u8282\u70b9\uff0c\u5219 u \u662f\u5272\u70b9\u3002</li> </ul> <p>\\text{Tarjan} \u7b97\u6cd5\u6c42\u89e3\u5272\u70b9\u7684\u6838\u5fc3\u601d\u60f3\u662f\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u904d\u5386\u56fe\uff0c\u5e76\u5229\u7528\u65f6\u95f4\u6233\uff08timer\uff09\u548c\u4f4e\u94fe\u63a5\u503c\uff08low\uff09\u6765\u8ddf\u8e2a\u8282\u70b9\u7684\u8bbf\u95ee\u60c5\u51b5\u3002\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u4e0a\u8ff0\u5224\u5b9a\u6761\u4ef6\u8bc6\u522b\u5272\u70b9\u3002</p> \u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve() {}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n    g[v].push_back(u);\n  }\n\n  vector&lt;int&gt; dfn(n + 1);  // \u904d\u5386\u5230\u8be5\u70b9\u7684\u65f6\u95f4\u6233 depth first number\n  vector&lt;int&gt; low(n + 1);  // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\n  vector&lt;int&gt; articulation;\n\n  int timer   = 0;\n  auto tarjan = [&amp;](auto &amp;&amp;self, int u, int from) -&gt; void {\n    dfn[u] = low[u] = ++timer;\n    int child       = 0;\n    bool valid      = false;\n    for (int v : g[u]) {\n      if (!dfn[v]) {\n        ++child;\n        self(self, v, u);\n        if (low[v] &gt;= dfn[u] &amp;&amp; from != -1) { valid = true; }\n        low[u] = min(low[u], low[v]);\n      } else if (v != from) {\n        low[u] = min(low[u], dfn[v]);\n      }\n    }\n    if (valid || from == -1 &amp;&amp; child &gt;= 2) { articulation.push_back(u); }\n  };\n  for (int i = 1; i &lt;= n; i++) {\n    if (dfn[i] == 0) { tarjan(tarjan, i, -1); }\n  }\n  sort(articulation.begin(), articulation.end());\n  cout &lt;&lt; articulation.size() &lt;&lt; \"\\n\";\n  for (int u : articulation) { cout &lt;&lt; u &lt;&lt; \" \"; }\n  cout &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Graph","\u5f3a\u8fde\u901a\u5206\u91cf","Strongly Connected Component","SCC","\u5272\u70b9","Articulation Point","\u6865","Bridge","Tarjan"]},{"location":"code/algorithm/Graph/Connectivity/#\u6865","title":"\u6865","text":"<p>\u6865\uff08\\text{Bridge}\uff09\u662f\u6307\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u53bb\u6389\u8be5\u8fb9\u540e\uff0c\u56fe\u7684\u8fde\u901a\u5206\u91cf\u6570\u91cf\u589e\u52a0\u7684\u8fb9\u3002\\text{Tarjan} \u7b97\u6cd5\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u56fe\u4e2d\u7684\u6240\u6709\u6865\u3002</p> <p>\u6865\u7684\u5224\u5b9a\u6761\u4ef6\u5982\u4e0b\uff1a</p> <ul> <li>\u5bf9\u4e8e\u4e00\u6761\u8fb9 (u, v)\uff0c\u5982\u679c\u4ece\u8282\u70b9 v \u51fa\u53d1\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u8def\u5f84\u56de\u5230\u8282\u70b9 u \u6216 u \u7684\u7956\u5148\u8282\u70b9\uff08\u5373 low[v] &gt; dfn[u]\uff09\uff0c\u5219\u8be5\u8fb9\u662f\u6865\u3002</li> </ul> \\text{Tarjan} \u7b97\u6cd5\u6c42\u89e3\u6865 C++<pre><code>vector&lt;int&gt; dfn(n + 1);  // \u904d\u5386\u5230\u8be5\u70b9\u7684\u65f6\u95f4\u6233 depth first number\nvector&lt;int&gt; low(n + 1);  // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\nvector&lt;pair&lt;int, int&gt;&gt; bridge;\n\nint timer   = 0;\nauto tarjan = [&amp;](auto &amp;&amp;self, int u, int parent) -&gt; void {\n  dfn[u] = low[u] = ++timer;\n  for (int v : g[u]) {\n    if (!dfn[v]) {\n      self(self, v, u);\n      if (low[v] &gt; dfn[u]) { bridge.emplace_back(u, v); }\n      low[u] = min(low[u], low[v]);\n    } else if (v != parent) {\n      low[u] = min(low[u], dfn[v]);\n    }\n  }\n};\n\nfor (int i = 0; i &lt; n; i++) {\n  if (dfn[i] == 0) { tarjan(tarjan, i, -1); }\n}\n</code></pre> Network <p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u56fe\u4e2d\u6709 n \u4e2a\u8282\u70b9\u548c m \u6761\u8fb9\u3002\u7136\u540e\u8fdb\u884c q \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u589e\u52a0\u4e00\u6761\u8fb9\uff0c\u8be2\u95ee\u5f53\u524d\u56fe\u4e2d\u6865\u7684\u6570\u91cf\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve(int n, int m, int t) {\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n    g[v].push_back(u);\n  }\n\n  vector&lt;int&gt; dfn(n + 1);  // \u904d\u5386\u5230\u8be5\u70b9\u7684\u65f6\u95f4\u6233 depth first number\n  vector&lt;int&gt; low(n + 1);  // \u4ece\u8be5\u70b9\u51fa\u53d1\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233\n  vector&lt;int&gt; bridge(n + 1);\n  int bridge_count = 0;\n\n  vector&lt;int&gt; parent(n + 1);\n  vector&lt;int&gt; depth(n + 1);\n\n  int timer   = 0;\n  auto tarjan = [&amp;](auto &amp;&amp;self, int u, int from) -&gt; void {\n    parent[u] = from;\n    dfn[u] = low[u] = ++timer;\n    for (int v : g[u]) {\n      if (!dfn[v]) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        if (low[v] &gt; dfn[u]) {\n          bridge[v] = u;   // \u6807\u8bb0\u8be5\u8fb9\u4e3a\u6865\n          ++bridge_count;  // \u6865\u6570\u91cf\u52a0\u4e00\n        }\n        low[u] = min(low[u], low[v]);\n      } else if (v != from) {\n        low[u] = min(low[u], dfn[v]);\n      }\n    }\n  };\n\n  for (int i = 0; i &lt; n; i++) {\n    if (dfn[i] == 0) { tarjan(tarjan, i, -1); }\n  }\n  // \u8fde\u8fb9\u540e\u5f62\u6210\u73af, \u73af\u4e0a\u7684\u6865\u90fd\u4e0d\u518d\u662f\u6865\n  auto get_lca = [&amp;](int x, int y) {\n    if (depth[x] &gt; depth[y]) { swap(x, y); }  // \u786e\u4fddx\u6df1\u5ea6\u66f4\u5c0f\n    while (depth[y] &gt; depth[x]) {             // \u63d0\u5347y\u5230\u548cx\u540c\u4e00\u6df1\u5ea6\n      if (bridge[y] != 0) {                   // \u8be5\u8fb9\u4e0d\u518d\u662f\u6865\n        bridge_count--;\n        bridge[y] = 0;\n      }\n      y = parent[y];\n    }\n    if (y == x) { return; }  // \u5df2\u7ecf\u662f\u540c\u4e00\u4e2a\u7956\u5148\n    while (x != y) {\n      if (bridge[x] != 0) {\n        bridge_count--;\n        bridge[x] = 0;\n      }\n      if (bridge[y] != 0) {\n        bridge_count--;\n        bridge[y] = 0;\n      }\n      x = parent[x];\n      y = parent[y];\n    }\n  };\n\n  cout &lt;&lt; \"Case \" &lt;&lt; t &lt;&lt; \":\\n\";\n  int q;\n  cin &gt;&gt; q;\n  for (int i = 0; i &lt; q; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    get_lca(u, v);\n    cout &lt;&lt; bridge_count &lt;&lt; \"\\n\";\n  }\n  cout &lt;&lt; \"\\n\";\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t = 1;\n  int n, m;\n  while (cin &gt;&gt; n &gt;&gt; m) {\n    if (n == 0 &amp;&amp; m == 0) { break; }\n    solve(n, m, t);\n    t++;\n  }\n  return 0;\n}\n</code></pre>","tags":["Graph","\u5f3a\u8fde\u901a\u5206\u91cf","Strongly Connected Component","SCC","\u5272\u70b9","Articulation Point","\u6865","Bridge","Tarjan"]},{"location":"code/algorithm/Graph/DifferenceConstraints/","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","text":"","tags":["Graph","\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","Difference Constraints"]},{"location":"code/algorithm/Graph/DifferenceConstraints/#\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","text":"<p>\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u7ebf\u6027\u4e0d\u7b49\u5f0f\u7cfb\u7edf\uff0c\u5f62\u5f0f\u4e3a x_j - x_i \\leq c_k\uff0c\u5176\u4e2d x_i \u548c x_j \u662f\u53d8\u91cf\uff0cc_k \u662f\u5e38\u6570\u3002\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u53ef\u4ee5\u7528\u6765\u63cf\u8ff0\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5bf9\u5173\u7cfb\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u56fe\u8bba\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u3002</p> <p>\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u6c42\u89e3\u901a\u5e38\u6d89\u53ca\u5c06\u4e0d\u7b49\u5f0f\u8f6c\u5316\u4e3a\u56fe\u7684\u8fb9\u6743\uff0c\u7136\u540e\u4f7f\u7528\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff08\u5982 \\text{Bellman-Ford} \u6216 \\text{SPFA}\uff09\u6765\u68c0\u6d4b\u8d1f\u73af\uff0c\u4ece\u800c\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u6709\u89e3\u3002</p>","tags":["Graph","\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","Difference Constraints"]},{"location":"code/algorithm/Graph/DifferenceConstraints/#\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u56fe\u8bba\u8868\u793a\u4e0e\u6c42\u89e3","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u56fe\u8bba\u8868\u793a\u4e0e\u6c42\u89e3","text":"<ol> <li>\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u8868\u793a\uff1a\u8bbe\u6709 n \u4e2a\u53d8\u91cf x_1, x_2, \\ldots, x_n \u548c m \u4e2a\u5dee\u5206\u7ea6\u675f x_j - x_i \\leq c_k\u3002</li> <li> <p>\u56fe\u7684\u6784\u5efa\uff1a</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u5305\u542b n \u4e2a\u8282\u70b9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u4e00\u4e2a\u53d8\u91cf x_i</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u5dee\u5206\u7ea6\u675f x_j - x_i \\leq c_k\uff0c\u5728\u56fe\u4e2d\u6dfb\u52a0\u4e00\u6761\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a c_k\uff08x_j \\leq x_i + c_k \u7684\u5f62\u5f0f\u4e0e\u56fe\u7684\u6700\u77ed\u8ddd\u79bb\u5f62\u5f0f\u7c7b\u4f3c\uff09</li> </ol> </li> <li> <p>\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u6743\u73af\uff1a</p> <ol> <li>\u5982\u679c\u5b58\u5728\u8d1f\u6743\u73af\uff0c\u5219\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3</li> <li>\u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u6743\u73af\uff0c\u5219\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u89e3</li> </ol> </li> </ol> \u3010\u6a21\u677f\u3011\u5dee\u5206\u7ea6\u675f C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII = pair&lt;int, int&gt;;\n\nvector&lt;int&gt; SPFA(const vector&lt;vector&lt;PII&gt;&gt; &amp;graph, int source) {\n  int n = graph.size();\n  vector&lt;int&gt; distance(n, INT32_MAX);\n  vector&lt;bool&gt; in_queue(n);  // \u6807\u5fd7\u662f\u5426\u5728\u961f\u5217\u4e2d\n  vector&lt;int&gt; counter(n);    // \u8bb0\u5f55\u677e\u5f1b\u6b21\u6570\uff0c\u7528\u4e8e\u68c0\u6d4b\u8d1f\u73af\n\n  distance[source] = 0;\n  queue&lt;int&gt; q;\n  q.emplace(source);\n  in_queue[source] = true;\n  counter[source]  = 1;\n\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    in_queue[u] = false;\n    for (auto [v, w] : graph[u]) {\n      if (distance[u] + w &lt; distance[v]) {\n        distance[v] = distance[u] + w;\n        if (in_queue[v]) { continue; }\n        counter[v]++;\n        // \u6709\u8d1f\u73af\n        if (counter[v] &gt; n - 1) { return {}; }\n        q.emplace(v);\n        in_queue[v] = true;\n      }\n    }\n  }\n  return distance;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  // \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u53ef\u884c\u6027\u68c0\u6d4b\n  for (int i = 0; i &lt; m; ++i) {\n    int x, y, c;\n    cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;\n    graph[y].emplace_back(x, c);\n  }\n  // \u8fde\u901a\u8d85\u7ea7\u6e90\u70b9\n  graph[0].resize(n);\n  for (int i = 1; i &lt;= n; ++i) { graph[0][i - 1] = {i, 0}; }\n  auto distance = SPFA(graph, 0);\n  if (distance.empty()) {\n    cout &lt;&lt; \"NO\\n\";\n  } else {\n    for (int i = 1; i &lt;= n; ++i) { cout &lt;&lt; distance[i] &lt;&lt; \" \"; }\n    cout &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n</code></pre>","tags":["Graph","\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","Difference Constraints"]},{"location":"code/algorithm/Graph/DifferenceConstraints/#\u7ea6\u675f\u5f62\u5f0f\u7684\u6269\u5c55","title":"\u7ea6\u675f\u5f62\u5f0f\u7684\u6269\u5c55","text":"<ol> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1ax_i - x_j \\geq c_k\uff08\u5927\u4e8e\u7b49\u5f0f\u5f62\u5f0f\uff09</p> <p>\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5904\u7406\uff1a</p> <ul> <li>x_j - x_i \\leq -c_k</li> <li> <p>\u8f6c\u5316\u4e3a\u5224\u5b9a\u65e0\u9650\u589e\u52a0\u7684\u73af\u8def\uff08\u6b63\u73af\uff09(1)</p> <ol> <li>\u9700\u8981\u4fee\u6539 \\text{SPFA} \u903b\u8f91\uff0c\u8ddd\u79bb\u53d8\u5927\u624d\u66f4\u65b0</li> </ol> </li> </ul> </li> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1a x_i - x_j = c_k\uff08\u7b49\u5f0f\u7ea6\u675f\uff0c\u7279\u522b\u5730, \u5f53 c_k = 0 \u65f6\u8868\u793a\u76f8\u7b49\uff09</p> <p>\u6539\u4e3a\u6dfb\u52a0\u4e24\u6761\u7ea6\u675f\uff1a</p> <ul> <li>x_i - x_j \\geq c_k \\Longleftrightarrow x_j - x_i \\leq -c_k</li> <li> <p>x_i - x_j \\leq c_k \\Longleftrightarrow x_i - x_j \\leq c_k (1)</p> <ol> <li>\u5df2\u7ecf\u662f\u5dee\u5206\u7ea6\u675f\u5f62\u5f0f, \u76f4\u63a5\u6dfb\u52a0\u8fb9\u5373\u53ef</li> </ol> </li> </ul> </li> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1ax_i \\in [L, R]\uff08\u53d8\u91cf\u8303\u56f4\u7ea6\u675f\uff09</p> <p>\u6dfb\u52a0\u865a\u62df\u8282\u70b9 x_{n+1}\uff08\u9650\u5236\u8d85\u7ea7\u6e90\u70b9\uff09\uff0c\u6dfb\u52a0\u4e24\u6761\u7ea6\u675f\uff1a</p> <ul> <li>x_i - x_{n+1} \\geq L \\Longleftrightarrow x_{n+1} - x_i \\leq -L\uff08\u5373\u4ece x_i \u5230 x_{n+1} \u7684\u8fb9\u6743\u4e3a -L\uff09</li> <li> <p>x_i - x_{n+1} \\leq R \\Longleftrightarrow x_i - x_{n+1} \\leq R\uff08\u5373\u4ece x_{n+1} \u5230 x_i \u7684\u8fb9\u6743\u4e3a R\uff09 (1)</p> <ol> <li>x_{n+1} \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u53c2\u8003\u70b9\uff0c\u6240\u6709\u53d8\u91cf\u76f8\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u7684\u504f\u79fb\u91cf\u90fd\u5728 [L, R] \u8303\u56f4\u5185</li> </ol> </li> </ul> </li> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1ax_i \u662f\u81ea\u7531\u53d8\u91cf</p> <p>\u6dfb\u52a0\u865a\u62df\u8282\u70b9 S\uff08\u8fde\u901a\u8d85\u7ea7\u6e90\u70b9\uff09\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u7ea6\u675f\uff1a</p> <ul> <li>x_i - S \\leq 0 (\u5373\u4ece S \u5230 x_i \u7684\u8fb9\u6743\u4e3a 0)</li> </ul> </li> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1ax_i - x_j &lt; c_k\uff08\u4e25\u683c\u4e0d\u7b49\u5f0f\uff09</p> <p>\u8f6c\u5316\u4e3a\u975e\u4e25\u683c\u4e0d\u7b49\u5f0f\uff1a</p> <ol> <li>\u6574\u6570\u53d8\u91cf\uff1ax_i - x_j \\leq c_k - 1</li> <li> <p>\u5b9e\u6570\u53d8\u91cf\uff1ax_i - x_j \\leq c_k - \\epsilon\uff0c\u5176\u4e2d \\epsilon \u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u6b63\u6570 (1)</p> <ol> <li>\u9700\u8981\u8003\u8651\u7cbe\u5ea6\u95ee\u9898\uff0c\u901a\u5e38\u51cf\u53bb\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c \\epsilon (\u5982 1e-9)</li> </ol> </li> </ol> <p>\u5982\u679c\u6240\u6709\u53d8\u91cf x_i \u90fd\u662f\u6574\u6570\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u65b0\u7684\u53d8\u91cf\u548c\u7ea6\u675f\u6765\u5904\u7406\u4e25\u683c\u4e0d\u7b49\u5f0f\u3002</p> </li> <li> <p>\u5355\u8c03\u5173\u7cfb\u7ea6\u675f\uff1a\u53d8\u91cf\u4e4b\u95f4\u9690\u542b\u4e86\u987a\u5e8f\u5173\u7cfb(\u5982 x_1 \\leq x_2 \\leq x_3 \\leq \\dots \\leq x_n)</p> <p>\u6dfb\u52a0\u76f8\u5e94\u7684\u7ea6\u675f\uff1a</p> <p>x_i - x_{i-1} \\geq 0 \\Longleftrightarrow x_{i-1} - x_i \\leq 0</p> </li> <li> <p>\u539f\u59cb\u7ea6\u675f\uff1ax_i / x_j \\leq c_k (c_k &gt; 0)</p> <p>\u8f6c\u5316\u4e3a\u5bf9\u6570\u5f62\u5f0f\u518d\u5904\u7406\uff1a</p> <p>\\log x_i - \\log x_j \\leq \\log c_k</p> </li> </ol> <p>\u6ce8\u610f\u4e8b\u9879</p> <ul> <li>\u8fde\u901a\u8d85\u7ea7\u6e90\u70b9 S \u4e0e \u9650\u5236\u8d85\u7ea7\u6e90\u70b9 x_{n+1} \u5fc5\u987b\u533a\u5206</li> <li>\u8fde\u901a\u8d85\u7ea7\u6e90\u70b9\u7528\u4e8e\u68c0\u6d4b\u5168\u5c40\u8d1f\u73af\uff0c\u6743\u91cd 0\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u53ef\u8fbe</li> <li>\u9650\u5236\u8d85\u7ea7\u6e90\u70b9\u7528\u4e8e\u9650\u5236\u53d8\u91cf\u8303\u56f4\u6216\u4fdd\u8bc1\u975e\u8d1f\u6027</li> <li>\u4e25\u683c\u4e0d\u7b49\u5f0f\u9700\u8c28\u614e\u5904\u7406\u6574\u6570\u4e0e\u5b9e\u6570\u60c5\u51b5</li> </ul>","tags":["Graph","\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","Difference Constraints"]},{"location":"code/algorithm/Graph/EulerPath/","title":"\u6b27\u62c9\u8def\u5f84","text":"","tags":["Graph","Eulerian Path"]},{"location":"code/algorithm/Graph/EulerPath/#\u6b27\u62c9\u8def\u5f84","title":"\u6b27\u62c9\u8def\u5f84","text":"<p>\u6b27\u62c9\u8def\u5f84\uff08\\text{Eulerian Path}\uff09\u662f\u6307\u4e00\u6761\u7ecf\u8fc7\u56fe\u4e2d\u6bcf\u6761\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u8def\u5f84\u3002\u5982\u679c\u4e00\u6761\u6b27\u62c9\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\uff0c\u5219\u79f0\u4e3a\u6b27\u62c9\u56de\u8def\uff08\\text{Eulerian Circuit}\uff09\u3002</p> <p>\u4f7f\u7528 \\text{Hierholzer} \u7b97\u6cd5\u53ef\u4ee5\u6709\u6548\u5730\u627e\u5230\u6b27\u62c9\u8def\u5f84\u3002\u4ee5\u4e0b\u662f\u8be5\u7b97\u6cd5\u7684\u6b65\u9aa4\uff1a</p> <ol> <li>\u68c0\u67e5\u56fe\u7684\u6027\u8d28\uff1a<ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u82e5\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u5219\u6240\u6709\u9876\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5076\u6570\uff1b\u82e5\u5b58\u5728\u6b27\u62c9\u8def\u5f84\u4f46\u4e0d\u662f\u56de\u8def\uff0c\u5219\u6070\u6709\u4e24\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\u4e3a\u5947\u6570\u3002</li> <li>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u82e5\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u5219\u6bcf\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\uff1b\u82e5\u5b58\u5728\u6b27\u62c9\u8def\u5f84\u4f46\u4e0d\u662f\u56de\u8def\uff0c\u5219\u6070\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u6bd4\u5165\u5ea6\u5927 1\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927 1\u3002</li> </ul> </li> <li>\u67e5\u627e\u6b27\u62c9\u8def\u5f84\uff1a<ul> <li>\u9009\u62e9\u4e00\u4e2a\u8d77\u70b9\uff1a<ul> <li>\u6b27\u62c9\u56de\u8def\uff1a\u53ef\u4ee5\u4ece\u4efb\u610f\u9876\u70b9\u5f00\u59cb\u3002</li> <li>\u6b27\u62c9\u8def\u5f84\uff1a\u65e0\u5411\u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff1b\u6709\u5411\u56fe\u4e2d\u9009\u62e9\u51fa\u5ea6\u6bd4\u5165\u5ea6\u5927 1 \u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\u3002</li> </ul> </li> <li>\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002</li> <li>\u6bcf\u6b21\u6cbf\u7740\u67d0\u6761\u8fb9\u4ece\u67d0\u4e2a\u9876\u70b9\u79fb\u52a8\u5230\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u5220\u9664\u8fd9\u6761\u8fb9\u3002</li> <li>\u5f53\u65e0\u6cd5\u7ee7\u7eed\u524d\u8fdb\u65f6\uff0c\u5c06\u5f53\u524d\u9876\u70b9\u52a0\u5165\u8def\u5f84\u4e2d\uff0c\u5e76\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u9876\u70b9\u7ee7\u7eed\u641c\u7d22\uff0c\u76f4\u5230\u6240\u6709\u8fb9\u90fd\u88ab\u8bbf\u95ee\u8fc7\u3002</li> </ul> </li> <li>\u8f93\u51fa\u7ed3\u679c\uff1a<ul> <li>\u6ce8\u610f\u5230\u53ea\u6709\u90a3\u4e2a\u5165\u5ea6\u4e0e\u51fa\u5ea6\u5dee\u4e3a 1 \u7684\u8282\u70b9\u4f1a\u5bfc\u81f4\u6b7b\u80e1\u540c\uff0c\u800c\u8be5\u8282\u70b9\u5fc5\u7136\u662f\u6700\u540e\u4e00\u4e2a\u904d\u5386\u5230\u7684\u8282\u70b9\u3002\u56e0\u6b64\u53ef\u4ee5\u6539\u53d8\u5165\u6808\u7684\u89c4\u5219\uff0c\u5f53\u904d\u5386\u5b8c\u4e00\u4e2a\u8282\u70b9\u6240\u8fde\u7684\u6240\u6709\u8282\u70b9\u540e\uff0c\u624d\u5c06\u8be5\u8282\u70b9\u5165\u6808\uff08\u5373\u9006\u5e8f\u5165\u6808\uff09\u3002</li> <li>\u6700\u7ec8\u8def\u5f84\u9700\u8981\u53cd\u8f6c\u4ee5\u83b7\u5f97\u6b63\u786e\u7684\u987a\u5e8f\u3002</li> </ul> </li> </ol> \u9a91\u9a6c\u4fee\u6805\u680f Riding the Fences <p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u8f93\u51fa\u4e00\u6761\u7ecf\u8fc7\u6bcf\u6761\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u8def\u5f84\uff0c\u4e14\u8def\u5f84\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u6b27\u62c9\u8def\u5f84\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int m;\n  cin &gt;&gt; m;\n  map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt; g;  // (\u90bb\u63a5\u70b9, \u8fb9id)\n  vector&lt;bool&gt; used(m, false);         // \u8fb9\u662f\u5426\u88ab\u4f7f\u7528\u8fc7\n\n  int start = INT32_MAX;  // \u8d77\u70b9\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].emplace_back(v, i);\n    g[v].emplace_back(u, i);\n    start = min({start, u, v});  // \u8bb0\u5f55\u7f16\u53f7\u6700\u5c0f\u70b9\n  }\n\n  // \u627e\u8d77\u70b9, \u5947\u6570\u5ea6\u70b9\u4e2a\u6570\n  int odd = 0;\n  for (const auto &amp;[u, vs] : g) {\n    if (vs.size() % 2 == 1) {\n      start = odd == 0 ? u : start;  // \u4ece\u7f16\u53f7\u8f83\u5c0f\u7684\u5947\u6570\u5ea6\u70b9\u5f00\u59cb\n      ++odd;\n    }\n    sort(g[u].begin(), g[u].end(),\n         greater&lt;&gt;());  // \u4e3a\u4e86\u5b57\u5178\u5e8f\u6700\u5c0f, \u9006\u5e8f\u5b58\u50a8\u90bb\u63a5\u70b9\n  }\n  // \u65e0\u6cd5\u6784\u6210\u6b27\u62c9\u8def\u5f84\n  if (odd != 0 &amp;&amp; odd != 2) { return 0; }\n  vector&lt;int&gt; path;\n  auto hierholzer = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    while (!g[u].empty()) {\n      auto [v, id] = g[u].back();  // \u53d6\u6700\u540e\u4e00\u4e2a\u90bb\u63a5\u70b9\n      g[u].pop_back();\n      if (used[id]) { continue; }  // \u5df2\u4f7f\u7528\u8fc7\u5219\u8df3\u8fc7\n      used[id] = true;\n      self(self, v);\n    }\n    path.push_back(u);  // \u56de\u6eaf\u65f6\u8bb0\u5f55\u8def\u5f84\n  };\n\n  hierholzer(hierholzer, start);\n  // \u672a\u4f7f\u7528\u6240\u6709\u8fb9, \u56fe\u4e0d\u8fde\u901a\n  if (path.size() != m + 1) { return 0; }\n\n  reverse(path.begin(), path.end());\n  for (int v : path) { cout &lt;&lt; v &lt;&lt; \"\\n\"; }\n  return 0;\n}\n</code></pre> \u3010\u6a21\u677f\u3011\u6b27\u62c9\u8def\u5f84 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8981\u6c42\u8f93\u51fa\u4e00\u6761\u7ecf\u8fc7\u6bcf\u6761\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u8def\u5f84\uff0c\u4e14\u8def\u5f84\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\u5982\u679c\u4e0d\u5b58\u5728\u6b27\u62c9\u8def\u5f84\uff0c\u5219\u8f93\u51fa \"No\"\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; g(n + 1);  // (\u90bb\u63a5\u70b9, \u8fb9id)\n  vector&lt;int&gt; in_degree(n + 1, 0);\n  vector&lt;int&gt; out_degree(n + 1, 0);\n  vector&lt;bool&gt; used(m, false);  // \u8fb9\u662f\u5426\u88ab\u4f7f\u7528\u8fc7\n\n  int start = INT32_MAX;  // \u8d77\u70b9\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].emplace_back(v, i);\n    out_degree[u]++;\n    in_degree[v]++;\n    start = min({start, u, v});  // \u8bb0\u5f55\u7f16\u53f7\u6700\u5c0f\u70b9\n  }\n\n  // \u627e\u8d77\u70b9, \u5165\u5ea6\u6bd4\u51fa\u5ea6\u59271\u7684\u70b9\u4e3a\u7ec8\u70b9, \u51fa\u5ea6\u6bd4\u5165\u5ea6\u59271\u7684\u70b9\u4e3a\u8d77\u70b9\n  int start_nodes = 0, end_nodes = 0;\n  for (int u = 1; u &lt;= n; ++u) {\n    if (out_degree[u] - in_degree[u] == 1) {\n      start = u;\n      start_nodes++;\n    } else if (in_degree[u] - out_degree[u] == 1) {\n      end_nodes++;\n    } else if (in_degree[u] != out_degree[u]) {\n      cout &lt;&lt; \"No\\n\";\n      return 0;\n    }\n    sort(g[u].begin(), g[u].end(),\n         greater&lt;&gt;());  // \u4e3a\u4e86\u5b57\u5178\u5e8f\u6700\u5c0f, \u9006\u5e8f\u5b58\u50a8\u90bb\u63a5\u70b9\n  }\n  // \u65e0\u6cd5\u6784\u6210\u6b27\u62c9\u8def\u5f84\n  if ((start_nodes != 1 || end_nodes != 1) &amp;&amp; (start_nodes != 0 || end_nodes != 0)) {\n    cout &lt;&lt; \"No\\n\";\n    return 0;\n  }\n  vector&lt;int&gt; path;\n  auto hierholzer = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    while (!g[u].empty()) {\n      auto [v, id] = g[u].back();  // \u53d6\u6700\u540e\u4e00\u4e2a\u90bb\u63a5\u70b9\n      g[u].pop_back();\n      if (used[id]) { continue; }  // \u5df2\u4f7f\u7528\u8fc7\u5219\u8df3\u8fc7\n      used[id] = true;\n      self(self, v);\n    }\n    path.push_back(u);  // \u56de\u6eaf\u65f6\u8bb0\u5f55\u8def\u5f84\n  };\n\n  hierholzer(hierholzer, start);\n\n  if (path.size() != m + 1) {  // \u672a\u4f7f\u7528\u6240\u6709\u8fb9, \u56fe\u4e0d\u8fde\u901a\n    cout &lt;&lt; \"No\\n\";\n    return 0;\n  }\n  reverse(path.begin(), path.end());\n  for (int v : path) { cout &lt;&lt; v &lt;&lt; \" \"; }\n  cout &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Graph","Eulerian Path"]},{"location":"code/algorithm/Graph/MST/","title":"\u6700\u5c0f\u751f\u6210\u6811","text":"","tags":["Graph","Minimum Spanning Tree","MST"]},{"location":"code/algorithm/Graph/MST/#\u6700\u5c0f\u751f\u6210\u6811","title":"\u6700\u5c0f\u751f\u6210\u6811","text":"<p>\u6700\u5c0f\u751f\u6210\u6811\uff08\\text{Minimum Spanning Tree}, \\text{MST}\uff09\u662f\u6307\u5728\u4e00\u4e2a\u8fde\u901a\u52a0\u6743\u65e0\u5411\u56fe\u4e2d\uff0c\u9009\u53d6\u4e00\u90e8\u5206\u8fb9\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u90fd\u8fde\u901a\u4e14\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002\u5e38\u7528\u7684\u7b97\u6cd5\u6709 \\text{Kruskal} \u7b97\u6cd5\u548c \\text{Prim} \u7b97\u6cd5\u3002</p>","tags":["Graph","Minimum Spanning Tree","MST"]},{"location":"code/algorithm/Graph/MST/#kruskal\u7b97\u6cd5","title":"Kruskal\u7b97\u6cd5","text":"<p>\\text{Kruskal} \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u6240\u6709\u8fb9\u6309\u6743\u91cd\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u9009\u62e9\u8fb9\uff0c\u82e5\u9009\u62e9\u8be5\u8fb9\u4e0d\u4f1a\u5f62\u6210\u73af\uff0c\u5219\u5c06\u5176\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u76f4\u5230\u751f\u6210\u6811\u5305\u542b\u6240\u6709\u8282\u70b9\u4e3a\u6b62\u3002\u901a\u5e38\u4f7f\u7528\u5e76\u67e5\u96c6\uff08\\text{Union-Find}\uff09\u6765\u68c0\u6d4b\u73af\u7684\u5f62\u6210\u3002</p> \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811 <p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u8282\u70b9\u548c m \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u3002\u5982\u679c\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u8f93\u51fa \"orz\"\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct Edge {\n  int u, v, weight;\n\n  bool operator&lt;(const Edge &amp;other) const { return weight &lt; other.weight; }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;Edge&gt; edges(m);\n  for (int i = 0; i &lt; m; ++i) { cin &gt;&gt; edges[i].u &gt;&gt; edges[i].v &gt;&gt; edges[i].weight; }\n\n  // \u5e76\u67e5\u96c6\n  vector&lt;int&gt; root(n + 1);\n  iota(root.begin(), root.end(), 0);\n\n  function&lt;int(int)&gt; find = [&amp;](int x) {\n    if (root[x] != x) { root[x] = find(root[x]); }\n    return root[x];\n  };\n\n  sort(edges.begin(), edges.end());\n\n  int mst_weight  = 0;\n  int edges_count = 0;\n\n  for (const auto &amp;edge : edges) {\n    int root_u = find(edge.u);\n    int root_v = find(edge.v);\n    if (root_u != root_v) {\n      mst_weight += edge.weight;\n      edges_count++;\n      root[root_u] = root_v;\n      if (edges_count == n - 1) { break; }  // early stop\n    }\n  }\n\n  if (edges_count == n - 1) {\n    cout &lt;&lt; mst_weight &lt;&lt; \"\\n\";\n  } else {\n    cout &lt;&lt; \"orz\\n\";\n  }\n\n  return 0;\n}\n</code></pre>","tags":["Graph","Minimum Spanning Tree","MST"]},{"location":"code/algorithm/Graph/MST/#prim\u7b97\u6cd5","title":"Prim\u7b97\u6cd5","text":"<p>\\text{Prim} \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u9010\u6b65\u6269\u5c55\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u6761\u8fde\u63a5\u751f\u6210\u6811\u548c\u975e\u751f\u6210\u6811\u7684\u8fb9\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\u751f\u6210\u6811\uff0c\u76f4\u5230\u6240\u6709\u8282\u70b9\u90fd\u5305\u542b\u5728\u751f\u6210\u6811\u4e2d\u3002\u901a\u5e38\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\\text{Priority Queue}\uff09\u6765\u9ad8\u6548\u5730\u9009\u62e9\u6700\u5c0f\u6743\u91cd\u8fb9\u3002</p> \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811 <p></p>C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;climits&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  using PII = pair&lt;int, int&gt;;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n    graph[v].emplace_back(u, w);\n  }\n\n  vector&lt;int&gt; min_edge(n + 1, INT_MAX);  // \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5230\u751f\u6210\u6811\u7684\u6700\u5c0f\u8fb9\u6743 (1)\n  vector&lt;bool&gt; in_mst(n + 1, false);\n  priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt; pq;  // {weight, vertex}\n\n  min_edge[1] = 0;\n  pq.emplace(0, 1);\n\n  int mst_weight = 0;\n\n  while (!pq.empty()) {\n    auto [weight, u] = pq.top();\n    pq.pop();\n\n    if (in_mst[u]) { continue; }\n    in_mst[u]   = true;\n    mst_weight += weight;\n\n    for (const auto &amp;[v, w] : graph[u]) {\n      if (!in_mst[v] &amp;&amp; w &lt; min_edge[v]) {  // \u627e\u5230\u66f4\u5c0f\u7684\u8fb9\n        min_edge[v] = w;\n        pq.emplace(w, v);\n      }\n    }\n  }\n\n  if (all_of(in_mst.begin() + 1, in_mst.end(), [](bool x) { return x; })) {\n    cout &lt;&lt; mst_weight &lt;&lt; \"\\n\";\n  } else {\n    cout &lt;&lt; \"orz\\n\";\n  }\n\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u907f\u514d\u91cd\u590d\u63d2\u5165\u540c\u4e00\u8282\u70b9\u5230\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u52a0\u5165\u751f\u6210\u6811\u4e00\u6b21\u3002\u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u5e38\u6570\u65f6\u95f4\u4f1a\u7a0d\u5fae\u9ad8\u4e00\u4e9b\u3002</li> </ol>","tags":["Graph","Minimum Spanning Tree","MST"]},{"location":"code/algorithm/Graph/MST/#kruskal\u91cd\u6784\u6811","title":"Kruskal\u91cd\u6784\u6811","text":"<p>\\text{Kruskal} \u91cd\u6784\u6811\u662f\u4e00\u79cd\u57fa\u4e8e \\text{Kruskal} \u7b97\u6cd5\u6784\u5efa\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u7528\u4e8e\u8868\u793a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5408\u5e76\u8fc7\u7a0b\u3002\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u8868\u793a\u8be5\u5408\u5e76\u64cd\u4f5c\uff0c\u5e76\u5c06\u4e24\u4e2a\u88ab\u5408\u5e76\u7684\u8282\u70b9\u4f5c\u4e3a\u5176\u5b50\u8282\u70b9\uff0c\u8282\u70b9\u6743\u91cd\u4e3a\u8fb9\u7684\u6743\u91cd\u3002\u8fd9\u6837\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6811\u7684\u6839\u8282\u70b9\u8868\u793a\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002</p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u539f\u56fe\u4e2d\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c = \u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c = \\text{Kruskal} \u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684 \\text{LCA} \u7684\u6743\u503c\u3002</p> <p>\u5bf9\u4e8e\u6709 n \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u56fe\uff0c\\text{Kruskal} \u91cd\u6784\u6811\u6700\u591a\u6709 2n-1 \u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u524d n \u4e2a\u8282\u70b9\u5bf9\u5e94\u539f\u56fe\u7684\u8282\u70b9\uff0c\u540e n-1 \u4e2a\u8282\u70b9\u5bf9\u5e94\u5408\u5e76\u64cd\u4f5c\u3002</p> <p>\u5229\u7528 \\text{Kruskal} \u91cd\u6784\u6811\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5904\u7406\u4e00\u4e9b\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\u7684\u67e5\u8be2\u95ee\u9898\uff0c\u4f8b\u5982\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u7b49\u3002</p> \u661f\u9645\u5bfc\u822a <p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u8282\u70b9\u548c m \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u8be2\u95ee q \u6b21\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u4e2a\u8282\u70b9 u \u548c v\uff0c\u6c42\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fde\u63a5 u \u548c v \u7684\u8def\u5f84\u4e0a\u6743\u91cd\u6700\u5927\u7684\u8fb9\u3002\u5982\u679c u \u548c v \u4e0d\u8fde\u901a\uff0c\u5219\u8f93\u51fa \"impossible\"\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  using TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;\n  vector&lt;int64_t&gt; node(2 * n);  // \u6700\u591a\u6709 n-1 \u4e2a\u65b0\u8282\u70b9, \u603b\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 2n-1\n  vector&lt;vector&lt;int64_t&gt;&gt; tree(2 * n);\n  vector&lt;TIII&gt; edges(m);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    edges[i] = {w, u, v};\n  }\n\n  vector&lt;int64_t&gt; root(2 * n);\n  iota(root.begin(), root.end(), 0);\n  auto find = [&amp;](int64_t x) {\n    while (root[x] != x) {\n      root[x] = root[root[x]];\n      x       = root[x];\n    }\n    return x;\n  };\n\n  // Kruskal\u91cd\u6784\n  sort(edges.begin(), edges.end());\n  int64_t idx = n;\n  for (const auto &amp;[w, u, v] : edges) {\n    int64_t ru = find(u);\n    int64_t rv = find(v);\n    if (ru != rv) {\n      root[ru] = root[rv] = ++idx;\n      node[idx]           = w;\n      tree[idx].emplace_back(ru);\n      tree[idx].emplace_back(rv);\n    }\n  }\n\n  // LCA\u9884\u5904\u7406\n  vector&lt;int64_t&gt; depth(idx + 1, 0);\n  int64_t M = 32 - __builtin_clz(idx + 1);\n  vector&lt;vector&lt;int64_t&gt;&gt; st(idx + 1, vector&lt;int64_t&gt;(M + 1, -1));\n  auto dfs = [&amp;](auto &amp;&amp;self, int64_t u, int64_t p) -&gt; void {\n    st[u][0] = p;\n    for (int64_t i = 1; i &lt;= M; ++i) {\n      if (st[u][i - 1] != -1) { st[u][i] = st[st[u][i - 1]][i - 1]; }\n    }\n    for (const auto &amp;v : tree[u]) {\n      if (v != p) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n      }\n    }\n  };\n  for (int64_t i = 1; i &lt;= idx; ++i) {      // \u56fe\u53ef\u80fd\u4e0d\u8fde\u901a\n    if (root[i] == i) { dfs(dfs, i, -1); }  // \u4ece\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6839\u8282\u70b9\u5f00\u59cbdfs\n  }\n\n  auto get_kth_ancestor = [&amp;](int node, int k) -&gt; int {\n    for (; (k != 0) &amp;&amp; (node != -1); k &amp;= k - 1) { node = st[node][__builtin_ctz(k)]; }\n    return node;\n  };\n\n  auto get_lca = [&amp;](int x, int y) -&gt; int {\n    if (depth[x] &gt; depth[y]) { swap(x, y); }\n    y = get_kth_ancestor(y, depth[y] - depth[x]);\n    if (y == x) { return x; }\n    for (int i = M - 1; i &gt;= 0; --i) {\n      int px = st[x][i];\n      int py = st[y][i];\n      if (px != py) {\n        x = px;\n        y = py;\n      }\n    }\n    return st[x][0];\n  };\n\n  int64_t q;\n  cin &gt;&gt; q;\n  for (int64_t i = 0; i &lt; q; ++i) {\n    int64_t x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    if (find(x) != find(y)) {\n      cout &lt;&lt; \"impossible\\n\";\n    } else {\n      int64_t lca = get_lca(x, y);\n      cout &lt;&lt; node[lca] &lt;&lt; \"\\n\";\n    }\n  }\n\n  return 0;\n}\n</code></pre> \u6700\u5c0f\u74f6\u9888\u8def\uff08\u52a0\u5f3a\u7248\uff09 <p>\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u7f16\u53f7\u4e3a 1 \u5230 n\uff0c\u6ca1\u6709\u81ea\u73af\uff0c\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u4e00\u4e2a\u6b63\u6743\u503c w\u3002</p> <p>\u7ed9\u51fa q \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9 u \u548c v\uff0c\u6c42\u4e00\u6761\u4ece u \u5230 v \u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5927\u503c\u6700\u5c0f\u662f\u591a\u5c11\u3002</p> <p>\u6570\u636e\u91cf n \u548c q \u4e0d\u540c\u9636</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint A, B, C, P;\n\ninline int rnd() { return A = (A * B + C) % P; };\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  using TIII = tuple&lt;int, int, int&gt;;\n  vector&lt;int&gt; node(2 * n);  // \u6700\u591a\u6709 n-1 \u4e2a\u65b0\u8282\u70b9\n  vector&lt;vector&lt;int&gt;&gt; tree(2 * n);\n  vector&lt;TIII&gt; edges(m);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    edges[i] = {w, u, v};\n  }\n\n  vector&lt;int&gt; root(2 * n);\n  iota(root.begin(), root.end(), 0);\n  auto find = [&amp;](int x) {\n    while (root[x] != x) {\n      root[x] = root[root[x]];\n      x       = root[x];\n    }\n    return x;\n  };\n\n  // Kruskal\u91cd\u6784\n  sort(edges.begin(), edges.end());\n  int idx = n, edge_count = 0;\n  for (const auto &amp;[w, u, v] : edges) {\n    int ru = find(u);\n    int rv = find(v);\n    if (ru != rv) {\n      ++idx;\n      root[ru] = root[rv] = idx;\n      node[idx]           = w;\n      tree[idx].emplace_back(ru);\n      tree[idx].emplace_back(rv);\n      ++edge_count;\n    }\n    if (edge_count == n - 1) { break; }\n  }\n\n  int q;\n  cin &gt;&gt; q &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; P;\n  // Tarjan\u79bb\u7ebfLCA\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; query(idx + 1);\n  for (int i = 0; i &lt; q; ++i) {\n    int x = rnd() % n + 1;\n    int y = rnd() % n + 1;\n    query[x].emplace_back(y, i);\n    query[y].emplace_back(x, i);\n  }\n  vector&lt;bool&gt; visited(2 * n);\n  vector&lt;int&gt; answer(q);\n  iota(root.begin(), root.end(), 0);\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    visited[x] = true;\n    for (int y : tree[x]) {\n      if (y != from) {\n        self(self, y, x);\n        root[y] = x;  // \u5408\u5e76 y \u548c x\n      }\n    }\n    for (auto [y, idx] : query[x]) {              // \u5904\u7406\u6240\u6709\u548c x \u6709\u5173\u7684\u67e5\u8be2\n      if (visited[y]) { answer[idx] = find(y); }  // y \u5df2\u7ecf\u8bbf\u95ee\u8fc7, \u8bf4\u660e LCA \u5df2\u7ecf\u786e\u5b9a\n    }\n  };\n  dfs(dfs, idx, -1); // \u4ece\u6839\u8282\u70b9\u5f00\u59cbDFS\n\n  const int mod = 1e9 + 7;\n  int ans       = 0;\n  for (int lca : answer) { ans = (ans + node[lca]) % mod; }\n  cout &lt;&lt; ans &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["Graph","Minimum Spanning Tree","MST"]},{"location":"code/algorithm/Graph/ShortestPath/","title":"\u6700\u77ed\u8def\u5f84","text":"","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#\u6700\u77ed\u8def\u5f84","title":"\u6700\u77ed\u8def\u5f84","text":"<p>\u6700\u77ed\u8def\u5f84\u95ee\u9898\u6307\u627e\u5230\u56fe\u4e2d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u6839\u636e\u56fe\u7684\u6027\u8d28\uff08\u6709\u5411\u56fe\u6216\u65e0\u5411\u56fe\uff0c\u5e26\u6743\u91cd\u6216\u4e0d\u5e26\u6743\u91cd\uff0c\u662f\u5426\u5b58\u5728\u8d1f\u6743\u8fb9\u7b49\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002</p>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#dijkstra-\u7b97\u6cd5","title":"Dijkstra \u7b97\u6cd5","text":"<p>\\text{Dijkstra} \u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u8ba1\u7b97\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u8fb9\u6743\u91cd\u975e\u8d1f\u7684\u56fe\u3002\u5b83\u901a\u8fc7\u9010\u6b65\u6269\u5c55\u5df2\u77e5\u6700\u77ed\u8def\u5f84\u7684\u8282\u70b9\u96c6\u5408\uff0c\u6700\u7ec8\u627e\u5230\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u901a\u5e38\u662f\u6700\u5c0f\u5806\uff09\u6765\u9ad8\u6548\u5730\u9009\u62e9\u5f53\u524d\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9\u7684\u65b9\u6cd5\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O((V + E) \\log V)\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\uff0cE \u662f\u8fb9\u6570\u3002</p> <p>Tip</p> <p>\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u8fb9\uff0c\\text{Dijkstra} \u7b97\u6cd5\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u3002\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 \\text{Bellman-Ford} \u6216 \\text{SPFA} \u7b97\u6cd5\u3002</p> \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII = pair&lt;int64_t, int64_t&gt;;\n\nvoid dijkstra(int n, const vector&lt;vector&lt;PII&gt;&gt; &amp;graph, int64_t source) {\n  vector&lt;int64_t&gt; distance(n + 1, INT64_MAX);\n  vector&lt;bool&gt; visit(n + 1, false);\n  distance[source] = 0;\n\n  priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt; pq;  // {distance, node}\n  pq.emplace(0, source);\n\n  while (!pq.empty()) {\n    auto [d, u] = pq.top();\n    pq.pop();\n    if (visit[u]) { continue; }\n    visit[u] = true;\n    for (auto [v, w] : graph[u]) {\n      if (distance[u] + w &lt; distance[v]) {  // \u53d1\u73b0\u66f4\u77ed\u8def\u5f84\n        distance[v] = distance[u] + w;\n        pq.emplace(distance[v], v);\n      }\n    }\n  }\n\n  for (int64_t i = 1; i &lt;= n; ++i) { cout &lt;&lt; distance[i] &lt;&lt; \" \"; }\n}\n\nint main() {\n  int n, m, s;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    int64_t w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n  }\n  dijkstra(n, graph, s);\n  return 0;\n}\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#\u5206\u5c42\u6700\u77ed\u8def\u5f84","title":"\u5206\u5c42\u6700\u77ed\u8def\u5f84","text":"<p>\u5206\u5c42\u56fe\u662f\u5c06\u539f\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u590d\u5236\u591a\u4efd\uff0c\u5f62\u6210\u591a\u4e2a\u5c42\u6b21\u7684\u8282\u70b9\uff0c\u7136\u540e\u5728\u8fd9\u4e9b\u5c42\u6b21\u4e4b\u95f4\u6dfb\u52a0\u8fb9\uff0c\u4ece\u800c\u5c06\u67d0\u4e9b\u590d\u6742\u7684\u8def\u5f84\u95ee\u9898\u8f6c\u5316\u4e3a\u7b80\u5355\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\u5206\u5c42\u56fe\u5e38\u7528\u4e8e\u89e3\u51b3\u5e26\u6709\u989d\u5916\u7ea6\u675f\u6761\u4ef6\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u4f8b\u5982\u9650\u5236\u8def\u5f84\u957f\u5ea6\u3001\u9650\u5236\u7ecf\u8fc7\u7279\u5b9a\u8282\u70b9\u7b49\u3002</p> <p>\u4f7f\u7528 \\text{Dijkstra} \u7b97\u6cd5\u5728\u5206\u5c42\u56fe\u4e0a\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u65f6\u901a\u5e38\u9700\u8981\u589e\u52a0\u8282\u70b9\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4f8b\u5982\u5f53\u524d\u6240\u5728\u7684\u5c42\u6570\u6216\u5df2\u7ecf\u7ecf\u8fc7\u7684\u7279\u5b9a\u8282\u70b9\u6570\u91cf\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u7b97\u6cd5\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u65f6\u8003\u8651\u5230\u8fd9\u4e9b\u989d\u5916\u7684\u7ea6\u675f\u6761\u4ef6\u3002</p> \u98de\u884c\u8def\u7ebf <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u548c m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u6743\u91cd\u3002\u627e\u5230\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 t \u7684\u6700\u77ed\u8def\u5f84\uff0c\u5141\u8bb8\u6700\u591a\u5c06 k \u6761\u8fb9\u7684\u6743\u91cd\u89c6\u4e3a 0\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII  = pair&lt;int64_t, int64_t&gt;;\nusing TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;\n\nint64_t dijkstra(vector&lt;vector&lt;PII&gt;&gt; &amp;graph, int64_t source, int64_t end, int64_t k) {\n  int64_t n = graph.size();\n  vector&lt;vector&lt;int64_t&gt;&gt; distance(n, vector&lt;int64_t&gt;(k + 1, INT32_MAX));\n  vector&lt;vector&lt;bool&gt;&gt; visit(n, vector&lt;bool&gt;(k + 1, false));\n  distance[source][0] = 0;\n\n  priority_queue&lt;TIII, vector&lt;TIII&gt;, greater&lt;&gt;&gt; pq;  // {distance, node, k_used}\n  pq.emplace(0, source, 0);\n\n  while (!pq.empty()) {\n    auto [d, u, k_used] = pq.top();\n    pq.pop();\n    if (u == end) { return d; }\n    if (visit[u][k_used]) { continue; }\n    visit[u][k_used] = true;\n    for (auto [v, w] : graph[u]) {\n      if (distance[u][k_used] + w &lt; distance[v][k_used]) {  // \u4e0d\u4f7f\u7528\n        distance[v][k_used] = distance[u][k_used] + w;\n        pq.emplace(distance[v][k_used], v, k_used);\n      }\n      if (k_used &lt; k &amp;&amp; distance[u][k_used] + 0 &lt; distance[v][k_used + 1]) {  // \u4f7f\u7528\n        distance[v][k_used + 1] = distance[u][k_used];\n        pq.emplace(distance[v][k_used + 1], v, k_used + 1);\n      }\n    }\n  }\n  return -1;\n}\n\nint main() {\n  int64_t n, m, k;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n  int64_t s, t;\n  cin &gt;&gt; s &gt;&gt; t;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n    graph[v].emplace_back(u, w);  // \u65e0\u5411\u56fe\n  }\n  cout &lt;&lt; dijkstra(graph, s, t, k) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> \u5c0f\u96e8\u5750\u5730\u94c1 <p>\u6bcf\u6761\u7ebf\u8def\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u4e58\u8f66\u8d39\u7528\uff0c\u4e14\u6bcf\u6761\u7ebf\u8def\u4e0a\u76f8\u90bb\u7ad9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u76f8\u540c\u3002\u53ef\u4ee5\u5728\u4efb\u610f\u7ebf\u8def\u7684\u8d77\u70b9\u7ad9\u51fa\u53d1\uff0c\u5e76\u4e14\u6bcf\u6b21\u6362\u4e58\u65f6\u90fd\u9700\u8981\u652f\u4ed8\u8be5\u7ebf\u8def\u7684\u4e58\u8f66\u8d39\u7528\u3002\u8bf7\u4f60\u8ba1\u7b97\u4ece\u8d77\u70b9\u7ad9 s \u5230\u7ec8\u70b9\u7ad9 t \u7684\u6700\u5c11\u82b1\u8d39\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;\n\nint64_t dijkstra(const vector&lt;vector&lt;TIII&gt;&gt; &amp;graph, const vector&lt;int64_t&gt; &amp;cost,\n                 const vector&lt;int64_t&gt; &amp;start_lines, int64_t source, int64_t target) {\n  if (source == target) { return 0; }\n  int64_t n = graph.size();\n  int64_t m = cost.size();\n  vector&lt;vector&lt;int64_t&gt;&gt; distance(n, vector&lt;int64_t&gt;(m, INT64_MAX));\n  vector&lt;vector&lt;bool&gt;&gt; visit(n, vector&lt;bool&gt;(m, false));\n\n  priority_queue&lt;TIII, vector&lt;TIII&gt;, greater&lt;&gt;&gt; pq;  // {distance, node, line_id}\n  // \u8d77\u70b9\u53ef\u4ee5\u5728\u4e0d\u540c\u7ebf\u8def\u7684\u7ad9\u70b9\u51fa\u53d1, \u521d\u59cb\u8ddd\u79bb\u4e3a\u8be5\u7ebf\u8def\u7684\u82b1\u8d39\n  for (int64_t line_id : start_lines) {\n    distance[source][line_id] = cost[line_id];\n    pq.emplace(distance[source][line_id], source, line_id);\n  }\n  while (!pq.empty()) {\n    auto [d, u, u_line] = pq.top();\n    pq.pop();\n    if (u == target) { return d; }\n    if (visit[u][u_line]) { continue; }  // \u5df2\u7ecf\u5904\u7406\u8fc7\n    visit[u][u_line] = true;\n\n    for (auto [v, w, v_line] : graph[u]) {\n      if (v_line == u_line) {                                 // \u5728\u7ebf\u8def\u5185\u79fb\u52a8\n        if (distance[u][u_line] + w &lt; distance[v][v_line]) {  // \u53d1\u73b0\u66f4\u77ed\u8def\u5f84\n          distance[v][v_line] = distance[u][u_line] + w;\n          pq.emplace(distance[v][v_line], v, v_line);\n        }\n      } else {  // \u6362\u4e58\n        if (distance[u][u_line] + w + cost[v_line] &lt; distance[v][v_line]) {\n          distance[v][v_line] = distance[u][u_line] + w + cost[v_line];\n          pq.emplace(distance[v][v_line], v, v_line);\n        }\n      }\n    }\n  }\n  return -1;\n}\n\nint main() {\n  int64_t n, m, s, t;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n  vector&lt;vector&lt;TIII&gt;&gt; graph(n + 1);  // &lt;to, weight, line_id&gt;\n  vector&lt;int64_t&gt; cost(m + 1);        // \u6bcf\u6761\u7ebf\u7684\u82b1\u8d39, \u4ece1\u5f00\u59cb\u7f16\u53f7\n  vector&lt;int64_t&gt; start_lines;        // \u8d77\u70b9\u6240\u5728\u7684\u7ebf\u8def\n  for (int64_t i = 1; i &lt;= m; ++i) {\n    int64_t a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    cost[i] = a;\n    // \u8bb0\u5f55\u6bcf\u4e2a\u7ad9\u70b9\u5bf9\u5e94\u7684\u7ebf\u8def\n    for (int64_t j = 0, from; j &lt; c; ++j) {\n      int64_t to;\n      cin &gt;&gt; to;\n      if (j &gt; 0) {  // \u8fde\u63a5\u76f8\u90bb\u7ad9\u70b9\n        graph[from].emplace_back(to, b, i);\n        graph[to].emplace_back(from, b, i);\n      }\n      // \u8d77\u70b9\u53ef\u4ee5\u5728\u4e0d\u540c\u7ebf\u8def\u7684\u7ad9\u70b9\u51fa\u53d1\n      if (to == s) { start_lines.emplace_back(i); }\n      from = to;\n    }\n  }\n\n  cout &lt;&lt; dijkstra(graph, cost, start_lines, s, t) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> \u7c73\u5c0f\u6e38\u7684\u5f02\u6216\u6700\u77ed\u8def <p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\uff0c\u5728\u8def\u5f84\u4e0a\u53ef\u4ee5\u9009\u62e9\u8fde\u7eed\u7684\u4e00\u6bb5\u8fb9\uff08\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff09\u5c06\u5b83\u4eec\u7684\u6743\u503c\u90fd\u5f02\u6216\u4e0a\u6574\u6570 x\uff0c\u7136\u540e\u8ba1\u7b97\u8be5\u8def\u5f84\u7684\u8fb9\u6743\u548c\u3002</p> <p>\u6c42\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ece 1 \u51fa\u53d1\u7684\u6700\u5c0f\u53ef\u80fd\u4ee3\u4ef7\uff08\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5f02\u6216\u64cd\u4f5c\uff09\u3002</p> <p>\u9700\u8981\u7f51\u7ad9\u4f1a\u5458\u63d0\u4ea4</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII  = pair&lt;int64_t, int64_t&gt;;\nusing TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;\n\nint main() {\n  int64_t n, m, x;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n  }\n\n  // \u6bcf\u4e2a\u8282\u70b9\u4e09\u79cd\u72b6\u6001: \u672a\u5f00\u59cb\u5f02\u6216, \u5df2\u5f00\u59cb\u672a\u7ed3\u675f\u5f02\u6216, \u5df2\u7ed3\u675f\u5f02\u6216\n  vector&lt;vector&lt;int64_t&gt;&gt; distance(n + 1, vector&lt;int64_t&gt;(3, INT64_MAX));\n  vector&lt;vector&lt;bool&gt;&gt; visit(n + 1, vector&lt;bool&gt;(3, false));\n  // \u7b2c\u4e00\u9879\u4e3a\u8ddd\u79bb, \u7b2c\u4e8c\u9879\u4e3a\u8282\u70b9,\n  // \u7b2c\u4e09\u9879\u4e3a\u72b6\u6001(0:\u672a\u5f00\u59cb\u5f02\u6216,1:\u5df2\u5f00\u59cb\u672a\u7ed3\u675f\u5f02\u6216,2:\u5df2\u7ed3\u675f\u5f02\u6216)\n  priority_queue&lt;TIII, vector&lt;TIII&gt;, greater&lt;&gt;&gt; pq;\n  pq.emplace(0, 1, 0);\n  distance[1] = {0, 0, 0};\n\n  while (!pq.empty()) {\n    auto [dis, u, state] = pq.top();\n    pq.pop();\n    // \u5982\u679c\u53ea\u9700\u627e\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84, \u53ef\u4ee5\u5728\u8fd9\u91cc\u52a0\u4e00\u4e2a\u5224\u65ad\u76f8\u7b49\u5c31\u76f4\u63a5break\n    if (visit[u][state]) { continue; }  // \u5df2\u7ecf\u5904\u7406\u8fc7\n    visit[u][state] = true;\n    for (auto [v, w] : graph[u]) {\n      if (state == 0) {                             // \u672a\u5f00\u59cb\u5f02\u6216, \u53ef\u4ee5\u9009\u62e9\u5f00\u59cb\u5f02\u6216\u6216\u8005\u4e0d\u5f00\u59cb\u5f02\u6216\n        if (distance[u][0] + w &lt; distance[v][0]) {  // \u4e0d\u5f00\u59cb\u5f02\u6216\n          distance[v][0] = distance[u][0] + w;\n          pq.emplace(distance[v][0], v, 0);\n        }\n        if (distance[u][0] + (w ^ x) &lt; distance[v][1]) {  // \u5f00\u59cb\u5f02\u6216\n          distance[v][1] = distance[u][0] + (w ^ x);\n          pq.emplace(distance[v][1], v, 1);\n        }\n      } else if (state == 1) {  // \u5df2\u5f00\u59cb\u672a\u7ed3\u675f\u5f02\u6216, \u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u5f02\u6216\u6216\u8005\u7ed3\u675f\u5f02\u6216\n        if (distance[u][1] + (w ^ x) &lt; distance[v][1]) {  // \u7ee7\u7eed\u5f02\u6216\n          distance[v][1] = distance[u][1] + (w ^ x);\n          pq.emplace(distance[v][1], v, 1);\n        }\n        if (distance[u][1] + w &lt; distance[v][2]) {  // \u7ed3\u675f\u5f02\u6216\n          distance[v][2] = distance[u][1] + w;\n          pq.emplace(distance[v][2], v, 2);\n        }\n      } else if (state == 2) {  // \u7ed3\u675f\u5f02\u6216\u4e4b\u540e\u53ea\u80fd\u4fdd\u6301\u7ed3\u675f\u5f02\u6216\u72b6\u6001\n        if (distance[u][2] + w &lt; distance[v][2]) {\n          distance[v][2] = distance[u][2] + w;\n          pq.emplace(distance[v][2], v, 2);\n        }\n      }\n    }\n  }\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    int64_t ans = min({distance[i][0], distance[i][1], distance[i][2]});\n    if (ans == INT64_MAX) {\n      cout &lt;&lt; -1 &lt;&lt; \" \";\n    } else {\n      cout &lt;&lt; ans &lt;&lt; \" \";\n    }\n  }\n}\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#floyd-warshall-\u7b97\u6cd5","title":"Floyd-Warshall \u7b97\u6cd5","text":"<p>\\text{Floyd-Warshall} \u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u8fb9\u6743\u91cd\u53ef\u4ee5\u4e3a\u8d1f\u4f46\u4e0d\u542b\u8d1f\u73af\u7684\u56fe\u3002\u5b83\u901a\u8fc7\u9010\u6b65\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e2d\u95f4\u8282\u70b9\uff0c\u66f4\u65b0\u6240\u6709\u8282\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V^3)\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\u3002</p> <p>\\text{Floyd-Warshall} \u7b97\u6cd5\u7684\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  distance[i][j] = \\min(distance[i][j], distance[i][k] + distance[k][j])  <p>\u5176\u4e2d k \u662f\u5f53\u524d\u8003\u8651\u7684\u4e2d\u95f4\u8282\u70b9\u3002</p> <p>\\text{Floyd-Warshall} \u7b97\u6cd5\u4e0d\u4ec5\u53ef\u4ee5\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u68c0\u6d4b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\u3002\u5982\u679c\u5728\u7b97\u6cd5\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u53d1\u73b0 distance[i][i] &lt; 0\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\u3002</p> Clear And Present Danger S <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u4ece\u8282\u70b9 1 \u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8282\u70b9\uff0c\u6700\u540e\u5230\u8fbe\u8282\u70b9 m\u3002\u56fe\u4e2d\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u6743\u91cd\uff0c\u8868\u793a\u901a\u8fc7\u8be5\u8fb9\u7684\u4ee3\u4ef7\u3002\u8bf7\u8ba1\u7b97\u4ece\u8282\u70b9 1 \u5230\u8282\u70b9 m \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve() {}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;int64_t&gt;&gt; distance(n + 1, vector&lt;int64_t&gt;(n + 1, INT64_MAX));\n  vector&lt;int64_t&gt; path(m);\n  for (int64_t i = 0; i &lt; m; ++i) { cin &gt;&gt; path[i]; }\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    for (int64_t j = 1; j &lt;= n; ++j) { cin &gt;&gt; distance[i][j]; }\n  }\n  // floyd\n  for (int k = 1; k &lt;= n; ++k) {  // \u679a\u4e3e\u4e2d\u8f6c\u70b9\n    for (int i = 1; i &lt;= n; ++i) {\n      for (int j = 1; j &lt;= n; ++j) {\n        // \u627e\u5230\u66f4\u77ed\u8def\u5f84\n        if (distance[i][k] != INT64_MAX &amp;&amp; distance[k][j] != INT64_MAX\n            &amp;&amp; distance[i][k] + distance[k][j] &lt; distance[i][j]) {\n          distance[i][j] = distance[i][k] + distance[k][j];\n        }\n      }\n    }\n  }\n  int64_t ans = 0;\n  for (int64_t i = 1; i &lt; m; ++i) { ans += distance[path[i - 1]][path[i]]; }\n  cout &lt;&lt; ans &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> <p>\u4ece distance \u6570\u7ec4\u4e2d\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a pass \u6570\u7ec4\u6765\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u4e2d\u95f4\u8282\u70b9\uff0c\u4ece\u800c\u91cd\u6784\u6700\u77ed\u8def\u5f84\u3002</p> \u8def\u5f84\u91cd\u6784 C++<pre><code>void floyd(vector&lt;vector&lt;int64_t&gt;&gt; &amp;distance) {\n  int n = distance.size();\n  vector&lt;vector&lt;int64_t&gt;&gt; pass(n, vector&lt;int64_t&gt;(n, -1));  // \u8bb0\u5f55\u8def\u5f84\u4e2d\u8f6c\u70b9\n  for (int k = 0; k &lt; n; ++k) {  // \u679a\u4e3e\u4e2d\u8f6c\u70b9\n    for (int i = 0; i &lt; n; ++i) {\n      for (int j = 0; j &lt; n; ++j) {\n        // \u627e\u5230\u66f4\u77ed\u8def\u5f84\n        if (distance[i][k] != INT64_MAX &amp;&amp; distance[k][j] != INT64_MAX\n            &amp;&amp; distance[i][k] + distance[k][j] &lt; distance[i][j]) {\n          distance[i][j] = distance[i][k] + distance[k][j];\n          pass[i][j]     = k;  // \u8bb0\u5f55\u4e2d\u8f6c\u70b9\n        }\n      }\n    }\n  }\n\n  // \u91cd\u6784\u8def\u5f84\n  vector&lt;int64_t&gt; path;\n  function&lt;void(int64_t, int64_t)&gt; get_path = [&amp;](int64_t u, int64_t v) {\n    if (distance[u][v] == INT64_MAX) { return; }  // \u4e0d\u53ef\u8fbe\n    if (pass[u][v] == -1) {  // u-&gt;v \u4e4b\u95f4\u6ca1\u6709\u4e2d\u8f6c\u70b9\n      if (path.empty()) { path.push_back(u); } // \u53ea\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u6dfb\u52a0\u8d77\u70b9\n      path.push_back(v); // \u6dfb\u52a0\u7ec8\u70b9\n      return;\n    }\n    int64_t k = pass[u][v];\n    get_path(u, k);\n    get_path(k, v);\n  };\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#bellman-ford-\u7b97\u6cd5","title":"Bellman-Ford \u7b97\u6cd5","text":"<p>\\text{Bellman-Ford} \u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u8ba1\u7b97\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u8fb9\u6743\u91cd\u53ef\u4ee5\u4e3a\u8d1f\u4f46\u4e0d\u542b\u8d1f\u73af\u7684\u56fe\u3002\u5b83\u901a\u8fc7\u9010\u6b65\u677e\u5f1b\u6240\u6709\u8fb9\uff0c\u6700\u7ec8\u627e\u5230\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V \\cdot E)\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\uff0cE \u662f\u8fb9\u6570\u3002</p> <p>\\text{Bellman-Ford} \u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9 (u, v)\uff0c\u5982\u679c\u901a\u8fc7 u \u5230\u8fbe v \u7684\u8def\u5f84\u6bd4\u5f53\u524d\u5df2\u77e5\u7684\u6700\u77ed\u8def\u5f84\u66f4\u77ed\uff0c\u5219\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316\uff1a\u5c06\u8d77\u59cb\u8282\u70b9 s \u7684\u8ddd\u79bb\u8bbe\u4e3a 0\uff0c\u5176\u4ed6\u8282\u70b9\u7684\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927</li> <li>\u677e\u5f1b\u64cd\u4f5c\uff1a\u5bf9\u6bcf\u4e00\u6761\u8fb9 (u, v)\uff0c\u5982\u679c distance[u] + w(u, v) &lt; distance[v]\uff0c\u5219\u66f4\u65b0 distance[v] = distance[u] + w(u, v)</li> <li>\u91cd\u590d\u6267\u884c\u677e\u5f1b\u64cd\u4f5c V-1 \u6b21</li> <li>\u68c0\u6d4b\u8d1f\u73af\uff1a\u5982\u679c\u5728\u7b2c V \u6b21\u677e\u5f1b\u64cd\u4f5c\u4e2d\u4ecd\u7136\u80fd\u591f\u66f4\u65b0\u67d0\u6761\u8fb9\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af</li> </ol> <p>\u5168\u5c40\u8d1f\u73af\u68c0\u6d4b</p> <p>\u5982\u679c\u53ea\u9700\u8981\u68c0\u6d4b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u65b0\u589e\u4e00\u4e2a\u865a\u62df\u6e90\u70b9\uff0c\u8fde\u63a5\u5230\u6240\u6709\u8282\u70b9\uff0c\u8fb9\u6743\u91cd\u4e3a0\u3002</p> \u3010\u6a21\u677f\u3011\u8d1f\u73af <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4ece\u8282\u70b9 1 \u51fa\u53d1\u53ef\u8fbe\u7684\u8d1f\u73af\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve() {\n  const int64_t INF = INT64_MAX;\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  using TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;  // (from, to, weight)\n  vector&lt;TIII&gt; edges;\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    if (w &lt; 0) {\n      edges.emplace_back(u, v, w);\n    } else {\n      edges.emplace_back(u, v, w);\n      edges.emplace_back(v, u, w);\n    }\n  }\n  int64_t source = 1;\n\n  vector&lt;int64_t&gt; backup;\n  vector&lt;int64_t&gt; distance(n + 1, INF);\n  distance[source] = 0;\n  // \u6700\u591a\u677e\u5f1bn-1\u6b21\n  for (int i = 0; i &lt; n - 1; ++i) {\n    backup = distance;\n    for (const auto &amp;edge : edges) {\n      auto [from, to, weight] = edge;\n      // \u677e\u5f1b\u64cd\u4f5c\n      if (backup[from] != INF &amp;&amp; distance[to] &gt; backup[from] + weight) {\n        distance[to] = backup[from] + weight;\n      }\n    }\n  }\n  // \u68c0\u6d4b\u8d1f\u73af\n  for (const auto &amp;edge : edges) {\n    auto [from, to, weight] = edge;\n    if (distance[from] != INF &amp;&amp; distance[to] &gt; distance[from] + weight) {  // \u6709\u8d1f\u73af\n      cout &lt;&lt; \"YES\\n\";\n      return;\n    }\n  }\n  cout &lt;&lt; \"NO\\n\";\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n}\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#spfa-\u7b97\u6cd5","title":"SPFA \u7b97\u6cd5","text":"<p>\\text{SPFA}\uff08Shortest Path Faster Algorithm\uff09\u7b97\u6cd5\u662f \\text{Bellman-Ford} \u7b97\u6cd5\u7684\u4e00\u79cd\u4f18\u5316\u7248\u672c\uff0c\u9002\u7528\u4e8e\u8fb9\u6743\u91cd\u53ef\u4ee5\u4e3a\u8d1f\u4f46\u4e0d\u542b\u8d1f\u73af\u7684\u56fe\u3002</p> <p>\\text{SPFA}\uff08Shortest Path Faster Algorithm\uff09\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u4f7f\u7528\u961f\u5217\u6765\u5b58\u50a8\u9700\u8981\u677e\u5f1b\u7684\u8282\u70b9\uff0c\u53ea\u6709\u5f53\u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u88ab\u66f4\u65b0\u65f6\uff0c\u624d\u5c06\u5176\u52a0\u5165\u961f\u5217\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(kE)\uff0c\u5176\u4e2d k \u662f\u6bcf\u6761\u8fb9\u88ab\u677e\u5f1b\u7684\u5e73\u5747\u6b21\u6570\uff0cE \u662f\u8fb9\u6570\u3002\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\\text{SPFA} \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(VE) \uff08xxxx\uff0c\u5b83\u6b7b\u4e86\uff09\u3002</p> <p>\u5168\u5c40\u8d1f\u73af\u68c0\u6d4b</p> <p>\u5982\u679c\u53ea\u9700\u8981\u68c0\u6d4b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u65b0\u589e\u4e00\u4e2a\u865a\u62df\u6e90\u70b9\uff0c\u8fde\u63a5\u5230\u6240\u6709\u8282\u70b9\uff0c\u8fb9\u6743\u91cd\u4e3a0\u3002</p> \u3010\u6a21\u677f\u3011\u8d1f\u73af <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4ece\u8282\u70b9 1 \u51fa\u53d1\u53ef\u8fbe\u7684\u8d1f\u73af\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid solve() {\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  using PII = pair&lt;int, int&gt;;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    if (w &lt; 0) {\n      graph[u].emplace_back(v, w);\n    } else {\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n  }\n  int64_t source = 1;\n\n  vector&lt;int64_t&gt; distance(n + 1, INT64_MAX);\n  vector&lt;bool&gt; in_queue(n + 1, false);  // \u6807\u5fd7\u662f\u5426\u5728\u961f\u5217\u4e2d\n  vector&lt;int64_t&gt; counter(n + 1, 0);    // \u8bb0\u5f55\u677e\u5f1b\u6b21\u6570\uff0c\u7528\u4e8e\u68c0\u6d4b\u8d1f\u73af\n\n  distance[source] = 0;\n  queue&lt;int64_t&gt; q;\n  q.emplace(source);\n  in_queue[source] = true;  // \u6807\u8bb0\u5df2\u5165\u961f\n  counter[source]  = 1;     // \u677e\u5f1b\u6b21\u6570\u52a01\n\n  while (!q.empty()) {\n    int64_t u = q.front();\n    q.pop();\n    in_queue[u] = false;\n    // \u5c1d\u8bd5\u4f7f\u7528\u8be5\u70b9\uff0c\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    for (auto [v, w] : graph[u]) {\n      if (distance[u] + w &lt; distance[v]) {\n        distance[v] = distance[u] + w;\n        if (in_queue[v]) { continue; }  // \u5df2\u5165\u961f\n        counter[v]++;                   // \u677e\u5f1b\u6b21\u6570\u52a01\n        if (counter[v] &gt; n - 1) {       // \u677e\u5f1b\u6b21\u6570\u8d85\u8fc7n-1\u6b21\uff0c\u6709\u8d1f\u73af\n          cout &lt;&lt; \"YES\\n\";\n          return;\n        }\n        q.emplace(v);        // \u5165\u961f\n        in_queue[v] = true;  // \u6807\u8bb0\u5df2\u5165\u961f\n      }\n    }\n  }\n  cout &lt;&lt; \"NO\\n\";\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n}\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#johnson-\u7b97\u6cd5","title":"Johnson \u7b97\u6cd5","text":"<p>\u5982\u679c\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\u5f84\uff1a</p> <ul> <li>\u6ca1\u6709\u8d1f\u8fb9\uff1a\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8c03\u7528 \\text{Dijkstra} \u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(V (V + E) \\log V)</li> <li>\u6709\u8d1f\u8fb9\uff1a<ul> <li>\u4f7f\u7528 n \u6b21 \\text{Bellman-Ford} \u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(V^2 E)</li> <li>\u4f7f\u7528 \\text{Floyd} \u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(V^3)</li> </ul> </li> </ul> <p>\\text{Johnson} \u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u8fb9\u6743\u91cd\u53ef\u4ee5\u4e3a\u8d1f\u4f46\u4e0d\u542b\u8d1f\u73af\u7684\u56fe\u3002\u5b83\u7ed3\u5408\u4e86 \\text{Bellman-Ford} \u548c \\text{Dijkstra} \u7b97\u6cd5\u7684\u4f18\u70b9\uff0c\u80fd\u591f\u9ad8\u6548\u5730\u5904\u7406\u7a00\u758f\u56fe\u3002</p> <p>\\text{Johnson} \u7b97\u6cd5\u7684\u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u65b0\u589e\u4e00\u4e2a\u865a\u62df\u8282\u70b9 q\uff0c\u8fde\u63a5\u5230\u56fe\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u8fb9\u6743\u91cd\u4e3a 0\u3002</li> <li>\u4f7f\u7528 \\text{Bellman-Ford} \u7b97\u6cd5\u4ece\u865a\u62df\u8282\u70b9 q \u51fa\u53d1\uff0c\u8ba1\u7b97\u4ece q \u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb h(v)\u3002</li> <li>\u5bf9\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9 (u, v)\uff0c\u91cd\u65b0\u8ba1\u7b97\u8fb9\u6743\u91cd\u4e3a w'(u, v) = w(u, v) + h(u) - h(v)\uff0c\u8fd9\u6837\u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u53d8\u4e3a\u975e\u8d1f\u3002</li> <li>\u5bf9\u6bcf\u4e2a\u8282\u70b9 u\uff0c\u4f7f\u7528 \\text{Dijkstra} \u7b97\u6cd5\u8ba1\u7b97\u4ece u \u51fa\u53d1\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb d'(u, v)\u3002</li> <li>\u6700\u7ec8\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u4e3a d(u, v) = d'(u, v) - h(u) + h(v)\u3002</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V^2 \\log V + VE)\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\uff0cE \u662f\u8fb9\u6570\u3002</p> <p>\u5168\u5c40\u8d1f\u73af\u68c0\u6d4b</p> <p>\\text{Johnson} \u7b97\u6cd5\u4e0d\u80fd\u5904\u7406\u542b\u6709\u8d1f\u73af\u7684\u56fe\u3002\u5982\u679c\u5728\u7b2c 2 \u6b65\u4e2d \\text{Bellman-Ford} \u7b97\u6cd5\u68c0\u6d4b\u5230\u8d1f\u73af\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u7b97\u6cd5\u7ec8\u6b62\u3002</p> \u3010\u6a21\u677f\u3011\u5168\u6e90\u6700\u77ed\u8def\uff08Johnson\uff09 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII         = pair&lt;int64_t, int64_t&gt;;\n\nconst int64_t INF = 1e9;\n\nvector&lt;int64_t&gt; dijkstra(vector&lt;vector&lt;PII&gt;&gt; &amp;graph, int64_t source, vector&lt;int64_t&gt; &amp;distance) {\n  int64_t n = graph.size();\n  distance  = vector&lt;int64_t&gt;(n, INF);\n  vector&lt;bool&gt; visit(n);\n\n  priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt; pq;\n  pq.emplace(0, source);\n  distance[source] = 0;\n\n  while (!pq.empty()) {\n    auto [dis, u] = pq.top();\n    pq.pop();\n    if (visit[u]) { continue; }\n    visit[u] = true;\n    for (auto [v, w] : graph[u]) {\n      if (distance[u] + w &lt; distance[v]) {\n        distance[v] = distance[u] + w;\n        pq.emplace(distance[v], v);\n      }\n    }\n  }\n  return distance;\n}\n\nvector&lt;int64_t&gt; SPFA(const vector&lt;vector&lt;PII&gt;&gt; &amp;graph, int64_t source) {\n  int64_t n = graph.size();\n  vector&lt;int64_t&gt; distance(n, INF);\n  vector&lt;bool&gt; in_queue(n);    // \u6807\u5fd7\u662f\u5426\u5728\u961f\u5217\u4e2d\n  vector&lt;int64_t&gt; counter(n);  // \u8bb0\u5f55\u677e\u5f1b\u6b21\u6570\uff0c\u7528\u4e8e\u68c0\u6d4b\u8d1f\u73af\n\n  distance[source] = 0;\n  queue&lt;int64_t&gt; q;\n  q.emplace(source);\n  in_queue[source] = true;\n  counter[source]  = 1;\n\n  while (!q.empty()) {\n    int64_t u = q.front();\n    q.pop();\n    in_queue[u] = false;\n    for (auto [v, w] : graph[u]) {\n      if (distance[u] + w &lt; distance[v]) {\n        distance[v] = distance[u] + w;\n        if (in_queue[v]) { continue; }  // \u5df2\u5165\u961f\n        counter[v]++;\n        if (counter[v] &gt; n - 1) {  // \u6709\u8d1f\u73af\n          return {};\n        }\n        q.emplace(v);\n        in_queue[v] = true;\n      }\n    }\n  }\n  return distance;\n}\n\nvoid johnson(int n, vector&lt;vector&lt;PII&gt;&gt; &amp;graph) {\n  // 2. \u4f7f\u7528SPFA\u4eces\u51fa\u53d1\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bbh(v)\n  vector&lt;int64_t&gt; h = SPFA(graph, 0);\n  // \u6709\u8d1f\u73af, \u65e0\u6cd5\u4f7f\u7528Johnson\u7b97\u6cd5\n  if (h.empty()) {\n    cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n    return;\n  }\n  // 3. \u5bf9\u6bcf\u6761\u8fb9(u, v)\u91cd\u65b0\u6807\u6ce8\u8fb9\u6743 w'(u, v) = w(u, v) + h(u) - h(v)\n  for (int64_t u = 1; u &lt;= n; ++u) {\n    for (auto &amp;[v, w] : graph[u]) { w = w + h[u] - h[v]; }\n  }\n\n  // 4. \u5bf9\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528Dijkstra\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\n  vector&lt;vector&lt;int64_t&gt;&gt; distances(n + 1);\n  for (int64_t u = 1; u &lt;= n; ++u) {\n    dijkstra(graph, u, distances[u]);\n    // \u6700\u7ec8\u7ed3\u679c distance(u, v) = distance'(u, v) - h(u) + h(v)\n    for (int64_t v = 1; v &lt;= n; ++v) {\n      if (distances[u][v] != INF) { distances[u][v] = distances[u][v] - h[u] + h[v]; }\n    }\n  }\n\n  for (int64_t u = 1; u &lt;= n; ++u) {\n    int64_t sum = 0;\n    for (int64_t j = 1; j &lt;= n; ++j) { sum += j * distances[u][j]; }\n    cout &lt;&lt; sum &lt;&lt; \"\\n\";\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n  }\n  // 1. \u589e\u52a0\u865a\u62df\u8282\u70b9s, \u7f16\u53f7\u4e3a0, \u8fde\u63a5\u56fe\u4e2d\u6240\u6709\u8282\u70b9, \u8fb9\u6743\u4e3a0\n  graph[0].resize(n);\n  for (int64_t i = 1; i &lt;= n; ++i) { graph[0][i - 1] = {i, 0}; }\n  johnson(n, graph);\n  return 0;\n}\n</code></pre>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#\u5176\u4ed6\u6700\u77ed\u8def\u5f84\u95ee\u9898","title":"\u5176\u4ed6\u6700\u77ed\u8def\u5f84\u95ee\u9898","text":"","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#\u7ecf\u8fc7\u6070\u597d-k-\u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf","title":"\u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u8ba1\u7b97\u4ece\u8d77\u70b9 s \u5230\u7ec8\u70b9 t \u7684\u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\uff08walk\uff0c\u5141\u8bb8\u91cd\u590d\u7ecf\u8fc7\u8282\u70b9\u6216\u8fb9\uff09\u3002</p> <p>\u5047\u8bbe\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u4e3a A\uff0c\u5176\u4e2d A[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u662f\u5426\u6709\u8fb9\uff081 \u8868\u793a\u6709\u8fb9\uff0c0 \u8868\u793a\u65e0\u8fb9\uff09\u3002\u90a3\u4e48 A^k \u7684\u7b2c i \u884c\u7b2c j \u5217\u7684\u503c\u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6734\u7d20\u7684\u77e9\u9635\u4e58\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3)\uff0c\u8ba1\u7b97 A^k \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3 \\log k)\u3002</p> \u8bc1\u660e <p>A^{k}[i][j] \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8ba1\u7b97\uff1a</p>  A^{k}[i][j] = \\sum_{m=1}^{n} A[i][m] \\cdot A^{k-1}[m][j]  <p>\u5176\u4e2d n \u662f\u56fe\u4e2d\u7684\u8282\u70b9\u6570\u3002\u8fd9\u4e2a\u516c\u5f0f\u8868\u793a\u4ece\u8282\u70b9 i \u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e00\u6761\u8fb9\u5230\u8fbe\u8282\u70b9 m\uff0c\u7136\u540e\u4ece\u8282\u70b9 m \u51fa\u53d1\u7ecf\u8fc7 k-1 \u6761\u8fb9\u5230\u8fbe\u8282\u70b9 j \u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u6570\u91cf\u7684\u603b\u548c\u3002</p> <p>\u901a\u8fc7\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u516c\u5f0f\u7684\u6b63\u786e\u6027\uff1a</p> <ul> <li>\u5f53 k=1 \u65f6\uff0c\u6709 A^{1} = A\uff0c\u663e\u7136\u6210\u7acb\u3002</li> <li>\u5f52\u7eb3\u5047\u8bbe\uff1a\u5047\u8bbe\u5bf9\u4e8e\u67d0\u4e2a k \\geq 1\uff0c\u516c\u5f0f\u6210\u7acb\uff0c\u5373 A^{k}[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u3002</li> <li> <p>\u5f52\u7eb3\u6b65\u9aa4\uff1a\u8003\u8651 k+1 \u7684\u60c5\u51b5\u3002\u7b2c k+1 \u6b65\u53ef\u4ee5\u5148\u4ece\u8282\u70b9 i \u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e00\u6761\u8fb9\u5230\u8fbe\u8282\u70b9 m\uff0c\u7136\u540e\u4ece\u8282\u70b9 m \u51fa\u53d1\u7ecf\u8fc7 k \u6761\u8fb9\u5230\u8fbe\u8282\u70b9 j\u3002\u6839\u636e\u5f52\u7eb3\u5047\u8bbe\uff0cA^{k}[m][j] \u8868\u793a\u4ece\u8282\u70b9 m \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u3002\u56e0\u6b64\uff1a</p>  A^{k+1}[i][j] = \\sum_{m=1}^{n} A[i][m] \\cdot A^{k}[m][j]  <p>\u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c\u6709\uff1a</p>  A^{k+1} = A \\cdot A^{k}  <p>\u56e0\u6b64\u5f52\u7eb3\u6b65\u9aa4\u6210\u7acb\u3002</p> </li> </ul> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u901a\u8fc7\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u90bb\u63a5\u77e9\u9635\u7684\u5e42\u6b21\uff0c\u53ef\u4ee5\u5f97\u5230\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u3002</p> <p>\u53d8\u79cd\u95ee\u9898</p> <ul> <li>\u6070\u597d k \u6761\u8fb9\u7684\u6700\u77ed\u8def\uff1a(min\uff0c+) \u4ee3\u6570\u4e0b\u6c42 A^k\u3002</li> <li>\u5982\u679c\u9700\u8981\u8ba1\u7b97\u4ece\u8d77\u70b9 s \u5230\u7ec8\u70b9 t \u7684\u7ecf\u8fc7\u6700\u591a k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\uff0c\u53ef\u4ee5\u8ba1\u7b97 A^1 + A^2 + ... + A^k\uff0c\u7136\u540e\u53d6\u51fa\u7ed3\u679c\u77e9\u9635\u4e2d\u7684\u7b2c s \u884c\u7b2c t \u5217\u7684\u503c\u3002</li> <li>\u5982\u679c\u9700\u8981\u8ba1\u7b97\u4ece\u8d77\u70b9 s \u5230\u7ec8\u70b9 t \u7684\u7ecf\u8fc7\u81f3\u5c11 k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\uff0c\u53ef\u4ee5\u8ba1\u7b97\u603b\u8def\u5f84\u6570\u91cf\u51cf\u53bb\u7ecf\u8fc7\u5c11\u4e8e k \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u3002</li> </ul>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/ShortestPath/#\u5b9a\u957f\u6700\u77ed\u8def\u5f84","title":"\u5b9a\u957f\u6700\u77ed\u8def\u5f84","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\uff0c\u8ba1\u7b97\u4ece\u4efb\u610f\u8d77\u70b9 s \u5230\u4efb\u610f\u7ec8\u70b9 t \u7684\u7ecf\u8fc7\u6070\u597d k \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e \\text{Floyd-Warshall} \u7b97\u6cd5\u7684\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5b9a\u4e49 dp^{m} [i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d m \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u521d\u59cb\u6761\u4ef6\u4e3a\uff1a</p> <ul> <li>\u5f53 m=0 \u65f6\uff0cdp^{0}[i][i] = 0\uff0c\u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 i \u7ecf\u8fc7 0 \u6761\u8fb9\u7684\u8def\u5f84\u957f\u5ea6\u4e3a 0\u3002</li> <li> <p>\u5f53 m=1 \u65f6\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j\uff0c\u5219 dp^{1}[i][j] = w(i, j)\uff0c\u5176\u4e2d w(i, j) \u662f\u8fb9 (i, j) \u7684\u6743\u91cd\u3002</p> <p>\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  dp^{m}[i][j] = \\min_{p \\in \\text{adj}(j)} (dp^{m-1}[i][p] + w(p, j))  <p>\u5176\u4e2d p \u662f\u6240\u6709\u4e0e\u8282\u70b9 j \u76f8\u90bb\u7684\u8282\u70b9\u3002</p> </li> </ul> <p>\u6700\u7ec8\u7b54\u6848\u4e3a dp^{k}[s][t]\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V^3 \\cdot k)\uff0c\u5176\u4e2d V \u662f\u8282\u70b9\u6570\uff0ck \u662f\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(V^3 \\log k)\u3002\u5c06\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\u4e3a\u4e00\u4e2a\u77e9\u9635 A\uff0c\u5176\u4e2d A[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7684\u8fb9\u6743\u91cd\uff08\u5982\u679c\u6ca1\u6709\u8fb9\u5219\u4e3a\u65e0\u7a77\u5927\uff09\u3002\u8f6c\u79fb\u65b9\u7a0b\u5c31\u8868\u793a\u4e3a\uff1a</p>  dp^{m}[i][j] = \\min_{1 \\leq p \\leq n} (dp^{m-1}[i][p] + A[p][j])  <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u77e9\u9635 A \u5728 (\\min, +) \u4ee3\u6570\u4e0b\u7684 k \u6b21\u5e42 A^k \u6765\u8ba1\u7b97\uff0c\u4e8e\u662f\u5f97\u5230\uff1a</p>  dp^{k} = dp^{k-1} \\otimes A = dp^{k-2} \\otimes A^{2} = \\dots = dp^{0} \\otimes A^{k}  <p>\u5982\u679c\u56fa\u5b9a\u8d77\u70b9 s\uff0c\u72b6\u6001\u5b9a\u4e49\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u4e3a\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d m \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u53ef\u4ee5\u7701\u7565\u6389\u4e00\u7ef4\u3002\u72b6\u6001\u8f6c\u79fb\u65f6\u4e5f\u65e0\u9700\u679a\u4e3e\u8d77\u70b9\u3002</p> <p>dp^{m}[j] \u8868\u793a\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 j \u7ecf\u8fc7\u6070\u597d m \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u521d\u59cb\u6761\u4ef6\u4e3a\uff1a</p> <ul> <li>dp^{0}[s] = 0\uff0c\u8868\u793a\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 s \u7ecf\u8fc7 0 \u6761\u8fb9\u7684\u8def\u5f84\u957f\u5ea6\u4e3a 0\u3002</li> <li>\u5bf9\u4e8e\u8282\u70b9 j \\neq s\uff0cdp^{0}[j] = \\infty\uff0c\u8868\u793a\u65e0\u6cd5\u901a\u8fc7 0 \u6761\u8fb9\u5230\u8fbe\u5176\u4ed6\u8282\u70b9\u3002</li> </ul> <p>\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p>  dp^{m}[j] = \\min_{p \\in \\text{adj}(j)} (dp^{m-1}[p] + w(p, j))  <p>\u5176\u4e2d p \u662f\u6240\u6709\u4e0e\u8282\u70b9 j \u76f8\u90bb\u7684\u8282\u70b9\u3002</p> \u725b\u7ad9 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 t \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u957f\u5ea6\u3002\u8ba1\u7b97\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 e \u7ecf\u8fc7\u6070\u597d n \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u91cd\u590d\u8fb9</p> <p>\u8f93\u5165\u6570\u636e\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u8fb9\uff0c\u9700\u8981\u53d6\u6700\u77ed\u7684\u8fb9\u6743\u3002</p> \u52a8\u6001\u89c4\u5212\u77e9\u9635\u5feb\u901f\u5e42\u4f18\u5316 <p>TLE</p> <p>\u5373\u4f7f\u4f7f\u7528\u56fa\u5b9a\u8d77\u70b9\u51cf\u5c11\u4e00\u7ef4\u72b6\u6001\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(n \\cdot m^2)\uff0c\u5176\u4e2d m \u662f\u8282\u70b9\u6570\uff0cn \u662f\u8def\u5f84\u957f\u5ea6\uff0c\u4ecd\u7136\u4f1a\u8d85\u65f6\u3002</p> <p>MLE</p> <p>\u5982\u679c\u4f7f\u7528\u4e09\u7ef4\u6570\u7ec4\u5b58\u50a8\u72b6\u6001\u4f1a\u5bfc\u81f4\u5185\u5b58\u8d85\u9650\uff0c\u56e0\u4e3a\u6b65\u6570 n \u53ef\u80fd\u975e\u5e38\u5927\uff08\u4f8b\u5982 10^5\uff09\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  using TIII = tuple&lt;int, int, int&gt;;\n\n  int n, t, s, e;\n  cin &gt;&gt; n &gt;&gt; t &gt;&gt; s &gt;&gt; e;\n  vector&lt;TIII&gt; edges(t);\n  map&lt;int, int&gt; point_id;\n  for (int i = 0; i &lt; t; ++i) {\n    int l, x, y;\n    cin &gt;&gt; l &gt;&gt; x &gt;&gt; y;\n    if (point_id.count(x) == 0) { point_id[x] = point_id.size(); }\n    if (point_id.count(y) == 0) { point_id[y] = point_id.size(); }\n    edges[i] = {l, point_id[x], point_id[y]};\n  }\n  s         = point_id[s];\n  e         = point_id[e];\n  int m     = point_id.size();\n\n  using VI  = vector&lt;int&gt;;\n  using VVI = vector&lt;VI&gt;;\n\n  VVI graph(m, VI(m, INT32_MAX / 2));\n  for (const auto &amp;[l, x, y] : edges) { graph[x][y] = graph[y][x] = min(graph[x][y], l); }\n\n  VVI dp(m, VI(m, INT32_MAX / 2));\n  for (int j = 0; j &lt; m; ++j) { dp[j][j] = 0; }\n  VVI dp_next(m, VI(m, INT32_MAX / 2));\n  for (int i = 1; i &lt;= n; ++i) {  // \u679a\u4e3e\u6b65\u6570\n    fill(dp_next.begin(), dp_next.end(), VI(m, INT32_MAX / 2));\n    for (int j = 0; j &lt; m; ++j) {      // \u679a\u4e3e\u8d77\u70b9\n      for (int k = 0; k &lt; m; ++k) {    // \u679a\u4e3e\u7ec8\u70b9\n        for (int l = 0; l &lt; m; ++l) {  // \u679a\u4e3e\u4e2d\u8f6c\u70b9\n          dp_next[j][k] = min(dp_next[j][k], dp[j][l] + graph[l][k]);\n        }\n      }\n    }\n    dp = dp_next;\n  }\n  cout &lt;&lt; dp[s][e] &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u77e9\u9635\u4e58\u6cd5\uff0c\u5b9a\u4e49\u4e3a \"\u6700\u5c0f\u5316\u52a0\u6cd5\"\uff08\u6700\u77ed\u8def\uff09\nvector&lt;vector&lt;int&gt;&gt; multiply(const vector&lt;vector&lt;int&gt;&gt; &amp;a, const vector&lt;vector&lt;int&gt;&gt; &amp;b) {\n  int n = a.size();\n  vector&lt;vector&lt;int&gt;&gt; c(n, vector&lt;int&gt;(n, INT32_MAX / 2));\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) {\n      for (int k = 0; k &lt; n; ++k) { c[i][j] = min(c[i][j], a[i][k] + b[k][j]); }\n    }\n  }\n  return c;\n}\n\n// \u77e9\u9635\u5feb\u901f\u5e42\nvector&lt;vector&lt;int&gt;&gt; pow(vector&lt;vector&lt;int&gt;&gt; base, int exp) {\n  int n = base.size();\n  // \u96f6\u5143\u77e9\u9635: min(a, INT32_MAX / 2) = a\n  vector&lt;vector&lt;int&gt;&gt; result(n, vector&lt;int&gt;(n, INT32_MAX / 2));\n  for (int i = 0; i &lt; n; ++i) { result[i][i] = 0; }  // \u5355\u4f4d\u5143: a + 0 = a\n  while (exp &gt; 0) {\n    if ((exp &amp; 1) != 0) { result = multiply(result, base); }\n    base   = multiply(base, base);\n    exp  &gt;&gt;= 1;\n  }\n  return result;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  using TIII = tuple&lt;int, int, int&gt;;\n\n  int n, t, s, e;\n  cin &gt;&gt; n &gt;&gt; t &gt;&gt; s &gt;&gt; e;\n  vector&lt;TIII&gt; edges(t);\n  map&lt;int, int&gt; point_id;\n  for (int i = 0; i &lt; t; ++i) {\n    int l, x, y;\n    cin &gt;&gt; l &gt;&gt; x &gt;&gt; y;\n    if (point_id.count(x) == 0) { point_id[x] = point_id.size(); }\n    if (point_id.count(y) == 0) { point_id[y] = point_id.size(); }\n    edges[i] = {l, point_id[x], point_id[y]};\n  }\n  s         = point_id[s];\n  e         = point_id[e];\n  int m     = point_id.size();\n\n  using VI  = vector&lt;int&gt;;\n  using VVI = vector&lt;VI&gt;;\n\n  VVI graph(m, VI(m, INT32_MAX / 2));\n  for (const auto &amp;[l, x, y] : edges) { graph[x][y] = graph[y][x] = min(graph[x][y], l); }\n  VVI result = pow(graph, n);\n  cout &lt;&lt; result[s][e] &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> \u4e0d\u8d85\u8fc7 k \u6b65\u6700\u77ed\u8def <p>\u8ba1\u7b97\u4ece\u8d77\u70b9 s \u5230\u7ec8\u70b9 t \u7ecf\u8fc7\u4e0d\u8d85\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u77e9\u9635 B = A^0 + A^1 + ... + A^k \u6765\u5b9e\u73b0\uff0c\u5176\u4e2d A \u662f\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u77e9\u9635\u4e58\u6cd5\u5b9a\u4e49\u4e3a (\\min, +) \u4ee3\u6570\u4e0b\u7684\u4e58\u6cd5\u3002B \u77e9\u9635\u7684\u7b2c s \u884c\u7b2c t \u5217\u7684\u503c\u5373\u4e3a\u6240\u6c42\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u5feb\u901f\u5e42\u7ed3\u5408\u589e\u5e7f\u77e9\u9635\u7684\u65b9\u6cd5\uff0c\u5c06\u90bb\u63a5\u77e9\u9635\u6269\u5c55\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\uff0c\u4ee5\u4fbf\u5728\u8ba1\u7b97\u5e42\u6b21\u65f6\u540c\u65f6\u8003\u8651\u8def\u5f84\u957f\u5ea6\u7684\u7d2f\u79ef\u3002</p> <p>\u6784\u9020\u589e\u5e7f\u77e9\u9635 C\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b\uff1a</p>  C = \\begin{bmatrix} A &amp; I \\\\ 0 &amp; I \\end{bmatrix}  <p>\u5176\u4e2d I \u662f\u5355\u4f4d\u77e9\u9635\uff0c0 \u662f\u96f6\u77e9\u9635\u3002\u8ba1\u7b97 C^{k+1} \u540e\uff0c\u7ed3\u679c\u77e9\u9635\u7684\u53f3\u4e0a\u90e8\u5206\u5373\u4e3a B = A^0 + A^1 + ... + A^k\uff08\u5de6\u4e0a\u90e8\u5206\u662f A^{k+1}\uff09\u3002</p> <p>\u4e5f\u53ef\u4ee5\u5bf9\u539f\u56fe\u4e2d\u6bcf\u4e2a\u8282\u70b9 v \u62d3\u5c55\u51fa\u4e00\u4e2a\u865a\u62df\u8282\u70b9 v'\uff0c\u5e76\u6dfb\u52a0\u8fb9 (v, v') \u548c (v', v)\uff0c\u6743\u91cd\u5747\u4e3a 0\uff08\u5373\u6bcf\u4e2a\u8282\u70b9\u589e\u52a0\u4e00\u4e2a\u81ea\u73af\uff09\u3002\u8fd9\u6837\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 t' \u7684\u6070\u597d k+1 \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u5373\u4e3a\u4ece s \u5230 t \u4e0d\u8d85\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\u3002\u56e0\u4e3a\u539f\u56fe\u4e2d\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u81ea\u73af\u8282\u70b9\u6765\"\u505c\u7559\"\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0d\u8d85\u8fc7 k \u6761\u8fb9\u7684\u8def\u5f84\u957f\u5ea6\u3002</p>","tags":["Graph","\u6700\u77ed\u8def\u5f84","Shortest Path","Dijkstra","Floyd-Warshall","Bellman-Ford","SPFA","Johnson","A*","\u540c\u4f59\u6700\u77ed\u8def\u5f84","Congruence Shortest Path"]},{"location":"code/algorithm/Graph/TopoSort/","title":"\u62d3\u6251\u6392\u5e8f","text":"","tags":["Graph","\u62d3\u6251\u6392\u5e8f","Topological Sort","Critical Path"]},{"location":"code/algorithm/Graph/TopoSort/#\u62d3\u6251\u6392\u5e8f","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u62d3\u6251\u6392\u5e8f\uff08\\text{Topological Sort}\uff09\u662f\u4e00\u79cd\u5bf9\u6709\u5411\u65e0\u73af\u56fe\uff08\\text{DAG}\uff09\u8fdb\u884c\u7ebf\u6027\u6392\u5e8f\u7684\u7b97\u6cd5\u3002\u5b83\u5c06\u56fe\u4e2d\u7684\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6709\u5411\u8fb9 (u, v)\uff0c\u9876\u70b9 u \u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728\u9876\u70b9 v \u4e4b\u524d\u3002</p> <p>\u62d3\u6251\u6392\u5e8f\u7684\u5e38\u89c1\u5b9e\u73b0\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a\u57fa\u4e8e\u5165\u5ea6\u7684 \\text{Kahn} \u7b97\u6cd5\u548c\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u7684\u7b97\u6cd5\u3002</p> <ul> <li>\\text{Kahn\u7b97\u6cd5}\uff1a\u901a\u8fc7\u8ba1\u7b97\u6bcf\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\uff0c\u9009\u62e9\u5165\u5ea6\u4e3a\u96f6\u7684\u9876\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u66f4\u65b0\u5176\u90bb\u63a5\u9876\u70b9\u7684\u5165\u5ea6\uff0c\u76f4\u5230\u6240\u6709\u9876\u70b9\u90fd\u88ab\u6392\u5e8f\u3002</li> <li>\\text{DFS\u7b97\u6cd5}\uff1a\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5728\u8bbf\u95ee\u5b8c\u4e00\u4e2a\u9876\u70b9\u540e\uff0c\u5c06\u5176\u52a0\u5165\u7ed3\u679c\u5e8f\u5217\u4e2d\uff0c\u6700\u7ec8\u5c06\u5e8f\u5217\u53cd\u8f6c\u5f97\u5230\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\u3002</li> </ul> \u3010\u6a21\u677f\u3011\u62d3\u6251\u6392\u5e8f <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8f93\u51fa\u5176\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\u3002\u4f7f\u7528 \\text{Kahn} \u7b97\u6cd5\u5b9e\u73b0\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;int64_t&gt;&gt; g(n + 1);\n  vector&lt;int64_t&gt; in_degree(n + 1, 0);\n  for (int64_t i = 1; i &lt;= n; i++) {\n    int64_t p;\n    while (cin &gt;&gt; p &amp;&amp; p != 0) {\n      g[i].push_back(p);\n      in_degree[p]++;\n    }\n  }\n  queue&lt;int64_t&gt; q;\n  for (int64_t i = 1; i &lt;= n; i++) {\n    if (in_degree[i] == 0) { q.push(i); }\n  }\n  vector&lt;int64_t&gt; order;\n  while (!q.empty()) {\n    int64_t u = q.front();\n    q.pop();\n    order.push_back(u);\n    for (auto v : g[u]) {\n      in_degree[v]--;\n      if (in_degree[v] == 0) { q.push(v); }\n    }\n  }\n  if (order.size() != n) { return 0; }  // there is a cycle\n  for (auto u : order) { cout &lt;&lt; u &lt;&lt; \" \"; }\n  cout &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> <p>\u5b57\u5178\u5e8f\u6700\u5927/\u6700\u5c0f\u7684\u62d3\u6251\u6392\u5e8f</p> <p>\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\\text{priority\\_queue}\uff09\u6765\u5b9e\u73b0\u5b57\u5178\u5e8f\u6700\u5927\u6216\u6700\u5c0f\u7684\u62d3\u6251\u6392\u5e8f\u3002\u5728 \\text{Kahn} \u7b97\u6cd5\u4e2d\uff0c\u66ff\u6362\u666e\u901a\u961f\u5217\u4e3a\u4f18\u5148\u961f\u5217\uff0c\u5e76\u6839\u636e\u9700\u8981\u9009\u62e9\u6700\u5927\u5806\u6216\u6700\u5c0f\u5806\u3002</p>","tags":["Graph","\u62d3\u6251\u6392\u5e8f","Topological Sort","Critical Path"]},{"location":"code/algorithm/Graph/TopoSort/#\u5173\u952e\u8def\u5f84","title":"\u5173\u952e\u8def\u5f84","text":"<p>\u5173\u952e\u8def\u5f84\u662f\u6307\u5728\u6709\u5411\u65e0\u73af\u56fe\uff08\\text{DAG}\uff09\u4e2d\uff0c\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u3002\u5173\u952e\u8def\u5f84\u901a\u5e38\u7528\u4e8e\u9879\u76ee\u7ba1\u7406\u548c\u8c03\u5ea6\uff0c\u4ee5\u786e\u5b9a\u9879\u76ee\u7684\u6700\u77ed\u5b8c\u6210\u65f6\u95f4\u3002</p>","tags":["Graph","\u62d3\u6251\u6392\u5e8f","Topological Sort","Critical Path"]},{"location":"code/algorithm/Graph/TopoSort/#aov\u7f51\u4e2d\u7684\u5173\u952e\u8def\u5f84","title":"AOV\u7f51\u4e2d\u7684\u5173\u952e\u8def\u5f84","text":"<p>\u5728 \\text{AOV} \u7f51\u4e2d\uff0c\u4efb\u52a1\u8868\u793a\u4e3a\u9876\u70b9\uff0c\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u8868\u793a\u4e3a\u6709\u5411\u8fb9\uff0c\u6bcf\u4e2a\u9876\u70b9\u90fd\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684\u4efb\u52a1\u65f6\u95f4\u3002\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2a\u4efb\u52a1\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\u548c\u6700\u65e9\u7ed3\u675f\u65f6\u95f4\uff0c\u4ece\u800c\u786e\u5b9a\u5173\u952e\u8def\u5f84\u3002</p> <p>\u5173\u952e\u8def\u5f84\u662f\u6307\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84, \u5176\u957f\u5ea6\u8868\u793a\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4\u3002\u5173\u952e\u8def\u5f84\u4e0a\u7684\u4efb\u52a1\u662f\u9879\u76ee\u4e2d\u6700\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u4efb\u4f55\u8fd9\u4e9b\u4efb\u52a1\u7684\u5ef6\u8fdf\u90fd\u4f1a\u76f4\u63a5\u5f71\u54cd\u6574\u4e2a\u9879\u76ee\u7684\u5b8c\u6210\u65f6\u95f4\u3002</p> \u6742\u52a1 <p>\u7ed9\u5b9a\u4e00\u7ec4\u4efb\u52a1\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\uff0c\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; est(n + 1);            // earliest start time, \u6700\u65e9\u5f00\u59cb\u65f6\u95f4\n  vector&lt;int&gt; eft(n + 1);            // earliest finish time, \u6700\u65e9\u7ed3\u675f\u65f6\u95f4\n  vector&lt;int&gt; time(n + 1);           // task time, \u4efb\u52a1\u65f6\u95f4\n  vector&lt;vector&lt;int&gt;&gt; graph(n + 1);  // {v1,v2,...} u depends on v1,v2,...\n  vector&lt;int&gt; visited(n + 1, 0);     // 0:not visited, 1:visiting, 2:visited\n\n  for (int i = 1; i &lt;= n; ++i) {\n    int no, len, task;\n    cin &gt;&gt; no;\n    cin &gt;&gt; time[no];\n    while (cin &gt;&gt; task) {\n      if (task == 0) { break; }\n      graph[no].push_back(task);\n    }\n  }\n\n  auto dfs = [&amp;](auto &amp;&amp;self, int u) -&gt; void {\n    visited[u] = 1;\n    est[u]     = 0;\n    for (int v : graph[u]) {  // u\u6700\u65e9\u5f00\u59cb\u65f6\u95f4 = max(\u4f9d\u8d56\u4efb\u52a1\u6700\u65e9\u7ed3\u675f\u65f6\u95f4)\n      if (visited[v] == 0) {  // \u8fd8\u6ca1\u8bbf\u95ee\u8fc7, \u9700\u8981\u5148\u8bbf\u95ee\u4f9d\u8d56\u4efb\u52a1\n        self(self, v);\n        est[u] = std::max(est[u], eft[v]);\n      } else {  // \u6709\u4e9b\u4efb\u52a1\u53ef\u80fd\u88ab\u591a\u4e2a\u4efb\u52a1\u4f9d\u8d56, \u4e4b\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\n        est[u] = std::max(est[u], eft[v]);\n      }\n    }\n    eft[u]     = est[u] + time[u];  // u\u6700\u65e9\u7ed3\u675f\u65f6\u95f4 = u\u6700\u65e9\u5f00\u59cb\u65f6\u95f4 + u\u4efb\u52a1\u65f6\u95f4\n    visited[u] = 2;\n  };\n\n  for (int i = 1; i &lt;= n; ++i) {\n    if (visited[i] == 0) { dfs(dfs, i); }\n  }\n  cout &lt;&lt; *max_element(eft.begin() + 1, eft.end()) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Graph","\u62d3\u6251\u6392\u5e8f","Topological Sort","Critical Path"]},{"location":"code/algorithm/Graph/TopoSort/#aoe\u7f51\u4e2d\u7684\u5173\u952e\u8def\u5f84","title":"AOE\u7f51\u4e2d\u7684\u5173\u952e\u8def\u5f84","text":"<p>\u5728 \\text{AOE} \u7f51\u4e2d\uff0c\u4efb\u52a1\u8868\u793a\u4e3a\u6709\u5411\u8fb9\uff0c\u8282\u70b9\u8868\u793a\u4e8b\u4ef6\u3002\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684\u4efb\u52a1\u65f6\u95f4\u3002\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u548c\u6700\u665a\u53d1\u751f\u65f6\u95f4\uff0c\u4ece\u800c\u786e\u5b9a\u5173\u952e\u8def\u5f84\u3002</p> <p>\u5173\u4e8e\u5173\u952e\u8def\u5f84\u7684\u5b9a\u4e49\u548c\u8ba1\u7b97\uff0c\u53ef\u4ee5\u4ece\u4e8b\u4ef6\u548c\u6d3b\u52a8\u4e24\u4e2a\u89d2\u5ea6\u8fdb\u884c\u63cf\u8ff0\uff1a</p> <ol> <li>\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff08\\text{Earliest Event Time, EET}\uff09\uff1a\u4e8b\u4ef6\u53ef\u4ee5\u53d1\u751f\u7684\u6700\u65e9\u65f6\u95f4\u3002\u4e8b\u4ef6 v \u7684 \\text{EET} \u5b9a\u4e49\u4e3a\u6240\u6709\u6307\u5411 v \u7684\u8fb9\u7684\u8d77\u59cb\u4e8b\u4ef6\u7684 \\text{EET} \u52a0\u4e0a\u8fb9\u7684\u6743\u91cd\u7684\u6700\u5927\u503c\uff0c\u5373 \\text{EET}(v) = \\max_{(u,v) \\in E}(\\text{EET}(u) + w(u,v))\u3002\u7279\u522b\u5730\uff0c\u6ca1\u6709\u5165\u8fb9\u7684\u4e8b\u4ef6\u7684 \\text{EET} \u5b9a\u4e49\u4e3a 0\u3002</li> <li>\u4e8b\u4ef6\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\uff08\\text{Latest Event Time, LET}\uff09\uff1a\u4e8b\u4ef6\u5fc5\u987b\u53d1\u751f\u7684\u6700\u665a\u65f6\u95f4\uff0c\u4ee5\u4e0d\u5ef6\u8bef\u6574\u4e2a\u9879\u76ee\u7684\u5b8c\u6210\u65f6\u95f4\u3002\u4e8b\u4ef6 u \u7684 \\text{LET} \u5b9a\u4e49\u4e3a\u6240\u6709\u4ece u \u51fa\u53d1\u7684\u8fb9\u7684\u7ec8\u6b62\u4e8b\u4ef6\u7684 \\text{LET} \u51cf\u53bb\u8fb9\u7684\u6743\u91cd\u7684\u6700\u5c0f\u503c\uff0c\u5373 \\text{LET}(u) = \\min_{(u,v) \\in E}(\\text{LET}(v) - w(u,v))\u3002\u7279\u522b\u5730\uff0c\u6ca1\u6709\u51fa\u8fb9\u7684\u4e8b\u4ef6\u7684 \\text{LET} \u548c\u5176 \\text{EET} \u76f8\u7b49\u3002</li> <li>\u5173\u952e\u4e8b\u4ef6\uff1a\u5982\u679c\u4e00\u4e2a\u4e8b\u4ef6\u7684 \\text{EET} \u7b49\u4e8e\u5176 \\text{LET}\uff0c\u5219\u8be5\u4e8b\u4ef6\u88ab\u79f0\u4e3a\u5173\u952e\u4e8b\u4ef6\u3002\u5173\u952e\u4e8b\u4ef6\u4f4d\u4e8e\u5173\u952e\u8def\u5f84\u4e0a\uff0c\u4efb\u4f55\u5173\u952e\u4e8b\u4ef6\u7684\u5ef6\u8fdf\u90fd\u4f1a\u76f4\u63a5\u5f71\u54cd\u6574\u4e2a\u9879\u76ee\u7684\u5b8c\u6210\u65f6\u95f4\u3002</li> </ol> <ol> <li>\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\uff08\\text{Earliest Start Time, EST}\uff09\uff1a\u6d3b\u52a8\u53ef\u4ee5\u5f00\u59cb\u7684\u6700\u65e9\u65f6\u95f4\u3002\u6d3b\u52a8 (u, v) \u7684 \\text{EST} \u5b9a\u4e49\u4e3a\u8d77\u59cb\u4e8b\u4ef6 u \u7684 \\text{EET}\uff0c\u5373 \\text{EST}(u, v) = \\text{EET}(u)\u3002</li> <li>\u6d3b\u52a8\u7684\u6700\u665a\u5f00\u59cb\u65f6\u95f4\uff08\\text{Latest Start Time, LST}\uff09\uff1a\u6d3b\u52a8\u5fc5\u987b\u5f00\u59cb\u7684\u6700\u665a\u65f6\u95f4\uff0c\u4ee5\u4e0d\u5ef6\u8bef\u6574\u4e2a\u9879\u76ee\u7684\u5b8c\u6210\u65f6\u95f4\u3002\u6d3b\u52a8 (u, v) \u7684 \\text{LST} \u5b9a\u4e49\u4e3a\u7ec8\u6b62\u4e8b\u4ef6 v \u7684 \\text{LET} \u51cf\u53bb\u6d3b\u52a8\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5373 \\text{LST}(u, v) = \\text{LET}(v) - w(u, v)\u3002</li> <li>\u5173\u952e\u6d3b\u52a8\uff1a\u5982\u679c\u4e00\u4e2a\u6d3b\u52a8\u7684 \\text{EST} \u7b49\u4e8e\u5176 \\text{LST}\uff0c\u5219\u8be5\u6d3b\u52a8\u88ab\u79f0\u4e3a\u5173\u952e\u6d3b\u52a8\u3002\u5173\u952e\u6d3b\u52a8\u4f4d\u4e8e\u5173\u952e\u8def\u5f84\u4e0a\uff0c\u4efb\u4f55\u5173\u952e\u6d3b\u52a8\u7684\u5ef6\u8fdf\u90fd\u4f1a\u76f4\u63a5\u5f71\u54cd\u6574\u4e2a\u9879\u76ee\u7684\u5b8c\u6210\u65f6\u95f4\u3002</li> </ol> \u5173\u952e\u8def\u5f84 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8ba1\u7b97\u5176\u5173\u952e\u8def\u5f84\u4e0a\u7684\u6240\u6709\u4e8b\u4ef6\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  using PII = pair&lt;int, int&gt;;\n  vector&lt;vector&lt;PII&gt;&gt; graph(n + 1);\n  vector&lt;vector&lt;PII&gt;&gt; r_graph(n + 1);\n  vector&lt;int&gt; in_degree(n + 1, 0);\n  vector&lt;int&gt; r_in_degree(n + 1, 0);\n\n  for (int i = 0; i &lt; m; i++) {\n    int u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    graph[u].emplace_back(v, w);\n    in_degree[v]++;\n    r_graph[v].emplace_back(u, w);\n    r_in_degree[u]++;\n  }\n\n  vector&lt;int&gt; eet(n + 1, INT32_MIN);  // earliest event time, \u6700\u65e9\u4e8b\u4ef6\u65f6\u95f4\n  vector&lt;int&gt; let(n + 1, INT32_MAX);  // latest event time, \u6700\u665a\u4e8b\u4ef6\u65f6\u95f4\n\n  queue&lt;int&gt; q;\n  for (int i = 1; i &lt;= n; i++) {\n    if (in_degree[i] == 0) {\n      q.emplace(i);\n      eet[i] = 0;\n    }\n  }\n\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    for (auto [v, w] : graph[u]) {\n      in_degree[v]--;\n      if (in_degree[v] == 0) { q.emplace(v); }\n      eet[v] = max(eet[v], eet[u] + w);\n    }\n  }\n\n  q = {};\n  for (int i = 1; i &lt;= n; i++) {\n    if (r_in_degree[i] == 0) {\n      q.emplace(i);\n      let[i] = eet[i];\n    }\n  }\n\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    for (auto [v, w] : r_graph[u]) {\n      r_in_degree[v]--;\n      if (r_in_degree[v] == 0) { q.push(v); }\n      let[v] = min(let[v], let[u] - w);\n    }\n  }\n\n  vector&lt;int&gt; critical;\n  for (int i = 1; i &lt;= n; i++) {\n    if (eet[i] == let[i]) { critical.push_back(i); }\n  }\n  sort(critical.begin(), critical.end());\n  cout &lt;&lt; critical.size() &lt;&lt; \"\\n\";\n  for (auto v : critical) { cout &lt;&lt; v &lt;&lt; \" \"; }\n  cout &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Graph","\u62d3\u6251\u6392\u5e8f","Topological Sort","Critical Path"]},{"location":"code/algorithm/Math/Cattelan/","title":"\u5361\u7279\u5170\u6570","text":"","tags":["Math","\u5361\u7279\u5170\u6570","Cattelan Number","\u7ec4\u5408\u6570\u5b66","Combinatorial Mathematics"]},{"location":"code/algorithm/Math/Cattelan/#\u5361\u7279\u5170\u6570","title":"\u5361\u7279\u5170\u6570","text":"<p>\u5361\u7279\u5170\u6570\uff08\\text{Cattelan Number}\uff09\u662f\u4e00\u7c7b\u5728\u7ec4\u5408\u6570\u5b66\u4e2d\u51fa\u73b0\u7684\u6570\u5217\uff0c\u5e38\u7528\u4e8e\u8ba1\u6570\u5404\u79cd\u7ec4\u5408\u7ed3\u6784\u3002  </p>","tags":["Math","\u5361\u7279\u5170\u6570","Cattelan Number","\u7ec4\u5408\u6570\u5b66","Combinatorial Mathematics"]},{"location":"code/algorithm/Math/Cattelan/#\u5361\u7279\u5170\u6570\u8ba1\u7b97\u516c\u5f0f","title":"\u5361\u7279\u5170\u6570\u8ba1\u7b97\u516c\u5f0f","text":"<p>\u7b2c n \u4e2a\u5361\u7279\u5170\u6570 C_n \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a  </p> <ol> <li>C_n = \\binom{2n}{n} - \\binom{2n}{n-1} </li> <li>C_n = \\frac{1}{n+1} \\binom{2n}{n} </li> <li>C_n = \\frac{2(2n-1)}{n+1} C_{n-1}\uff0c\u5176\u4e2d C_0 = 1 </li> <li>C_n = \\sum_{i=0}^{n-1} C_i \\times C_{n-1-i}\uff0c\u5176\u4e2d C_0 = 1 </li> </ol> <p>\u6c42\u89e3\u5361\u7279\u5170\u6570\u7b2c n \u9879\uff08\u7b54\u6848\u5bf9 mod \u53d6\u6a21\uff09\u65f6\uff0c\u4e0d\u540c\u6570\u636e\u89c4\u6a21\u4e0e\u6a21\u7684\u6027\u8d28\u4f1a\u5f71\u54cd\u53ef\u7528\u7684\u65b9\u6cd5\u3002</p> <p>\u9009\u62e9\u5408\u9002\u7684\u8ba1\u7b97\u65b9\u6cd5</p> \u6570\u636e\u89c4\u6a21 n mod \u516c\u5f0f \u8bf4\u660e n \\le 35 \u4efb\u610f\uff08\u901a\u5e38\u4e0d\u53d6\u6a21\uff09 4 \u7ed3\u679c\u4e0d\u6ea2\u51fa\uff0c\u76f4\u63a5\u8fd4\u56de\u771f\u5b9e\u503c n \\le 10^3 \u8d28\u6570 1,2,3,4 \u9884\u5904\u7406\u9636\u4e58/\u9006\u5143 O(n)\uff0c\u67e5\u8be2 O(1) n \\le 10^3 \u53ef\u80fd\u4e3a\u5408\u6570 4 \u4e0d\u4f9d\u8d56\u9006\u5143\uff0cO(n^2) \u53ef\u884c\u4e14\u7a33\u59a5 n \\le 10^6 \u8d28\u6570 1,2,3 \u9884\u5904\u7406 O(n)\uff0c\u7a7a\u95f4 O(n)\uff0c\u9ad8\u6548 n \\le 10^6 \u53ef\u80fd\u4e3a\u5408\u6570 2+\u56e0\u5b50\u8ba1\u6570\u6cd5 \u4e0d\u7528\u9006\u5143\uff0c\u901a\u8fc7\u56e0\u5b50\u8ba1\u6570\u91cd\u5efa\u6574\u6570\u518d\u4f7f\u7528\u5feb\u901f\u5e42 \u5361\u7279\u5170\u6570 \u516c\u5f0f1+2+3\uff08\u9636\u4e58+\u9006\u5143\u9884\u5904\u7406\uff09\u516c\u5f0f4\uff08\u9012\u63a8\uff09\u516c\u5f0f2+\u56e0\u5b50\u8ba1\u6570\u6cd5 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t Cattelan(int64_t n, int64_t mod) {\n  auto pow = [](int64_t a, int64_t b, int64_t mod) -&gt; int64_t {\n    int64_t res = 1 % mod;\n    a           = a % mod;\n    while (b &gt; 0) {\n      if (b &amp; 1) { res = res * a % mod; }\n      a   = a * a % mod;\n      b &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  // O(n)\u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143\n  vector&lt;int64_t&gt; fact;          // \u9636\u4e58\n  vector&lt;int64_t&gt; inverse_fact;  // \u9636\u4e58\u7684\u9006\u5143\n  vector&lt;int64_t&gt; inverse;       // \u4e58\u6cd5\u9006\u5143\n  auto build = [&amp;](int64_t n, int64_t mod) {\n    fact.resize(n + 1, 1);\n    inverse_fact.resize(n + 1, 1);\n    inverse.resize(n + 1, 1);\n    for (int i = 2; i &lt;= n; ++i) { fact[i] = fact[i - 1] * i % mod; }\n    inverse_fact[n] = pow(fact[n], mod - 2, mod);\n    for (int i = n; i &gt; 1; --i) { inverse_fact[i - 1] = inverse_fact[i] * i % mod; }\n    for (int i = 2; i &lt;= n; ++i) { inverse[i] = inverse_fact[i] * fact[i - 1] % mod; }\n  };\n\n  // \u8ba1\u7b97C(n, m) = n!/(m!*(n-m)!)\n  auto combination = [&amp;](int64_t n, int64_t m) -&gt; int64_t {\n    if (m &lt; 0 || m &gt; n) { return 0; }\n    return fact[n] * inverse_fact[m] % mod * inverse_fact[n - m] % mod;\n  };\n  // \u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143\n  build(2 * n, mod);\n\n  // \u516c\u5f0f1: C(2n,n) - C(2n,n-1)\n  { return (combination(2 * n, n) - combination(2 * n, n - 1) + mod) % mod; }\n  // \u516c\u5f0f2: C(2n,n)/(n+1) = C(2n,n) * (n+1)^(-1)\n  { return combination(2 * n, n) * pow(n + 1, mod - 2, mod) % mod; }\n  // \u516c\u5f0f3: f(n) = f(n-1) * (4n-2) / (n+1)\n  {\n    vector&lt;int64_t&gt; catalan(n + 1, 1);\n    for (int i = 1; i &lt;= n; ++i) {\n      catalan[i] = catalan[i - 1] * (4 * i - 2) % mod * inverse[i + 1] % mod;\n    }\n    return catalan[n];\n  }\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t Cattelan(int64_t n, int64_t mod) {\n  vector&lt;int64_t&gt; catalan(n + 1, 0);\n  catalan[0] = 1;\n  // \u516c\u5f0f4: C_n = sum(C_i * C_(n-1-i)), i=0..n-1\n  for (int i = 1; i &lt;= n; ++i) {\n    for (int j = 0; j &lt; i; ++j) {\n      catalan[i] = (catalan[i] + catalan[j] * catalan[i - 1 - j]) % mod;\n    }\n  }\n  return catalan[n];\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t Cattelan(int64_t n, int64_t mod) {\n  auto pow = [](int64_t a, int64_t b, int64_t mod) -&gt; int64_t {\n    int64_t res = 1 % mod;\n    a           = a % mod;\n    while (b &gt; 0) {\n      if (b &amp; 1) { res = res * a % mod; }\n      a   = a * a % mod;\n      b &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  vector&lt;int64_t&gt; minprime;  // \u6700\u5c0f\u8d28\u56e0\u5b50\n  vector&lt;int64_t&gt; primes;    // \u8d28\u6570\u8868\n  // \u7ebf\u6027\u7b5b\u6cd5\u6c42\u89e3\u6700\u5c0f\u8d28\u56e0\u5b50\n  auto build_minprime = [&amp;](int64_t n) {\n    minprime.resize(n + 1, 0);\n    for (int i = 2; i &lt;= n; ++i) {\n      if (minprime[i] == 0) {\n        minprime[i] = i;\n        primes.push_back(i);\n      }\n      for (int64_t p : primes) {\n        if (p * i &gt; n) { break; }\n        minprime[p * i] = p;\n        if (i % p == 0) { break; }\n      }\n    }\n  };\n  build_minprime(2 * n);\n  // \u516c\u5f0f2: C(2n,n)/(n+1) (1)\n  vector&lt;int64_t&gt; count(2 * n + 1, 0);  // \u8d28\u56e0\u5b50\u8ba1\u6570\n  for (int i = 2; i &lt;= n; ++i) {        // \u5206\u6bcd\u90e8\u5206 n!, 1\u4e0d\u8ba1\u5165\n    count[i] = -1;\n  }\n  for (int i = n + 2; i &lt;= 2 * n; ++i) {  // \u5206\u5b50\u90e8\u5206 (2n) * (2n-1) * ... * (n+2)\n    count[i] = 1;\n  }\n  for (int64_t i = 2 * n; i &gt;= 2; --i) {\n    if (count[i] == 0) { continue; }\n    if (minprime[i] != i) {  // i \u4e0d\u662f\u8d28\u6570, \u5206\u89e3\u8d28\u56e0\u5b50\n      int64_t p     = minprime[i];\n      count[p]     += count[i];\n      count[i / p] += count[i];\n      count[i]      = 0;\n    }\n  }\n  int64_t result = 1;\n  for (int64_t i = 2; i &lt;= 2 * n; ++i) {\n    if (count[i] != 0) { result = result * pow(i, count[i], mod) % mod; }\n  }\n  return result % mod;\n}\n</code></pre> <ol> <li>\\begin{aligned}    C_n &amp; = \\frac{1}{n+1} \\binom{2n}{n} \\\\        &amp; = \\frac{(2n)!}{(n! * (n+1)!)} \\\\        &amp; = (2n) * (2n-1) * \\dots * (n+2) / n! \\\\        &amp; = \\frac{\\prod p_i^{e_i}}{\\prod p_i^{f_i}}    \\end{aligned}</li> </ol>","tags":["Math","\u5361\u7279\u5170\u6570","Cattelan Number","\u7ec4\u5408\u6570\u5b66","Combinatorial Mathematics"]},{"location":"code/algorithm/Math/Cattelan/#\u5361\u7279\u5170\u6570\u5e38\u89c1\u6a21\u578b","title":"\u5361\u7279\u5170\u6570\u5e38\u89c1\u6a21\u578b","text":"<ol> <li> <p>\u8fdb\u51fa\u6808\u5e8f\u5217: n \u4e2a\u5143\u7d20\u8fdb\u51fa\u6808\uff0c\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\uff1f</p> <ul> <li>\u8003\u8651\u6700\u540e\u4e00\u4e2a\u51fa\u6808\u7684\u5143\u7d20 k(1 \\leq k \\leq n)\uff0c\u90a3\u4e48 k \u8fdb\u6808\u4e4b\u524d\u6808\u4e00\u5b9a\u662f\u7a7a\u7684\uff0c    k \u4e4b\u524d\u7684 (k - 1) \u4e2a\u5143\u7d20\u7684\u8fdb\u51fa\u6808\u662f\u72ec\u7acb\u7684\uff0c\u5373 f(k - 1)\u3002    \u540c\u7406 k \u4e4b\u540e\u7684 (n - k) \u4e2a\u5143\u7d20\u4e5f\u662f\u72ec\u7acb\u7684\uff0c\u5373 f(n - k)\u3002    \u6839\u636e\u524d\u540e\u7ed3\u679c\uff0c\u6c42\u5f97\u5f53 k \u6700\u540e\u4e00\u4e2a\u51fa\u6808\u65f6\u7ed3\u679c\u4e3a: f(k - 1) \\cdot f(n - k)\u3002 k \u53ef\u4ee5\u662f [1, n] \u4e4b\u95f4\u7684\u4efb\u610f\u6570\uff0c\u6240\u4ee5 f(n) \u662f\u7d2f\u52a0 k \u4e3a [1, n] \u7684\u6240\u6709\u7ed3\u679c\u3002  </li> <li> <p>\u672c\u8d28\u4e5f\u662f\u8fdb\u51fa\u6808\u7684\u8fd8\u6709:</p> <ol> <li>\u62ec\u53f7\u5339\u914d\u95ee\u9898: n \u5bf9\u62ec\u53f7\u6b63\u786e\u5339\u914d\u7684\u5b57\u7b26\u4e32\u6570  </li> <li>\u5706\u4e0a 2n \u4e2a\u70b9\u8fde n \u6761\u4e0d\u76f8\u4ea4\u7684\u5f26\u7b49\u95ee\u9898  </li> <li>\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u6811\u6570\u91cf\uff08\u8282\u70b9\u65e0\u5dee\u522b\uff09  </li> <li>\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6570\u91cf\uff08\u8282\u70b9\u6709\u5dee\u522b\uff09  </li> <li>\u51f8\u591a\u8fb9\u5f62\u4e09\u89d2\u5212\u5206\u95ee\u9898: n+2 \u8fb9\u5f62\u7684\u4e09\u89d2\u5212\u5206\u6570  </li> </ol> </li> </ul> </li> <li> <p>\u8def\u5f84\u8ba1\u6570: \u5728\u4e00\u4e2a n\u00d7n \u7684\u7f51\u683c\u4e2d\uff0c\u4ece (0,0) \u8d70\u5230 (n,n)\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u53f3\u6216\u5411\u4e0a\u8d70\u4e00\u6b65\uff0c\u6709\u591a\u5c11\u6761\u8def\u5f84\u6ee1\u8db3\u8def\u5f84\u4e0d\u4f1a\u7ecf\u8fc7\u4e0b\u534a\u533a\uff08\u5373\u8def\u5f84\u59cb\u7ec8\u4fdd\u6301\u5728 y \\geq x \u7684\u533a\u57df\uff09\u3002</p> <ul> <li>\u603b\u7684\u8def\u5f84\u6570\u4e3a C(2n,n)\uff0c\u4f46\u5176\u4e2d\u6709\u4e9b\u8def\u5f84\u4f1a\u7ecf\u8fc7\u4e0b\u534a\u533a\uff0c\u8fd9\u4e9b\u8def\u5f84\u662f\u4e0d\u5408\u6cd5\u7684\u7684\u3002    \u53cd\u5c04\u6cd5\u7684\u6838\u5fc3\u662f\u5c06\u8fd9\u4e9b\u4e0d\u5408\u6cd5\u8def\u5f84\u6620\u5c04\u5230\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\u4e0a\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u8def\u5f84\u4e0e\u5408\u6cd5\u8def\u5f84\u4e92\u4e0d\u91cd\u53e0\u3002    \u4e0d\u5408\u6cd5\u8def\u5f84\u662f\u6307\u8def\u5f84\u7ecf\u8fc7\u4e0b\u534a\u533a\uff08\u5373\u67d0\u4e00\u6b65\u4e2d y &lt; x\uff09\u3002    \u53cd\u5c04\u6cd5\uff1a\u5c06\u4e0d\u5408\u6cd5\u8def\u5f84\u7684\u7b2c\u4e00\u4e2a\u8fdb\u5165 y &lt; x \u7684\u70b9 (k, k+1) \u5f00\u59cb\u7684\u90e8\u5206\uff0c\u6cbf\u76f4\u7ebf y = x + 1 \u5bf9\u79f0\u53cd\u5c04\uff0c\u6620\u5c04\u5230\u4ece (0, 0) \u5230 (n-1, n+1) \u7684\u8def\u5f84\u3002\u8fd9\u4e9b\u8def\u5f84\u7684\u603b\u6570\u4e3a C(2n, n-1)\u3002    \u6240\u4ee5\u5408\u6cd5\u8def\u5f84\u6570\u4e3a C(2n,n) - C(2n,n-1) = C(2n,n)/(n+1)\u3002 </li> <li>\u672c\u8d28\u4e5f\u662f\u8def\u5f84\u8ba1\u6570\u7684\u8fd8\u6709:<ol> <li>\u4e0d\u542b\u9012\u589e\u4e09\u5143\u7ec4\u7684\u6392\u5217\u6570\u95ee\u9898: \u6c42\u957f\u5ea6\u4e3a n \u7684\u6392\u5217\uff08\u5143\u7d20\u4e92\u5f02\uff09\u4e2d\u4e0d\u542b\u9012\u589e\u4e09\u5143\u7ec4\u7684\u6392\u5217\u6570  </li> <li>\\text{123-avoiding} \u6392\u5217\u6570\u95ee\u9898: \u6c42\u957f\u5ea6\u4e3a n \u7684\u6392\u5217\uff08\u5143\u7d20\u4e92\u5f02\uff09\u4e2d\u4e0d\u542b\u9012\u589e\u5b50\u5e8f\u5217 1,2,3 \u7684\u6392\u5217\u6570  </li> <li>\\pm 1 \u5e8f\u5217(m \u4e2a +1\uff0cn \u4e2a -1\uff0cm \\geq n)\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e 0 \u7684\u95ee\u9898: f(m,n) = C(m+n,m) - C(m+n,m+1) = C(m+n,m) \\cdot \\frac{(m+1-n)}{(m+1)} </li> </ol> </li> </ul> </li> </ol>","tags":["Math","\u5361\u7279\u5170\u6570","Cattelan Number","\u7ec4\u5408\u6570\u5b66","Combinatorial Mathematics"]},{"location":"code/algorithm/Math/Combination/","title":"\u7ec4\u5408\u6570","text":"","tags":["Math","\u7ec4\u5408\u6570","Combination"]},{"location":"code/algorithm/Math/Combination/#\u7ec4\u5408\u6570","title":"\u7ec4\u5408\u6570","text":"","tags":["Math","\u7ec4\u5408\u6570","Combination"]},{"location":"code/algorithm/Math/Combination/#\u7ec4\u5408\u6570\u7684\u8ba1\u7b97","title":"\u7ec4\u5408\u6570\u7684\u8ba1\u7b97","text":"<p>\u7ec4\u5408\u6570\uff08\\text{Combination}\uff09\u662f\u6307\u4ece n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u4efb\u53d6 k \u4e2a\u5143\u7d20\u7684\u9009\u6cd5\u6570\uff0c\u8bb0\u4f5c C(n, k) \u6216 \\binom{n}{k}\u3002 \u7ec4\u5408\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1aC(n, k) = \\frac{n!}{k! \\cdot (n-k)!}, 0 \\leq k \\leq n \u91cd\u8981\u6027\u8d28\uff1a  </p> <ol> <li>C(n, k) = C(n, n-k)\uff08\u5bf9\u79f0\u6027\uff09  </li> <li>C(n, k) = C(n-1, k-1) + C(n-1, k)\uff08\u9012\u63a8\u5173\u7cfb\uff09  </li> <li>\\sum_{k=0}^{n} C(n, k) = 2^n\uff08\u4e8c\u9879\u5f0f\u5b9a\u7406\uff09  </li> <li>C(n, k) = \\frac{n}{k} \\cdot C(n-1, k-1)\uff08\u5206\u5b50\u5206\u6bcd\u540c\u4e58\u6cd5\uff09  </li> <li>\\sum_{i=0}^{k} C(n, i) = C(n+1, k+1)\uff08\u7ec4\u5408\u6570\u6c42\u548c\uff09</li> <li>\\sum_{k=0}^{n} C(n, k) * C(m, r-k) = C(n+m, r)\uff08\u7ec4\u5408\u6570\u5377\u79ef\uff09</li> </ol> \u7ec4\u5408\u6570\u8ba1\u7b97\u65b9\u6cd5 \u516c\u5f0f\u9012\u63a8\u56e0\u5b50\u8ba1\u6570\u6cd5 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t combination(int64_t n, int64_t m, int64_t mod = 1'000'000'007) {\n  if (m &gt; n || m &lt; 0) { return 0; }\n  m        = std::min(m, n - m);  // \u5229\u7528\u5bf9\u79f0\u6027 C(n, m) == C(n, n-m)\n\n  auto pow = [](int64_t a, int64_t b, int64_t mod) {\n    int64_t res = 1 % mod;\n    a           = a % mod;\n    while (b &gt; 0) {\n      if ((b &amp; 1) != 0) { res = res * a % mod; }\n      a   = a * a % mod;\n      b &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  // \u4ee5\u4e0b\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4e0d\u53d6\u6a21, \u53ef\u80fd\u4f1a\u6ea2\u51fa, \u9002\u7528\u4e8e n \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\n  // for (int64_t i = 1; i &lt;= m; ++i) { res = res * (n - i + 1) / i; }\n\n  // O(n) \u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143\n  vector&lt;int64_t&gt; fact;          // \u9636\u4e58\n  vector&lt;int64_t&gt; inverse_fact;  // \u9636\u4e58\u7684\u9006\u5143\n  auto build = [&amp;](int64_t n, int64_t mod) {\n    fact.resize(n + 1, 1);\n    inverse_fact.resize(n + 1, 1);\n    for (int i = 2; i &lt;= n; ++i) { fact[i] = fact[i - 1] * i % mod; }\n    inverse_fact[n] = pow(fact[n], mod - 2, mod);\n    for (int i = n; i &gt; 1; --i) { inverse_fact[i - 1] = inverse_fact[i] * i % mod; }\n  };\n  build(n, mod);\n\n  int64_t res = 1;\n  // \u8ba1\u7b97C(n, m) = n!/(m!*(n-m)!)\n  res = fact[n] * inverse_fact[m] % mod * inverse_fact[n - m] % mod;\n  return res;\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t combination(int64_t n, int64_t m, int64_t mod = 1'000'000'007) {\n  if (m &gt; n || m &lt; 0) { return 0; }\n  m = std::min(m, n - m);  // \u5229\u7528\u5bf9\u79f0\u6027 C(n, m) == C(n, n-m)\n\n  vector&lt;vector&lt;int64_t&gt;&gt; binom(n + 1, vector&lt;int64_t&gt;(n + 1, 0));\n  for (int i = 0; i &lt;= n; ++i) {\n    binom[i][0] = binom[i][i] = 1;\n    for (int j = 1; j &lt; i; ++j) { binom[i][j] = (binom[i - 1][j - 1] + binom[i - 1][j]) % mod; }\n  }\n  return binom[n][m];\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u5982\u679c\u7ed9\u5b9amod\u4e0d\u662f\u8d28\u6570\u5c31\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6216\u8005\u8003\u8651\u7ec4\u5408\u6052\u7b49\u5f0f\u8f6c\u5316\nint64_t combination(int64_t n, int64_t m, int64_t mod = 1'000'000'007) {\n  if (m &gt; n || m &lt; 0) { return 0; }\n  m        = std::min(m, n - m);  // \u5229\u7528\u5bf9\u79f0\u6027 C(n, m) == C(n, n-m)\n\n  auto pow = [](int64_t a, int64_t b, int64_t mod) {\n    int64_t res = 1 % mod;\n    a           = a % mod;\n    while (b &gt; 0) {\n      if ((b &amp; 1) != 0) { res = res * a % mod; }\n      a   = a * a % mod;\n      b &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  vector&lt;int64_t&gt; minprime;  // \u6700\u5c0f\u8d28\u56e0\u5b50\n  vector&lt;int64_t&gt; primes;    // \u8d28\u6570\u8868\n  // \u7ebf\u6027\u7b5b\u6cd5\u6c42\u89e3\u6700\u5c0f\u8d28\u56e0\u5b50\n  auto build_minprime = [&amp;](int64_t n) {\n    minprime.resize(n + 1, 0);\n    for (int i = 2; i &lt;= n; ++i) {\n      if (minprime[i] == 0) {\n        minprime[i] = i;\n        primes.push_back(i);\n      }\n      for (int64_t p : primes) {\n        if (p * i &gt; n) { break; }\n        minprime[p * i] = p;\n        if (i % p == 0) { break; }\n      }\n    }\n  };\n  build_minprime(n);\n  // \u516c\u5f0f: C(n,m) = n! / (m! * (n-m)!)\n  vector&lt;int64_t&gt; count(n + 1, 0);  // \u8d28\u56e0\u5b50\u8ba1\u6570\n  for (int i = 2; i &lt;= m; ++i) {    // \u5206\u6bcd\u90e8\u5206 m!, 1\u4e0d\u8ba1\u5165\n    count[i] = -1;\n  }\n  for (int i = 2; i &lt;= n - m; ++i) {  // \u5206\u6bcd\u90e8\u5206 (n-m)!\n    count[i] = -1;\n  }\n  for (int i = 2; i &lt;= n; ++i) {  // \u5206\u5b50\u90e8\u5206 n!, 1\u4e0d\u8ba1\u5165\n    count[i] += 1;\n  }\n  for (int64_t i = n; i &gt;= 2; --i) {\n    if (count[i] == 0) { continue; }\n    if (minprime[i] != i) {  // i \u4e0d\u662f\u8d28\u6570, \u5206\u89e3\u8d28\u56e0\u5b50\n      int64_t p     = minprime[i];\n      count[p]     += count[i];\n      count[i / p] += count[i];\n      count[i]      = 0;\n    }\n  }\n  int64_t res = 1;\n  for (int64_t i = 2; i &lt;= n; ++i) {\n    if (count[i] != 0) { res = res * pow(i, count[i], mod) % mod; }\n  }\n  return res % mod;\n}\n</code></pre>","tags":["Math","\u7ec4\u5408\u6570","Combination"]},{"location":"code/algorithm/Math/Combination/#\u4e8c\u9879\u5f0f\u5b9a\u7406","title":"\u4e8c\u9879\u5f0f\u5b9a\u7406","text":"<p>\u4e8c\u9879\u5f0f\u5b9a\u7406\uff08\\text{Binomial Theorem}\uff09\u63cf\u8ff0\u4e86\u4e8c\u9879\u5f0f (x + y)^n \u7684\u5c55\u5f00\u5f62\u5f0f\u3002 \u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u6709\uff1a(x + y)^n = \\sum_{k=0}^{n} C(n, k) \\cdot x^k \\cdot y^{n-k}\u3002  </p> \u4e8c\u9879\u5f0f\u5b9a\u7406\u5c55\u5f00 <p>\u8fd4\u56de (x + y)^n \u5c55\u5f00\u540e\u5404\u9879\u7684\u7cfb\u6570\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t inverse_euclid(int64_t a, int64_t mod) {\n  using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n  auto extended_gcd = [](int64_t a, int64_t b) {\n    auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n      if (b == 0) { return {a, 1, 0}; }\n      auto [d, x1, y1] = self(self, b, a % b);\n      int64_t x        = y1;\n      int64_t y        = x1 - (a / b) * y1;\n      return {d, x, y};\n    };\n    return y_combinator(y_combinator, a, b);\n  };\n  auto [d, x, y] = extended_gcd(a, mod);\n  if (d != 1) { return -1; }  // a \u548c mod \u4e0d\u4e92\u8d28, \u65e0\u9006\u5143\n  return (x % mod + mod) % mod;\n}\n\n// \u8fd4\u56de\u957f\u5ea6\u4e3a n+1 \u7684\u6570\u7ec4, res[k] = C(n, k) * x^k * y^(n-k) for k=0,1,...,n\nvector&lt;int64_t&gt; binomial_expansion(int64_t n, int64_t x, int64_t y, int64_t mod = 1'000'000'007) {\n  auto pow = [](int64_t a, int64_t b, int64_t mod) {\n    int64_t res = 1 % mod;\n    a           = a % mod;\n    while (b &gt; 0) {\n      if ((b &amp; 1) != 0) { res = res * a % mod; }\n      a   = a * a % mod;\n      b &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  vector&lt;int64_t&gt; res(n + 1, 0);\n  int64_t x_pow = 1;               // x^k\n  int64_t y_pow = pow(y, n, mod);  // y^(n-k), k=0\u65f6\n  int64_t y_inv = inverse_euclid(y, mod);\n  for (int64_t k = 0; k &lt;= n; ++k) {\n    res[k] = combination(n, k, mod) * x_pow % mod * y_pow % mod;\n    x_pow  = x_pow * x % mod;\n    y_pow  = y_pow * y_inv % mod;  // y^(n-k-1)\n  }\n  return res;\n}\n</code></pre> \u8ba1\u7b97\u7cfb\u6570 <p>\u6c42\u89e3 (ax + by)^{k} \u5c55\u5f00\u540e x^n y^m \u7684\u7cfb\u6570\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t pow(int64_t x, int64_t n, int64_t mod = 1'000'000'007) {\n  int64_t res  = 1;\n  int64_t base = x % mod;\n  while (n &gt; 0) {\n    // \u5982\u679c n \u662f\u5947\u6570, \u5219\u9700\u8981\u5c06\u5f53\u524d\u7684 x \u4e58\u5230\u7ed3\u679c\u4e0a\n    if ((n &amp; 1) != 0) { res = (res * base) % mod; }\n    base   = (base * base) % mod;\n    n    &gt;&gt;= 1;\n  }\n  return res;\n}\n\nint64_t combination(int64_t n, int64_t m, int64_t mod = 1'000'000'007) {\n  if (m &gt; n || m &lt; 0) { return 0; }\n  m = std::min(m, n - m);  // \u5229\u7528\u5bf9\u79f0\u6027 C(n, m) == C(n, n-m)\n\n  // O(n) \u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143\n  vector&lt;int64_t&gt; fact;          // \u9636\u4e58\n  vector&lt;int64_t&gt; inverse_fact;  // \u9636\u4e58\u7684\u9006\u5143\n  auto build = [&amp;](int64_t n, int64_t mod) {\n    fact.resize(n + 1, 1);\n    inverse_fact.resize(n + 1, 1);\n    for (int i = 2; i &lt;= n; ++i) { fact[i] = fact[i - 1] * i % mod; }\n    inverse_fact[n] = pow(fact[n], mod - 2, mod);\n    for (int i = n; i &gt; 1; --i) { inverse_fact[i - 1] = inverse_fact[i] * i % mod; }\n  };\n  build(n, mod);\n\n  int64_t res = 1;\n  // \u8ba1\u7b97C(n, m) = n!/(m!*(n-m)!)\n  res = fact[n] * inverse_fact[m] % mod * inverse_fact[n - m] % mod;\n  return res;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  const int64_t mod = 10'007;\n  int64_t a, b, k, n, m;\n  cin &gt;&gt; a &gt;&gt; b &gt;&gt; k &gt;&gt; n &gt;&gt; m;\n  int64_t a_n  = pow(a, n, mod);\n  int64_t b_m  = pow(b, m, mod);\n  int64_t comb = combination(k, n, mod);\n  cout &lt;&lt; a_n * b_m % mod * comb % mod &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ec4\u5408\u6570","Combination"]},{"location":"code/algorithm/Math/Combination/#\u4e8c\u9879\u5f0f\u53cd\u6f14","title":"\u4e8c\u9879\u5f0f\u53cd\u6f14","text":"<p>\u4e8c\u9879\u5f0f\u53cd\u6f14\uff08\\text{Binomial Inversion}\uff09\u662f\u6307\u901a\u8fc7\u5df2\u77e5\u5e8f\u5217 f(n) \u6765\u6c42\u89e3\u53e6\u4e00\u4e2a\u5e8f\u5217 g(n)\uff0c\u5176\u4e2d\u4e24\u8005\u6ee1\u8db3\u4ee5\u4e0b\u5173\u7cfb\uff1a \u8bb0 f_n \u8868\u793a\u6070\u597d\u4f7f\u7528 n \u4e2a\u4e0d\u540c\u5143\u7d20\u5f62\u6210\u7279\u5b9a\u7ed3\u6784\u7684\u65b9\u6848\u6570\uff0cg_n \u8868\u793a\u4ece n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u9009\u51fa i \\geq 0 \u4e2a\u5143\u7d20\u5f62\u6210\u7279\u5b9a\u7ed3\u6784\u7684\u603b\u65b9\u6848\u6570\u3002 </p> <p>\u4e8c\u9879\u5f0f\u53cd\u6f14\u7684\u56db\u79cd\u5f62\u5f0f:  </p> <ol> <li> <p>\u6070\u597d\u4f7f\u7528 i \u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570 f_i \\Longleftrightarrow n \u4e2a\u5143\u7d20\u4e2d\u9009\u51fa\u4efb\u610f\u4e2a\u5143\u7d20\u7684\u603b\u65b9\u6848\u6570 g_n </p>  g_n = \\sum_{i=0}^{n} (-1)^{i} \\binom{n}{i} f_i \\quad \\Longleftrightarrow \\quad  f_n = \\sum_{i=0}^{n} (-1)^{i} \\binom{n}{i} g_i  <p>\u8ba1\u6570\u95ee\u9898\u4e2d\uff0c\u5df2\u77e5\u603b\u65b9\u6848\u6570 g_n\uff0c\u9700\u8981\u53cd\u63a8\u51fa\u6070\u597d\u4f7f\u7528 n \u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570 f_n\u3002</p> </li> <li> <p>\u6070\u597d\u4f7f\u7528 i \u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570 f_i \\Longleftrightarrow n \u4e2a\u5143\u7d20\u4e2d\u9009\u51fa\u81f3\u5c11 i \u4e2a\u5143\u7d20\u7684\u603b\u65b9\u6848\u6570 g_n </p>  g_n = \\sum_{i=0}^{n} \\binom{n}{i} f_i  \\quad \\Longleftrightarrow \\quad  f_n = \\sum_{i=0}^{n} (-1)^{(n-i)} \\binom{n}{i} g_i \\tag{1}  <p>\u94a6\u5b9a k \u4e2a\u4e14\u81f3\u5c11\u7684\u95ee\u9898\uff0c\u53cd\u63a8\u51fa\u6070\u597d k \u4e2a\u7684\u65b9\u6848\u6570\u3002</p> </li> <li> <p>\u6070\u597d\u4f7f\u7528 i \u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570 f_i \\Longleftrightarrow \u5728\u7ed9\u5b9a\u4e0a\u754c N \u7684\u60c5\u51b5\u4e0b\uff0c\u81f3\u5c11\u9009 n \u4e2a\u5143\u7d20\u7684\u603b\u65b9\u6848\u6570 g_n </p>  g_n = \\sum_{i=n}^{N} (-1)^{i} \\binom{i}{n} f_i  \\quad \\Longleftrightarrow \\quad  f_n = \\sum_{i=n}^{N} (-1)^{i} \\binom{i}{n} g_i  <p>\u7528\u4e8e\u533a\u95f4\u8303\u56f4\u5185\u7684\u53cd\u6f14\u95ee\u9898\u3002</p> </li> <li> <p>\u6070\u597d\u4f7f\u7528 i \u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570 f_i \\Longleftrightarrow \u5728\u7ed9\u5b9a\u4e0a\u754c N \u7684\u60c5\u51b5\u4e0b\uff0c\u81f3\u591a\u9009 n \u4e2a\u5143\u7d20\u7684\u603b\u65b9\u6848\u6570 g_n </p>  g_n = \\sum_{i=n}^{N} \\binom{i}{n} f_i  \\quad \\Longleftrightarrow \\quad  f_n = \\sum_{i=n}^{N} (-1)^{(i-n)} \\binom{i}{n} g_i  <p>\u94a6\u5b9a k \u4e2a\u4e14\u81f3\u591a\u7684\u95ee\u9898\uff0c\u53cd\u63a8\u51fa\u6070\u597d k \u4e2a\u7684\u65b9\u6848\u6570\u3002</p> </li> </ol> <p>\u5f62\u5f0f 2 \u548c 4 \u6700\u5e38\u7528\u3002 \u89e3\u51b3\u8981\u6c42\u6070\u597d k \u4e2a\u7684\u95ee\u9898, \u53ef\u4ee5\u8f6c\u5316\u4e3a\u94a6\u5b9a k \u4e2a\u4e14\u81f3\u5c11\u7684\u95ee\u9898, \u7136\u540e\u901a\u8fc7\u5f62\u5f0f 2 \u53cd\u6f14\u6c42\u89e3\u3002  </p> \u4fe1\u5c01\u95ee\u9898 <p>\u7ed9\u5b9a n \u4e2a\u4fe1\u5c01\u548c n \u5c01\u4fe1\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4fe1\u653e\u5165\u4fe1\u5c01\uff0c\u4f7f\u5f97\u6ca1\u6709\u4efb\u4f55\u4e00\u5c01\u4fe1\u653e\u5165\u4e0e\u5176\u5bf9\u5e94\u7684\u4fe1\u5c01\u4e2d\u3002</p> \u9012\u63a8\u516c\u5f0f\u4e8c\u9879\u5f0f\u53cd\u6f14 Hint <p>\u8003\u8651\u7b2c 1 \u4e2a\u5143\u7d20\u548c\u53e6\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u53e6\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u5728\u5269\u4e0b n-2 \u4e2a\u5143\u7d20\u4e2d\u9519\u6392\uff0c\u6216\u8005\u548c\u5269\u4e0b n-1 \u4e2a\u5143\u7d20\u4e2d\u7684\u4e00\u4e2a\u4ea4\u6362\u3002\u7b2c 1 \u4e2a\u5143\u7d20\u53ef\u4ee5\u548c\u5269\u4e0b n-1 \u4e2a\u5143\u7d20\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u4ea4\u6362\u3002 \u9012\u63a8\u516c\u5f0f D(n) = (n-1) * (D(n-1) + D(n-2)) \u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t derangement(int64_t n) {\n  if (n == 0) { return 1; }\n  if (n == 1) { return 0; }\n  vector&lt;int64_t&gt; dp(n + 1, 0);\n  dp[0] = 1;\n  dp[1] = 0;\n  for (int64_t i = 2; i &lt;= n; ++i) { dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]); }\n  return dp[n];\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  cin &gt;&gt; n;\n  cout &lt;&lt; derangement(n) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> Hint <p>\u5047\u8bbe g_n \u8868\u793a n \u4e2a\u5143\u7d20\u7684\u5168\u6392\u5217\u6570\uff0cf_n \u8868\u793a\u6307\u5b9a n \u4e2a\u5143\u7d20\u7684\u9519\u6392\u6570\uff0c\u5219\u6709 g_n = \\sum_{i=0}^{n} C(n,i) * f_i\u3002\u53cd\u6f14\u5f97\u5230 f_n = \\sum_{i=0}^{n} (-1)^{(n-i)} * C(n,i) * g_i\u3002  </p> C++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  cin &gt;&gt; n;\n  int64_t fact = 1;  // n!\n  for (int64_t i = 1; i &lt;= n; ++i) { fact = fact * i; }\n  int64_t res    = fact;\n  int64_t fact_i = 1;  // i!\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    fact_i = fact_i * i;\n    if (i % 2 == 1) {\n      res -= fact / fact_i;\n    } else {\n      res += fact / fact_i;\n    }\n  }\n  cout &lt;&lt; res &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ec4\u5408\u6570","Combination"]},{"location":"code/algorithm/Math/GCD/","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","text":"","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","text":"","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u6700\u5927\u516c\u7ea6\u6570","title":"\u6700\u5927\u516c\u7ea6\u6570","text":"<p>\u6700\u5927\u516c\u7ea6\u6570\uff08\\text{Greatest Common Divisor}\uff0c\\text{GCD}\uff09\u662f\u6307\u4e24\u4e2a\u6216\u591a\u4e2a\u6574\u6570\u7684\u5171\u540c\u7ea6\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u4f7f\u7528\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u53ef\u4ee5\u9ad8\u6548\u5730\u8ba1\u7b97\u4e24\u4e2a\u6574\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002  </p> <p>\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\uff08\u8f97\u8f6c\u76f8\u9664\u6cd5\uff09\u7684\u57fa\u672c\u601d\u60f3\u662f\u57fa\u4e8e\u4ee5\u4e0b\u6027\u8d28\uff1a</p>  \\gcd(a, b) = \\gcd(b, a \\mod b)  \u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5 <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(log(min(a, b))) </p> C++<pre><code>int64_t gcd(int64_t a, int64_t b) {\n  while (b != 0) {\n    int64_t temp = a % b;\n    a            = b;\n    b            = temp;\n  }\n  return a;\n}\n</code></pre> <p>\u66f4\u76f8\u51cf\u635f\u672f</p> <p>\u66f4\u76f8\u51cf\u635f\u672f\u57fa\u4e8e\u4ee5\u4e0b\u6027\u8d28\uff1a</p>  \\gcd(a, b) = \\gcd(a, b - a) \\quad \\text{\u5982\u679c } a &lt; b  <p>\u8be5\u65b9\u6cd5\u901a\u8fc7\u4e0d\u65ad\u5730\u7528\u8f83\u5927\u7684\u6570\u51cf\u53bb\u8f83\u5c0f\u7684\u6570\uff0c\u76f4\u5230\u4e24\u6570\u76f8\u7b49\uff0c\u6b64\u65f6\u7684\u6570\u5373\u4e3a\u6700\u5927\u516c\u7ea6\u6570\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u6bd4\u8f97\u8f6c\u76f8\u9664\u6cd5\u66f4\u76f4\u89c2\uff0c\u4f46\u5728\u6548\u7387\u4e0a\u901a\u5e38\u4e0d\u5982\u8f97\u8f6c\u76f8\u9664\u6cd5\u3002  </p> C++<pre><code>int64_t gcd_subtraction(int64_t a, int64_t b) {\n  while (a != b) {\n    if (a &gt; b) {\n      a -= b;\n    } else {\n      b -= a;\n    }\n  }\n  return a;  // \u6216\u8005 return b; \u56e0\u4e3a\u6b64\u65f6 a == b\n}\n</code></pre> <p>\u63a8\u5e7f\u5230\u591a\u4e2a\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u4ee5\u4e0b\u6027\u8d28\u6210\u7acb\uff1a</p>  \\gcd(a_1, a_2, \\ldots, a_n) = \\gcd(a_1, a_2 - a_1, a_3 - a_2, \\ldots, a_n - a_{n-1})  <p>\u56e0\u4e3a\uff1a</p>  \\gcd(a_1, a_2, \\ldots, a_n) = \\gcd(\\gcd(a_1, a_2), \\gcd(a_2, a_3), \\ldots, \\gcd(a_{n-1}, a_n))  <p>\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u5229\u7528\u5dee\u5206\u6570\u7ec4\u4ee5\u53ca\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002</p>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u88f4\u8700\u5b9a\u7406\u4e0e\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5","title":"\u88f4\u8700\u5b9a\u7406\u4e0e\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5","text":"<p>\u88f4\u8700\u5b9a\u7406\uff08\\text{B\u00e9zout's Identity}\uff09\u6307\u51fa\uff0c\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 a \u548c b\uff0c\u5b58\u5728\u6574\u6570 x \u548c y \u4f7f\u5f97\uff1a</p>  ax + by = \\gcd(a, b)  <p>\u5176\u4e2d\uff0cx \u548c y \u88ab\u79f0\u4e3a\u88f4\u8700\u7cfb\u6570\uff08\\text{B\u00e9zout coefficients}\uff09\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\uff08\\text{Extended Euclidean Algorithm}\uff09\u4e0d\u4ec5\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u516c\u7ea6\u6570\uff0c\u8fd8\u53ef\u4ee5\u627e\u5230\u88f4\u8700\u7cfb\u6570\u3002</p> \u88f4\u8700\u5b9a\u7406\u7684\u63a8\u8bba <ol> <li> <p>\u5982\u679c a \u548c b \u4e92\u8d28\uff08\u5373 \\gcd(a, b) = 1\uff09\uff0c\u5219\u5b58\u5728\u6574\u6570 x \u548c y \u4f7f\u5f97\uff1a  </p>  ax + by = 1  <p>\u8fd9\u610f\u5473\u7740 a \u5728\u6a21 b \u610f\u4e49\u4e0b\u6709\u4e58\u6cd5\u9006\u5143\uff08ax \\equiv 1 \\mod b\uff09\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002  </p> </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 c\uff0c\u65b9\u7a0b ax + by = c \u6709\u6574\u6570\u89e3\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f \\gcd(a, b) \u6574\u9664 c\u3002    \u5982\u679c (x_0, y_0) \u662f\u8be5\u65b9\u7a0b\u7684\u4e00\u4e2a\u7279\u89e3\uff0c\u5219\u6240\u6709\u89e3\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p>  x = x_0 + \\frac{b}{d}t, \\quad y = y_0 - \\frac{a}{d}t  <p>\u5176\u4e2d\uff0cd = \\gcd(a, b)\uff0ct \u662f\u4efb\u610f\u6574\u6570\u3002  </p> </li> <li> <p>\u5982\u679c a \u548c b \u4e92\u8d28\uff0c\u5219\u65b9\u7a0b ax + by = c \u5bf9\u4efb\u610f\u6574\u6570 c \u90fd\u6709\u6574\u6570\u89e3\u3002  </p> </li> <li> <p>\u5bf9\u4e8e n \u4e2a\u6574\u6570 a_1, a_2, \\ldots, a_n\uff0c\u5b58\u5728\u6574\u6570 x_1, x_2, \\ldots, x_n \u4f7f\u5f97\uff1a</p>  a_1x_1 + a_2x_2 + \\ldots + a_nx_n = \\gcd(a_1, a_2, \\ldots, a_n)  <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u5730\u5e94\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u6765\u5b9e\u73b0\u3002  </p> </li> </ol> <p>\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u53ef\u4ee5\u8ba1\u7b97\u6574\u6570 a \u548c b \u7684\u6700\u5927\u516c\u7ea6\u6570 d = \\gcd(a, b)\uff0c\u4ee5\u53ca\u6ee1\u8db3 ax + by = d \u7684\u6574\u6570\u89e3 (x, y)\u3002</p> \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5 <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(log(min(a, b))) </p> C++<pre><code>#include &lt;tuple&gt;\nusing namespace std;\n\nauto extended_gcd = [](int64_t a, int64_t b) {\n  using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n  auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n    if (b == 0) { return {a, 1, 0}; }\n    auto [d, x1, y1] = self(self, b, a % b);\n    int64_t x        = y1;\n    int64_t y        = x1 - (a / b) * y1;\n    return {d, x, y};\n    // \u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3(1)\n    // x = (x % (b / d) + (b / d)) % (b / d);\n  };\n  return y_combinator(y_combinator, a, b);\n};\n</code></pre> <ol> <li>\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff1a\u6240\u6709\u89e3\u90fd\u5728\u6a21 m = \\frac{b}{d} \u610f\u4e49\u4e0b\u7b49\u4ef7\u3002\u8981\u53d6\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff08\u5373\u8be5\u7b49\u4ef7\u7c7b\u5728\u533a\u95f4 [0, m-1] \u7684\u4ee3\u8868\uff09\uff0c\u53ea\u9700\u628a\u67d0\u4e2a\u89e3 x \u53d6\u6a21 m \u5f97\u5230\u89c4\u8303\u4ee3\u8868\u3002</li> </ol>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","title":"\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","text":"<p>\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\uff08\u4e22\u756a\u56fe\u65b9\u7a0b\uff0c\\text{Linear Diophantine Equation}\uff09\u662f\u6307\u5f62\u5982 ax + by = c \u7684\u65b9\u7a0b\uff0c\u5176\u4e2d a\u3001b \u548c c \u662f\u5df2\u77e5\u6574\u6570\uff0cx \u548c y \u662f\u672a\u77e5\u6574\u6570\u3002 \u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u53ef\u4ee5\u627e\u5230\u8be5\u65b9\u7a0b\u7684\u4e00\u7ec4\u6574\u6570\u89e3\uff08\u5982\u679c\u5b58\u5728\uff09\u3002  </p> \u3010\u6a21\u677f\u3011\u4e8c\u5143\u4e00\u6b21\u4e0d\u5b9a\u65b9\u7a0b (exgcd) <p>\u7ed9\u5b9a a, b, c\uff0c\u8ba8\u8bba ax + by = c \u7684\u6574\u6570\u89e3\u7684\u60c5\u51b5\uff0c\u5e76\u8f93\u51fa\u76f8\u5173\u4fe1\u606f\u3002 \u5982\u679c\u65e0\u89e3\uff0c\u8f93\u51fa -1\u3002\u5982\u679c\u6709\u6574\u6570\u89e3\u4f46\u662f\u65e0\u6b63\u6574\u6570\u89e3\uff0c\u8f93\u51fa\u6240\u6709\u89e3\u4e2d x \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u548c y \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u3002\u5982\u679c\u6709\u6b63\u6574\u6570\u89e3\uff0c\u8f93\u51fa\u6b63\u6574\u6570\u89e3\u7684\u4e2a\u6570\uff0c\u4ee5\u53ca x \u548c y \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u548c\u6700\u5927\u6b63\u6574\u6570\u89e3\u3002  </p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid solve_linear_diophantine(int64_t a, int64_t b, int64_t c) {\n  auto extended_gcd = [](int64_t a, int64_t b) {\n    using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n    auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n      if (b == 0) { return {a, 1, 0}; }\n      auto [d, x1, y1] = self(self, b, a % b);\n      int64_t x        = y1;\n      int64_t y        = x1 - (a / b) * y1;\n      return {d, x, y};\n    };\n    return y_combinator(y_combinator, a, b);\n  };\n\n  // \u6c42\u89e3 ax + by = c \u7684\u4e00\u7ec4\u7279\u89e3 (x0, y0)\n  auto [d, x0, y0] = extended_gcd(a, b);\n  if (c % d != 0) {\n    cout &lt;&lt; -1 &lt;&lt; '\\n';  // \u65e0\u89e3\n    return;\n  }\n  // \u7279\u89e3\u5bf9\u5e94 ax + by = d\uff0c\u8f6c\u4e3a ax + by = c\n  int64_t x  = x0 * (c / d);\n  int64_t y  = y0 * (c / d);\n  int64_t xd = b / d;\n  int64_t yd = a / d;\n\n  // \u8c03\u6574 t\uff0c\u4f7f x \u53d8\u6210\u6b63\u6570\u7684\u6700\u5c0f\u89e3\n  if (x &lt; 0) {\n    int64_t t  = (1 - x + xd - 1) / xd;  // \u5411\u4e0a\u53d6\u6574\n    x         += t * xd;\n    y         -= t * yd;\n  } else {\n    int64_t t  = (x - 1) / xd;  // \u5411\u4e0b\u53d6\u6574\n    x         -= t * xd;\n    y         += t * yd;\n  }\n  // \u6b64\u65f6\u662f x \u7684\u6700\u5c0f\u6b63\u6570\u89e3\n  if (y &lt;= 0) {\n    // y \u4e0d\u662f\u6b63\u6570\uff0c\u5c1d\u8bd5\u589e\u52a0 t \u4f7f y \u53d8\u6210\u6b63\u6570\n    int64_t t  = (1 - y + yd - 1) / yd;  // \u5411\u4e0a\u53d6\u6574\n    y         += t * yd;                 // \u6b64\u65f6\u662f y \u7684\u6700\u5c0f\u6b63\u6570\u89e3\n    cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\\n';       // \u6574\u6570\u89e3\u4e2d\uff0cx \u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\uff0cy \u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\n    return;\n  }\n  int64_t count = (y - 1) / yd + 1;      // \u65b9\u7a0b\u7684\u6b63\u6574\u6570\u89e3\u4e2a\u6570\n  int64_t x_min = x;                     // x \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\n  int64_t x_max = x + (count - 1) * xd;  // x \u7684\u6700\u5927\u6b63\u6574\u6570\u89e3\n  int64_t y_min = y - (count - 1) * yd;  // y \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\n  int64_t y_max = y;                     // y \u7684\u6700\u5927\u6b63\u6574\u6570\u89e3\n  cout &lt;&lt; count &lt;&lt; ' ' &lt;&lt; x_min &lt;&lt; ' ' &lt;&lt; y_min &lt;&lt; ' ' &lt;&lt; x_max &lt;&lt; ' ' &lt;&lt; y_max &lt;&lt; '\\n';\n}\n\nvoid solve() {\n  int64_t a, b, c;\n  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n  solve_linear_diophantine(a, b, c);\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#frobenius\u6570","title":"Frobenius\u6570","text":"<p>\u5bf9\u4e8e\u4e24\u4e2a\u4e92\u8d28\u7684\u6b63\u6574\u6570 a \u548c b\uff0c\\text{Frobenius} \u6570\u662f\u6307\u65e0\u6cd5\u8868\u793a\u4e3a ax + by \u7684\u6700\u5927\u6574\u6570\uff0c\u5176\u4e2d x \u548c y \u662f\u975e\u8d1f\u6574\u6570\u3002 \\text{Frobenius} \u6570\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a  </p>  g(a, b) = ab - a - b  \u4e3a\u4ec0\u4e48\u662f ab - a - b \uff1f <p>\u8bbe N = ab - a - b\uff0c\u5047\u8bbe\u5b58\u5728\u975e\u8d1f\u6574\u6570 x \u548c y \u4f7f\u5f97 N = ax + by\u3002 \u5219\u6709\uff1a</p>  ab - a - b = ax + by  <p>\u5c06\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u52a0\u4e0a a + b\uff0c\u5f97\u5230\uff1a</p>  ab = a(x + 1) + b(y + 1)  <p>\u7531\u4e8e a \u548c b \u4e92\u8d28\uff0ca \u5fc5\u987b\u6574\u9664 y + 1\uff0c\u5373\u5b58\u5728\u6574\u6570 k \u4f7f\u5f97 y + 1 = ak\u3002 \u540c\u7406\uff0cb \u5fc5\u987b\u6574\u9664 x + 1\uff0c\u5373\u5b58\u5728\u6574\u6570 m \u4f7f\u5f97 x + 1 = bm\u3002 \u5c06\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u4ee3\u5165\u539f\u59cb\u65b9\u7a0b\uff0c\u5f97\u5230\uff1a</p>  ab = a(bm) + b(ak) \\Leftrightarrow ab = abm + abk \\Leftrightarrow 1 = m + k  <p>\u56e0\u4e3a m \u548c k \u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u6240\u4ee5\u552f\u4e00\u7684\u89e3\u662f m = 1 \u548c k = 0 \u6216\u8005 m = 0 \u548c k = 1\u3002 \u5bf9\u5e94\u7684 (x, y) \u5206\u522b\u4e3a (b - 1, 0) \u548c (0, a - 1)\u3002 \u7136\u800c\uff0c\u8fd9\u4e24\u4e2a\u89e3\u90fd\u4e0d\u6ee1\u8db3\u539f\u59cb\u65b9\u7a0b\u4e2d\u7684\u975e\u8d1f\u6574\u6570\u6761\u4ef6\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u5bfc\u81f4\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8d1f\u6570\u3002 \u56e0\u6b64\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u5373\u4e0d\u5b58\u5728\u975e\u8d1f\u6574\u6570 x \u548c y \u4f7f\u5f97 N = ax + by\u3002  \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u8bc1\u660e\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e N \u7684\u6574\u6570\uff0c\u90fd\u5b58\u5728\u975e\u8d1f\u6574\u6570 x' \u548c y' \u4f7f\u5f97\u8be5\u6574\u6570\u53ef\u4ee5\u8868\u793a\u4e3a ax' + by'\u3002 \u5bf9\u4e8e\u4efb\u610f\u6574\u6570 M &gt; N\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p>  M = N + k  <p>\u5176\u4e2d\uff0ck \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u53ef\u4ee5\u9009\u62e9\u9002\u5f53\u7684\u975e\u8d1f\u6574\u6570 x' \u548c y' \u6765\u6ee1\u8db3\u65b9\u7a0b\uff0c\u5982\u679c\u9009\u62e9 (x', y') = (x + k, y)\uff0c\u5219\u6709\uff1a</p>  M = a(x + k) + by = ax + by + ak = N + ak  <p>\u8fd9\u8868\u660e M \u53ef\u4ee5\u8868\u793a\u4e3a ax' + by'\uff0c\u5176\u4e2d x' = x + k \u548c y' = y\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e N \u7684\u6574\u6570\uff0c\u90fd\u53ef\u4ee5\u627e\u5230\u975e\u8d1f\u6574\u6570\u89e3\u3002</p>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","text":"<p>\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08\\text{Chinese Remainder Theorem}\uff0c\\text{CRT}\uff09\u7528\u4e8e\u6c42\u89e3\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b\u3002 \u5047\u8bbe\u6709 k \u4e2a\u6574\u6570 m_1, m_2, \\ldots, m_k\uff0c\u5b83\u4eec\u4e24\u4e24\u4e92\u8d28\uff0c\u4ee5\u53ca k \u4e2a\u6574\u6570 r_1, r_2, \\ldots, r_k\uff0c\u5219\u5b58\u5728\u4e00\u4e2a\u6574\u6570 x\uff0c\u4f7f\u5f97\uff1a  </p>  \\begin{aligned} x &amp; \\equiv r_1 \\mod m_1 \\\\ x &amp; \\equiv r_2 \\mod m_2 \\\\   &amp; \\vdots \\\\ x &amp; \\equiv r_k \\mod m_k \\end{aligned}  <p>\u5e76\u4e14\u8fd9\u4e2a\u89e3\u5728\u6a21 M = m_1 m_2 \\cdots m_k \u610f\u4e49\u4e0b\u662f\u552f\u4e00\u7684\u3002 \u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u53ef\u4ee5\u6c42\u89e3\u8be5\u65b9\u7a0b\u7ec4\u7684\u4e00\u7ec4\u89e3, \u8fd4\u56de\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3 x \u548c\u6a21\u6570 M\u3002  </p> \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff1f <p>\u8bbe M = m_1 m_2 \\cdots m_k\uff0c\u5bf9\u4e8e\u6bcf\u4e2a i\uff0c\u5b9a\u4e49 M_i = \\frac{M}{m_i}\u3002 \u7531\u4e8e m_i \u548c M_i \u4e92\u8d28\uff0c\u6839\u636e\u88f4\u8700\u5b9a\u7406\uff0c\u5b58\u5728\u6574\u6570 y_i \u548c z_i \u4f7f\u5f97\uff1a</p>  M_i y_i + m_i z_i = 1  <p>\u8fd9\u610f\u5473\u7740 M_i y_i \\equiv 1 \\pmod{m_i}\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u6784\u9020\u89e3 x \u5982\u4e0b\uff1a</p>  x = \\sum_{i=1}^{k} r_i M_i y_i  <p>\u8fd9\u4e2a\u89e3\u6ee1\u8db3\u6240\u6709\u7684\u540c\u4f59\u6761\u4ef6\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a i\uff1a</p>  x \\equiv r_i M_i y_i \\equiv r_i \\cdot 1 \\equiv r_i \\pmod{m_i}  <p>\u56e0\u4e3a\u5176\u4ed6\u9879\u90fd\u5305\u542b\u56e0\u5b50 m_j\uff08j \\neq i\uff09\uff0c\u6240\u4ee5\u5728\u6a21 m_i \u610f\u4e49\u4e0b\u5b83\u4eec\u90fd\u4e3a\u96f6\u3002 \u6700\u7ec8\uff0c\u89e3 x \u5728\u6a21 M \u610f\u4e49\u4e0b\u662f\u552f\u4e00\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u53e6\u4e00\u4e2a\u89e3 x'\uff0c\u5219\u6709\uff1a</p>  x \\equiv x' \\pmod{m_i}  <p>\u5bf9\u6240\u6709\u7684 i \u6210\u7acb\uff0c\u56e0\u6b64 x - x' \u662f\u6240\u6709 m_i \u7684\u516c\u500d\u6570\uff0c\u5373\uff1a  </p>  x - x' \\equiv 0 \\pmod{M}  <p>\u8fd9\u8bc1\u660e\u4e86\u89e3\u7684\u552f\u4e00\u6027\u3002</p> \u3010\u6a21\u677f\u3011\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08CRT\uff09/ \u66f9\u51b2\u517b\u732a <p>\u7ed9\u5b9a n \u4e2a\u4e24\u4e24\u4e92\u8d28\u7684\u6b63\u6574\u6570 m_i \u548c\u5bf9\u5e94\u7684\u4f59\u6570 r_i\uff0c\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\uff0c\u5e76\u8f93\u51fa\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\npair&lt;int64_t, int64_t&gt; crt(const vector&lt;int64_t&gt; &amp;m, const vector&lt;int64_t&gt; &amp;r) {\n  auto multiply = [](int64_t a, int64_t b, int64_t mod) {\n    int64_t result = 0;\n    a              = (a % mod + mod) % mod;\n    b              = (b % mod + mod) % mod;\n    while (b &gt; 0) {\n      if ((b &amp; 1) != 0) { result = (result + a) % mod; }\n      a   = (a * 2) % mod;\n      b &gt;&gt;= 1;\n    }\n    return result % mod;\n  };\n\n  auto extended_gcd = [](int64_t a, int64_t b) {\n    using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n    auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n      if (b == 0) { return {a, 1, 0}; }\n      auto [d, x1, y1] = self(self, b, a % b);\n      int64_t x        = y1;\n      int64_t y        = x1 - (a / b) * y1;\n      return {d, x, y};\n    };\n    return y_combinator(y_combinator, a, b);\n  };\n\n  int64_t lcm = 1;\n  for (const auto &amp;mi : m) { lcm *= mi; }\n  int64_t x = 0;\n  for (size_t i = 0; i &lt; m.size(); i++) {\n    int64_t mi = m[i];\n    int64_t ri = r[i];\n    int64_t ai = lcm / mi;\n    // \u6c42 ai \u5173\u4e8e mi \u7684\u4e58\u6cd5\u9006\u5143\n    auto [_1, inv, _2] = extended_gcd(ai, mi);\n    int64_t ci         = multiply(ri, multiply(ai, inv, lcm), lcm);\n    x                  = (x + ci) % lcm;\n  }\n  return {x, lcm};  // \u8fd4\u56de\u89e3 x \u548c\u6a21\u6570 N\n}\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; m(n), a(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; m[i] &gt;&gt; a[i]; }\n  auto [x, M] = crt(m, a);\n  cout &lt;&lt; x &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/GCD/#\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","title":"\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","text":"<p>\u5f53\u6a21\u6570\u4e0d\u4e92\u8d28\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6765\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\u3002\u6b64\u65f6\u8be5\u65b9\u7a0b\u7ec4\u6709\u89e3\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f\u5bf9\u4e8e \\forall i, j:\\; (r_i - r_j) \\bmod \\gcd(m_i, m_j) = 0\u3002</p> \u3010\u6a21\u677f\u3011\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08EXCRT\uff09 <p>\u7ed9\u5b9a n \u4e2a\u6b63\u6574\u6570 m_i\uff08\u4e0d\u4e00\u5b9a\u4e92\u8d28\uff09\u548c\u5bf9\u5e94\u7684\u4f59\u6570 r_i\uff0c\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\uff0c\u5e76\u8f93\u51fa\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\u3002\u5982\u679c\u65e0\u89e3\uff0c\u8f93\u51fa -1\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\npair&lt;int64_t, int64_t&gt; ex_crt(const vector&lt;int64_t&gt; &amp;m, const vector&lt;int64_t&gt; &amp;r) {\n  auto multiply = [](int64_t a, int64_t b, int64_t mod) {\n    int64_t result = 0;\n    a              = (a % mod + mod) % mod;\n    b              = (b % mod + mod) % mod;\n    while (b &gt; 0) {\n      if ((b &amp; 1) != 0) { result = (result + a) % mod; }\n      a   = (a * 2) % mod;\n      b &gt;&gt;= 1;\n    }\n    return result % mod;\n  };\n\n  auto extended_gcd = [](int64_t a, int64_t b) {\n    using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n    auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n      if (b == 0) { return {a, 1, 0}; }\n      auto [d, x1, y1] = self(self, b, a % b);\n      int64_t x        = y1;\n      int64_t y        = x1 - (a / b) * y1;\n      return {d, x, y};\n    };\n    return y_combinator(y_combinator, a, b);\n  };\n\n  int64_t x   = 0;  // \u5f53\u524d\u89e3\n  int64_t lcm = 1;  // \u5f53\u524d\u6a21\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\n  for (size_t i = 0; i &lt; m.size(); i++) {\n    int64_t a      = lcm;\n    int64_t b      = m[i];\n    int64_t c      = ((r[i] - x) % b + b) % b;  // \u4fdd\u8bc1 c \u975e\u8d1f\n    auto [d, p, q] = extended_gcd(a, b);\n    if (c % d != 0) { return {-1, -1}; }  // \u65e0\u89e3\n\n    int64_t t = multiply(p, c / d, b / d);  // t \u662f a*t \u2261 c (mod b) \u7684\u89e3\n    x         = (x + multiply(t, a, lcm * (b / d))) % (lcm * (b / d));\n    lcm       = lcm * (b / d);  // \u66f4\u65b0\u6700\u5c0f\u516c\u500d\u6570\n  }\n  return {x, lcm};  // \u8fd4\u56de\u89e3 x \u548c\u6a21\u6570 M\n}\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; m(n), a(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; m[i] &gt;&gt; a[i]; }\n  auto [x, M] = ex_crt(m, a);\n  cout &lt;&lt; x &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Math","\u6700\u5927\u516c\u7ea6\u6570","GCD","Greatest Common Divisor","\u88f4\u8700\u5b9a\u7406","B\u00e9zout's Identity","\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","Extended Euclidean Algorithm","\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b","Linear Diophantine Equation","\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","Chinese Remainder Theorem"]},{"location":"code/algorithm/Math/Gauss/","title":"\u9ad8\u65af\u6d88\u5143","text":"","tags":["Math","\u9ad8\u65af\u6d88\u5143","Gauss Elimination"]},{"location":"code/algorithm/Math/Gauss/#\u9ad8\u65af\u6d88\u5143","title":"\u9ad8\u65af\u6d88\u5143","text":"<p>\u9ad8\u65af\u6d88\u5143\uff08\\text{Gauss Elimination}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u3002\u5b83\u901a\u8fc7\u5bf9\u589e\u5e7f\u77e9\u9635\u8fdb\u884c\u884c\u53d8\u6362\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u7136\u540e\u901a\u8fc7\u56de\u4ee3\u6c42\u89e3\u53d8\u91cf\u7684\u503c\u3002   </p> <p>\u9ad8\u65af\u6d88\u5143\u6cd5\u53ef\u4ee5\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u3001\u5f02\u6216\u65b9\u7a0b\u7ec4\u3001\u540c\u4f59\u65b9\u7a0b\u7ec4\u7b49\u95ee\u9898\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3)\uff0c\u5176\u4e2d n \u662f\u65b9\u7a0b\u7ec4\u4e2d\u53d8\u91cf\u7684\u6570\u91cf\u3002  </p>","tags":["Math","\u9ad8\u65af\u6d88\u5143","Gauss Elimination"]},{"location":"code/algorithm/Math/Gauss/#\u7ebf\u6027\u65b9\u7a0b\u7ec4","title":"\u7ebf\u6027\u65b9\u7a0b\u7ec4","text":"<p>\u7ebf\u6027\u65b9\u7a0b\u7ec4\u53ef\u4ee5\u8868\u793a\u4e3a\u589e\u5e7f\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u901a\u8fc7\u9ad8\u65af\u6d88\u5143\u6cd5\u6c42\u89e3\u3002  </p> \u7ebf\u6027\u65b9\u7a0b\u7ec4 C++<pre><code>#include &lt;cstdlib&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst double eps = 1e-9;\n\nvoid GaussElimination(vector&lt;vector&lt;double&gt;&gt; &amp;matrix) {\n  int n = matrix.size();\n  // \u6d88\u5143\n  for (int i = 0; i &lt; n; ++i) {\n    // \u5bfb\u627e\u4e3b\u5143, \u4e3a\u4e86\u533a\u5206\u591a\u89e3\u548c\u65e0\u89e3\u7684\u60c5\u51b5, \u8fd9\u91cc\u9700\u8981\u4ece\u7b2c0\u884c\u5f00\u59cb\u627e\n    int pivot = i;\n    for (int j = 0; j &lt; n; ++j) {\n      // \u5df2\u7ecf\u6d88\u5143\u7684\u884c\u4e0d\u518d\u8003\u8651\n      if (j &lt; i &amp;&amp; abs(matrix[j][j]) &gt;= eps) { continue; }\n      if (abs(matrix[j][i]) &gt; abs(matrix[pivot][i])) { pivot = j; }\n    }\n    swap(matrix[i], matrix[pivot]);\n\n    if (abs(matrix[i][i]) &lt; eps) { continue; }  // \u4e3b\u5143\u4e3a0, \u65e0\u6cd5\u6d88\u5143\n    // \u5c06\u4e3b\u5143\u5316\u4e3a1\n    double major = matrix[i][i];\n    for (int j = i; j &lt; n + 1; ++j) { matrix[i][j] /= major; }\n    // \u6d88\u5143\n    for (int j = 0; j &lt; n; ++j) {\n      if (j != i) {\n        double factor = matrix[j][i];\n        for (int k = i; k &lt; n + 1; ++k) { matrix[j][k] -= factor * matrix[i][k]; }\n      }\n    }\n  }\n}\n\nvoid BackSubstitution(const vector&lt;vector&lt;double&gt;&gt; &amp;matrix) {\n  int n = matrix.size();\n  // \u56de\u4ee3\n  vector&lt;double&gt; result(n, 0);\n  bool multiple_solutions = false;\n  for (int i = 0; i &lt; n; ++i) {\n    if (abs(matrix[i][i]) &lt; eps) {\n      // \u65e0\u89e3: \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4f46\u5e38\u6570\u9879\u4e0d\u4e3a0\n      if (abs(matrix[i][n]) &gt;= eps) {\n        cout &lt;&lt; -1 &lt;&lt; '\\n';\n        return;\n      }\n      // \u591a\u89e3, \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4e14\u5e38\u6570\u9879\u4e5f\u4e3a0 (\u81ea\u7531\u5143). \u6ce8\u610f\u540e\u7eed\u53ef\u80fd\u51fa\u73b0\u65e0\u89e3\u7684\u60c5\u51b5\n      multiple_solutions = true;\n    }\n    result[i] = matrix[i][n];\n  }\n  if (multiple_solutions) {  // \u5b58\u5728\u65e0\u7a77\u591a\u89e3\n    cout &lt;&lt; 0 &lt;&lt; '\\n';\n    return;\n  }\n  if (!result.empty()) {\n    int count = 1;\n    for (double v : result) {\n      cout &lt;&lt; \"x\" &lt;&lt; count++ &lt;&lt; \"=\" &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; v &lt;&lt; \"\\n\";\n    }\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  // \u8f93\u5165\u589e\u5e7f\u77e9\u9635: n*(n+1)\n  vector&lt;vector&lt;double&gt;&gt; matrix(n, vector&lt;double&gt;(n + 1));\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) { cin &gt;&gt; matrix[i][j]; }\n    cin &gt;&gt; matrix[i][n];\n  }\n  GaussElimination(matrix);\n  BackSubstitution(matrix);\n  return 0;\n}\n</code></pre>","tags":["Math","\u9ad8\u65af\u6d88\u5143","Gauss Elimination"]},{"location":"code/algorithm/Math/Gauss/#\u5f02\u6216\u65b9\u7a0b\u7ec4","title":"\u5f02\u6216\u65b9\u7a0b\u7ec4","text":"<p>\u5f02\u6216\uff08\\text{XOR}\uff09\u65b9\u7a0b\u7ec4\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u5176\u4e2d\u53d8\u91cf\u548c\u5e38\u6570\u9879\u90fd\u5728 GF(2)\uff08\u5373\u6a21 2 \u7684\u6709\u9650\u57df\uff09\u4e0a\u8fdb\u884c\u8fd0\u7b97\u3002 \u5f02\u6216\u65b9\u7a0b\u7ec4\u53ef\u4ee5\u901a\u8fc7\u9ad8\u65af\u6d88\u5143\u6cd5\u5728 GF(2) \u4e0a\u6c42\u89e3\u3002  </p> Lights G <p>\u6709 n \u4e2a\u5f00\u5173\u548c n \u4e2a\u706f\u6ce1\uff0c\u6bcf\u4e2a\u5f00\u5173\u63a7\u5236\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\u72b6\u6001\uff08\u5f00\u6216\u5173\uff09\u3002 \u6bcf\u6309\u4e0b\u4e00\u4e2a\u5f00\u5173\uff0c\u9664\u4e86\u8be5\u5f00\u5173\u63a7\u5236\u7684\u706f\u6ce1\u72b6\u6001\u4f1a\u6539\u53d8\u5916\uff0c\u4e0e\u8be5\u706f\u6ce1\u76f8\u90bb\u7684\u706f\u6ce1\u72b6\u6001\u4e5f\u4f1a\u6539\u53d8\u3002 \u73b0\u5728\u7ed9\u5b9a\u521d\u59cb\u72b6\u6001\u548c\u76ee\u6807\u72b6\u6001\uff0c\u95ee\u6700\u5c11\u6309\u4e0b\u591a\u5c11\u6b21\u5f00\u5173\u53ef\u4ee5\u8fbe\u5230\u76ee\u6807\u72b6\u6001\u3002</p> C++<pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool GaussXor(vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n  int n = matrix.size();\n  // \u6d88\u5143\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) {\n      if (j &lt; i &amp;&amp; matrix[j][j] == 1) { continue; }\n      if (matrix[j][i] == 1) {\n        swap(matrix[i], matrix[j]);\n        break;\n      }\n    }\n    if (matrix[i][i] == 0) { continue; }\n    for (int j = 0; j &lt; n; ++j) {\n      if (j != i &amp;&amp; matrix[j][i] == 1) {\n        for (int k = i; k &lt; n + 1; ++k) { matrix[j][k] ^= matrix[i][k]; }\n      }\n    }\n  }\n\n  for (int i = 0; i &lt; n; ++i) {\n    if (matrix[i][i] == 0) { return false; }\n  }\n  return true;\n}\n\nbool BackSubstitution(const vector&lt;vector&lt;int&gt;&gt; &amp;matrix) {\n  int n = matrix.size();\n  vector&lt;int&gt; result(n, 0);\n  bool multiple_solutions = false;\n  for (int i = 0; i &lt; n; ++i) {\n    if (matrix[i][i] == 0) {\n      // \u65e0\u89e3: \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4f46\u5e38\u6570\u9879\u4e0d\u4e3a0\n      if (matrix[i][n] == 1) { return false; }\n      // \u591a\u89e3, \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4e14\u5e38\u6570\u9879\u4e5f\u4e3a0 (\u81ea\u7531\u5143). \u6ce8\u610f\u540e\u7eed\u53ef\u80fd\u51fa\u73b0\u65e0\u89e3\u7684\u60c5\u51b5\n      multiple_solutions = true;\n    }\n    result[i] = matrix[i][n];\n  }\n  // \u591a\u89e3\n  if (multiple_solutions) { return true; }\n  // \u552f\u4e00\u89e3\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  // \u6784\u9020\u589e\u5e7f\u77e9\u9635: n*(n+1)\n  vector&lt;vector&lt;int&gt;&gt; matrix(n, vector&lt;int&gt;(n + 1));\n  for (int i = 0; i &lt; n; ++i) {\n    matrix[i][i] = 1;\n    matrix[i][n] = 1;\n  }\n  for (int i = 0; i &lt; m; ++i) {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    --a, --b;\n    matrix[a][b] = 1;\n    matrix[b][a] = 1;\n  }\n  int ans           = 0;\n  bool has_solution = GaussXor(matrix);\n  if (has_solution) {\n    for (int i = 0; i &lt; n; ++i) { ans += matrix[i][n]; }\n  } else {\n    ans = n;\n    vector&lt;int&gt; ops(n, 0);\n    std::function&lt;void(int, int)&gt; dfs = [&amp;](int i, int res) {\n      if (res &gt;= ans) { return; }\n      if (i == -1) {\n        ans = min(ans, res);\n        return;\n      }\n      if (matrix[i][i] == 0) {  // \u81ea\u7531\u5143\n        ops[i] = 0;\n        dfs(i - 1, res);\n        ops[i] = 1;\n        dfs(i - 1, res + 1);\n      } else {  // \u4e3b\u5143\n        int val = matrix[i][n];\n        for (int j = i + 1; j &lt; n; ++j) {\n          if (matrix[i][j] == 1) { val ^= ops[j]; }\n        }\n        dfs(i - 1, res + val);\n      }\n    };\n    dfs(n - 1, 0);\n  }\n  cout &lt;&lt; ans &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u9ad8\u65af\u6d88\u5143","Gauss Elimination"]},{"location":"code/algorithm/Math/Gauss/#\u540c\u4f59\u65b9\u7a0b\u7ec4","title":"\u540c\u4f59\u65b9\u7a0b\u7ec4","text":"<p>\u540c\u4f59\u65b9\u7a0b\u7ec4\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u5176\u4e2d\u53d8\u91cf\u548c\u5e38\u6570\u9879\u90fd\u5728\u6a21 m \u7684\u6574\u6570\u73af\u4e0a\u8fdb\u884c\u8fd0\u7b97\u3002 \u540c\u4f59\u65b9\u7a0b\u7ec4\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u7684\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u548c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\uff0c\u4f46\u9700\u8981\u5bf9\u884c\u53d8\u6362\u8fdb\u884c\u9002\u5f53\u7684\u8c03\u6574\u3002  </p> \u540c\u4f59\u65b9\u7a0b\u7ec4 C++<pre><code>#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid GaussModular(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int64_t mod) {\n  int n = matrix.size();\n  // \u589e\u5e7f\u77e9\u9635: n*(n+1), \u5904\u7406\u7cfb\u6570\u77e9\u9635, \u4f7f\u5176\u975e\u8d1f\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt;= n; ++j) { matrix[i][j] = (matrix[i][j] % mod + mod) % mod; }\n  }\n\n  // \u6d88\u5143\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) {\n      // \u5df2\u7ecf\u6d88\u5143\u7684\u884c\u4e0d\u518d\u8003\u8651\n      if (j &lt; i &amp;&amp; matrix[j][j] != 0) { continue; }\n      if (matrix[j][i] != 0) {\n        swap(matrix[i], matrix[j]);\n        break;\n      }\n    }\n\n    if (matrix[i][i] == 0) { continue; }  // \u4e3b\u5143\u4e3a0, \u65e0\u6cd5\u6d88\u5143\n    for (int j = 0; j &lt; n; ++j) {\n      if (j != i &amp;&amp; matrix[j][i] != 0) {\n        int factor   = gcd(matrix[j][i], matrix[i][i]);\n        int factor_i = matrix[i][i] / factor;\n        int factor_j = matrix[j][i] / factor;\n        if (j &lt; i &amp;&amp; matrix[j][j] != 0) {\n          // \u5982\u679cj\u884c\u6709\u4e3b\u5143\uff0c\u90a3\u4e48\u4ecej\u5217\u5230i-1\u5217\u7684\u6240\u6709\u7cfb\u6570 * factor_j\n          // \u6b63\u786e\u66f4\u65b0\u4e3b\u5143\u548c\u81ea\u7531\u5143\u4e4b\u95f4\u7684\u5173\u7cfb\n          for (int k = j; k &lt; i; ++k) { matrix[j][k] = (matrix[j][k] * factor_i) % mod; }\n        }\n        // \u6d88\u5143\n        for (int k = i; k &lt; n + 1; ++k) {\n          matrix[j][k] = ((matrix[j][k] * factor_i - matrix[i][k] * factor_j) % mod + mod) % mod;\n        }\n      }\n    }\n  }\n  // \u9006\u5143\u8868, \u53ea\u9002\u7528\u4e8e\u8d28\u6570\u6a21\n  vector&lt;int64_t&gt; inverse(mod, 0);\n  inverse[1] = 1;\n  for (int i = 2; i &lt; mod; ++i) { inverse[i] = (mod - mod / i) * inverse[mod % i] % mod; }\n  // \u6536\u5c3e, \u8bbe\u7f6e\u4e3b\u5143\u4e3a1\n  for (int i = 0; i &lt; n; ++i) {\n    if (matrix[i][i] == 0) { continue; }\n    bool free_variable = false;\n    for (int j = i + 1; j &lt; n; ++j) {\n      if (matrix[i][j] != 0) {\n        free_variable = true;\n        break;\n      }\n    }\n    // \u5982\u679c\u8be5\u884c\u6709\u81ea\u7531\u5143\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f52\u4e00\u5316\u4e3b\u5143\n    if (free_variable) { continue; }\n    int64_t inv  = inverse[matrix[i][i]];\n    matrix[i][i] = 1;\n    matrix[i][n] = (matrix[i][n] * inv) % mod;\n  }\n}\n\n// \u56de\u4ee3\nvoid BackSubstitution(const vector&lt;vector&lt;double&gt;&gt; &amp;matrix) {\n  int n = matrix.size();\n  vector&lt;int&gt; result(n, 0);\n  bool multiple_solutions = false;\n  for (int i = 0; i &lt; n; ++i) {\n    if (matrix[i][i] == 0) {\n      // \u65e0\u89e3: \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4f46\u5e38\u6570\u9879\u4e0d\u4e3a0\n      if (matrix[i][n] != 0) { return; }\n      // \u591a\u89e3, \u8be5\u884c\u4e3b\u5143\u4e3a0, \u4e14\u5e38\u6570\u9879\u4e5f\u4e3a0 (\u81ea\u7531\u5143). \u6ce8\u610f\u540e\u7eed\u53ef\u80fd\u51fa\u73b0\u65e0\u89e3\u7684\u60c5\u51b5\n      multiple_solutions = true;\n    }\n    result[i] = matrix[i][n];\n  }\n  // \u591a\u89e3\n  if (multiple_solutions) { return; }\n  return;\n}\n</code></pre> Gambler Bo <p>\u6709 n \u884c m \u5217\u7684\u683c\u5b50\uff0c\u6bcf\u4e2a\u683c\u5b50\u6709\u4e00\u4e2a\u521d\u59cb\u503c\u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u683c\u5b50\uff0c\u4ee4\u8be5\u683c\u5b50\u7684\u503c\u52a0 2 \u548c\u5b83\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\u7684\u503c\u52a0 1\uff08\u5982\u679c\u5b58\u5728\uff09\u3002 \u76ee\u6807\u662f\u901a\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\u4f7f\u5f97\u6240\u6709\u683c\u5b50\u7684\u503c\u90fd\u80fd\u88ab 3 \u6574\u9664\uff08\u5373\u6a21 3 \u7b49\u4e8e 0\uff09\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <p>T \\leq 10, 1 \\leq N,M \\leq 30 \u5982\u679c\u6bcf\u6b21\u6d88\u5143\u4ece 0 \u884c\u5f00\u59cb\u627e\u4e3b\u5143\uff0c\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002</p> C++<pre><code>#include &lt;array&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MOD = 3;\n\n// \u6c42\u6a21 3 \u4e0b\u9006\u5143\ninline int inv3(int x) {\n  if (x == 1) { return 1; }\n  if (x == 2) { return 2; }\n  return 0;  // 0 \u65e0\u9006\u5143\n}\n\n// \u6a21 3 \u9ad8\u65af\u6d88\u5143\n// matrix: n x (n+1) \u589e\u5e7f\u77e9\u9635\n// x: \u8fd4\u56de\u89e3\nvoid GaussModular(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, vector&lt;int&gt; &amp;x, int n) {\n  for (int i = 0; i &lt; n; ++i) {\n    // \u627e\u4e3b\u5143\n    int pivot = -1;\n    for (int j = i; j &lt; n; ++j) {\n      if (matrix[j][i] != 0) {\n        pivot = j;\n        break;\n      }\n    }\n    if (pivot == -1) { continue; }  // \u4e3b\u5143\u4e3a0, \u65e0\u6cd5\u6d88\u5143\n    swap(matrix[i], matrix[pivot]);\n\n    // \u4e3b\u5143\u5f52\u4e00\u5316\n    int inv = inv3(matrix[i][i]);\n    for (int k = i; k &lt;= n; ++k) { matrix[i][k] = (matrix[i][k] * inv) % MOD; }\n\n    // \u6d88\u5143\u6574\u5217\n    for (int j = 0; j &lt; n; ++j) {\n      if (j == i || matrix[j][i] == 0) { continue; }\n      int factor = matrix[j][i];\n      for (int k = i; k &lt;= n; ++k) {\n        matrix[j][k] = (matrix[j][k] - factor * matrix[i][k] % MOD + MOD) % MOD;\n      }\n    }\n  }\n\n  // \u56de\u4ee3\n  for (int i = 0; i &lt; n; ++i) { x[i] = matrix[i][n]; }\n}\n\n// \u56de\u4ee3\u8f93\u51fa\u7ed3\u679c\nvoid OutputSolution(const vector&lt;int&gt; &amp;x, int n, int m) {\n  int total = 0;\n  for (int i = 0; i &lt; n * m; ++i) { total += x[i]; }\n  cout &lt;&lt; total &lt;&lt; \"\\n\";\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; m; ++j) {\n      int idx = i * m + j;\n      for (int k = 0; k &lt; x[idx]; ++k) { cout &lt;&lt; i + 1 &lt;&lt; \" \" &lt;&lt; j + 1 &lt;&lt; \"\\n\"; }\n    }\n  }\n}\n\n// \u6784\u5efa\u589e\u5e7f\u77e9\u9635\nvoid BuildMatrix(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int n, int m, const vector&lt;int&gt; &amp;vals) {\n  array&lt;int, 4&gt; dir_x = {0, 0, 1, -1};\n  array&lt;int, 4&gt; dir_y = {1, -1, 0, 0};\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; m; ++j) {\n      int idx          = i * m + j;\n      matrix[idx][idx] = 2;  // \u5bf9\u81ea\u5df1\u5f71\u54cd\u4e3a 2\n      // \u5bf9\u56db\u4e2a\u65b9\u5411\u5f71\u54cd\u4e3a 1\n      for (int d = 0; d &lt; 4; ++d) {\n        int ni = i + dir_x[d];\n        int nj = j + dir_y[d];\n        if (ni &lt; 0 || ni &gt;= n || nj &lt; 0 || nj &gt;= m) { continue; }\n        matrix[idx][ni * m + nj] = 1;\n      }\n      matrix[idx][n * m] = (MOD - vals[idx]) % MOD;\n    }\n  }\n}\n\nvoid solve() {\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int&gt; vals(n * m);\n  for (int i = 0; i &lt; n * m; ++i) { cin &gt;&gt; vals[i]; }\n\n  vector&lt;vector&lt;int&gt;&gt; matrix(n * m, vector&lt;int&gt;(n * m + 1, 0));\n  vector&lt;int&gt; x(n * m, 0);\n  BuildMatrix(matrix, n, m, vals);\n  GaussModular(matrix, x, n * m);\n  OutputSolution(x, n, m);\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["Math","\u9ad8\u65af\u6d88\u5143","Gauss Elimination"]},{"location":"code/algorithm/Math/Inverse/","title":"\u9006\u5143","text":"","tags":["Math","\u9006\u5143","Inverse","\u6a21\u9006\u5143","Modular Inverse"]},{"location":"code/algorithm/Math/Inverse/#\u9006\u5143","title":"\u9006\u5143","text":"<p>\u5728\u6570\u5b66\u4e2d\uff0c\u9006\u5143\uff08\\text{Inverse}\uff09\u662f\u6307\u5728\u67d0\u79cd\u8fd0\u7b97\u4e0b\u4e0e\u7ed9\u5b9a\u5143\u7d20\u7ed3\u5408\u540e\u80fd\u5f97\u5230\u5355\u4f4d\u5143\u7684\u5143\u7d20\u3002 \u5bf9\u4e8e\u52a0\u6cd5\u8fd0\u7b97\uff0c\u5143\u7d20 a \u7684\u9006\u5143\u662f -a\uff0c \u56e0\u4e3a a + (-a) = 0\u3002 \u5bf9\u4e8e\u4e58\u6cd5\u8fd0\u7b97\uff0c\u5143\u7d20 a(a \\neq 0) \u7684\u9006\u5143\u662f \\frac{1}{a}\uff0c\u56e0\u4e3a a \\times \\frac{1}{a} = 1\u3002 \u5728\u6a21\u8fd0\u7b97\u4e2d\uff0c\u5143\u7d20 a \u7684\u6a21\u9006\u5143\u662f\u6ee1\u8db3 a \\times a^{-1} \\equiv 1 \\mod m \u7684\u6574\u6570 a^{-1}\uff0c\u524d\u63d0\u662f a \u4e0e\u6a21\u6570 m \u4e92\u8d28\uff08\\gcd(a, m) = 1\uff09\u3002 \u6b64\u5904\u53ea\u8ba8\u8bba\u6a21\u9006\u5143\u3002</p>","tags":["Math","\u9006\u5143","Inverse","\u6a21\u9006\u5143","Modular Inverse"]},{"location":"code/algorithm/Math/Inverse/#\u8d39\u9a6c\u5c0f\u5b9a\u7406","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406","text":"<p>\u8d39\u9a6c\u5c0f\u5b9a\u7406</p> <p>\u5982\u679c p \u662f\u8d28\u6570\uff0c\u4e14 a \u662f\u6574\u6570\u4e14\u4e0d\u88ab p \u6574\u9664\uff08\u5373 \\gcd(a, p) = 1\uff09\uff0c\u5219\u6709\uff1aa^{p-1} \\equiv 1 \\mod p\u3002\u4e8e\u662f\uff1aa \\times a^{p-2} \\equiv a^{p-1} \\equiv 1 \\mod p\u3002 \u56e0\u6b64\uff0c\u5f53\u6a21\u6570\u662f\u8d28\u6570\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 a^{p-2} \\bmod p \u6765\u5f97\u5230 a \u7684\u6a21\u9006\u5143\u3002</p> <p>\u901a\u8fc7\u5feb\u901f\u5e42\u7b97\u6cd5\u53ef\u4ee5\u5728 O(\\log p) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u6a21\u9006\u5143\u3002 \u901a\u8fc7\u9006\u5143\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u9664\u6cd5\uff1a\\frac{a}{b} \\equiv a \\times b^{p-2} \\mod p\u3002</p> \u8d39\u9a6c\u5c0f\u5b9a\u7406\u8ba1\u7b97\u6a21\u9006\u5143 C++<pre><code>int64_t inverse(int x, int64_t mod = 1'000'000'007) {\n  auto pow = [](int64_t x, int64_t n, int64_t mod = 1'000'000'007) {\n    int64_t res  = 1;\n    int64_t base = x % mod;\n    while (n &gt; 0) {\n      // \u5982\u679c n \u662f\u5947\u6570, \u5219\u9700\u8981\u5c06\u5f53\u524d\u7684 x \u4e58\u5230\u7ed3\u679c\u4e0a\n      if ((n &amp; 1) != 0) { res = (res * base) % mod; }\n      base   = (base * base) % mod;\n      n    &gt;&gt;= 1;\n    }\n    return res;\n  };\n  return pow(x, mod - 2, mod);\n}\n\n// \u8ba1\u7b97 a / b mod p (1)\nint64_t div(int64_t a, int b, int64_t mod = 1'000'000'007) {\n  return (a % mod) * inverse(b, mod) % mod;\n}\n</code></pre> <ol> <li>\u5982\u679c\u4f7f\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u8ba1\u7b97 \\frac{a}{b} \\bmod p\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a<ol> <li>p \u662f\u8d28\u6570</li> <li>b \u548c p \u4e92\u8d28</li> <li>\\frac{a}{b} \u662f\u6574\u6570, \u5373 a \u80fd\u88ab b \u6574\u9664</li> </ol> </li> </ol>","tags":["Math","\u9006\u5143","Inverse","\u6a21\u9006\u5143","Modular Inverse"]},{"location":"code/algorithm/Math/Inverse/#\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","text":"<p>\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u89e3\u9006\u5143\u53ea\u9002\u7528\u4e8e\u6a21\u6570\u4e3a\u8d28\u6570\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u8ba1\u7b97\u4efb\u610f\u6a21\u6570\u4e0b\u7684\u6a21\u9006\u5143\uff0c\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u901a\u8fc7\u6c42\u89e3\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax + by = 1 \u6765\u627e\u5230 x\uff0c\u5176\u4e2d x \u5373\u4e3a a \u5728\u6a21 b \u4e0b\u7684\u6a21\u9006\u5143\u3002 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u6c42\u51fa\u4efb\u610f\u4e0e b \u4e92\u8d28\u7684 a \u7684\u6a21\u9006\u5143\u3002</p> <p>\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 a \u548c b\uff0c\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7528\u4e8e\u6c42\u89e3\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax + by = \\gcd(a, b) \u7684\u6574\u6570\u89e3 (x, y)\u3002 \u5f53 a \u548c b \u4e92\u8d28\u65f6\uff08\u5373 \\gcd(a, b) = 1\uff09\uff0c\u8be5\u65b9\u7a0b\u6709\u6574\u6570\u89e3 (x, y)\uff0c\u5176\u4e2d x \u5373\u4e3a a \u5728\u6a21 b \u4e0b\u7684\u6a21\u9006\u5143\u3002 \u901a\u8fc7\u9012\u5f52\u5730\u5e94\u7528\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u53ef\u4ee5\u627e\u5230 x \u548c y \u7684\u503c\u3002</p> \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u8ba1\u7b97\u6a21\u9006\u5143 C++<pre><code>int64_t inverse_euclid(int64_t a, int64_t mod) {\n  using TIII        = tuple&lt;int64_t, int64_t, int64_t&gt;;\n  auto extended_gcd = [](int64_t a, int64_t b) {\n    auto y_combinator = [](auto &amp;&amp;self, int64_t a, int64_t b) -&gt; TIII {\n      if (b == 0) { return {a, 1, 0}; }\n      auto [d, x1, y1] = self(self, b, a % b);\n      int64_t x        = y1;\n      int64_t y        = x1 - (a / b) * y1;\n      return {d, x, y};\n    };\n    return y_combinator(y_combinator, a, b);\n  };\n  auto [d, x, y] = extended_gcd(a, mod);\n  if (d != 1) { return -1; }  // a \u548c mod \u4e0d\u4e92\u8d28, \u65e0\u9006\u5143\n  return (x % mod + mod) % mod;\n}\n</code></pre>","tags":["Math","\u9006\u5143","Inverse","\u6a21\u9006\u5143","Modular Inverse"]},{"location":"code/algorithm/Math/Inverse/#\u7ebf\u6027\u65f6\u95f4\u9884\u5904\u7406\u9006\u5143","title":"\u7ebf\u6027\u65f6\u95f4\u9884\u5904\u7406\u9006\u5143","text":"<p>\u5f53\u9700\u8981\u8ba1\u7b97 n \u4e2a\u6570\u7684\u6a21\u9006\u5143\u65f6\uff0c\u5982\u679c\u5bf9\u6bcf\u4e2a\u6570\u90fd\u4f7f\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u8ba1\u7b97\u9006\u5143\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log p)\u3002\u56e0\u6b64\u9700\u8981\u7ebf\u6027\u65f6\u95f4\u7b97\u6cd5\u9884\u5904\u7406\u6765\u63d0\u9ad8\u6548\u7387\u3002  </p> <p>\u9012\u63a8\u516c\u5f0f</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u8d28\u6570 p\uff0c\u8ba1\u7b97 1, 2, \\ldots, n \u7684\u6a21\u9006\u5143\u3002 \\forall i \\in [1, n], p = \\lfloor \\frac{p}{i} \\rfloor * i + (p \\bmod i)(1) \\Rightarrow \\lfloor \\frac{p}{i} \\rfloor * i + (p \\bmod i) \\equiv 0 \\mod p \\Rightarrow \\lfloor \\frac{p}{i} \\rfloor * (p \\bmod i)^{-1} + i^{-1} \\equiv 0 \\mod p(2) \u4e8e\u662f\uff1ai^{-1} \\equiv -\\lfloor \\frac{p}{i} \\rfloor * (p \\bmod i)^{-1} \\mod p\u3002  \u8bbe i \u7684\u6a21\u9006\u5143\u4e3a inverse[i]\uff0c\u5219\u6709\u4ee5\u4e0b\u9012\u63a8\u516c\u5f0f\uff1a \\begin{aligned} inverse[1] &amp;= 1 \\\\ inverse[i] &amp;= (p - \\lfloor \\frac{p}{i} \\rfloor) \\times inverse[p \\bmod i] \\bmod p \\quad (i &gt; 1) \\end{aligned}</p> <ol> <li>\u6574\u9664\u4e0e\u53d6\u4f59\u5b9a\u4e49</li> <li>\u4e58\u4ee5 i^{-1} * (p \\bmod i)^{-1}\uff0c\u524d\u63d0\u662f i \u548c p \\bmod i \u90fd\u4e0e p \u4e92\u8d28</li> </ol> \u7ebf\u6027\u65f6\u95f4\u9884\u5904\u7406\u9006\u5143 C++<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nauto linear_inverse(int n, int64_t mod = 1'000'000'007) {\n  static vector&lt;int64_t&gt; inverse({0, 1});  // \u4e58\u6cd5\u9006\u5143\n  int size = inverse.size();\n  if (inverse.size() &lt;= n) { inverse.resize(n + 1, 1); }\n  for (int i = size; i &lt;= n; i++) {\n    inverse[i] = (mod - mod / i) * inverse[mod % i] % mod;\n  }\n  return [&amp;](int x) { return inverse[x]; };\n}\n</code></pre> <p>\u5728\u8ba1\u7b97\u7ec4\u5408\u6570\u76f8\u5173\u65f6\uff0c\u5e38\u5e38\u7528\u5230\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6027\u65f6\u95f4\u9884\u5904\u7406\u6765\u8ba1\u7b97\u3002\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u6c42\u51fa\u4e58\u6cd5\u9006\u5143\u3002</p> <p>\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u8d28\u6570 p\uff0c\u8ba1\u7b97 1, 2, \\ldots, n \u7684\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u901a\u8fc7\u8d39\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u8ba1\u7b97\u51fa n! \u7684\u9006\u5143\u4e3a\uff1a(n!)^{p-2} \\bmod p\u3002 \u7531 ((i-1)!)^{-1} \\equiv i \\cdot (i!)^{-1} \\mod p\uff0c\u53ef\u4ee5\u9012\u63a8\u8ba1\u7b97\u51fa n-1, n -2, \\dots, 1 \u7684\u9636\u4e58\u9006\u5143\u3002 \u7531 i^{-1} \\equiv (i!)^{-1} \\cdot (i-1)! \\mod p\uff0c\u53ef\u4ee5\u9012\u63a8\u8ba1\u7b97\u51fa 1, 2, \\ldots, n \u7684\u4e58\u6cd5\u9006\u5143\u3002</p> \u7ebf\u6027\u65f6\u95f4\u9884\u5904\u7406\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143 C++<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nauto factorial_inverse(int n, int64_t mod = 1'000'000'007) {\n  auto pow = [](int64_t x, int64_t n, int64_t mod = 1'000'000'007) {\n    int64_t res  = 1;\n    int64_t base = x % mod;\n    while (n &gt; 0) {\n      // \u5982\u679c n \u662f\u5947\u6570, \u5219\u9700\u8981\u5c06\u5f53\u524d\u7684 x \u4e58\u5230\u7ed3\u679c\u4e0a\n      if ((n &amp; 1) != 0) { res = (res * base) % mod; }\n      base   = (base * base) % mod;\n      n    &gt;&gt;= 1;\n    }\n    return res;\n  };\n\n  static vector&lt;int64_t&gt; fac({1, 1});          // \u9636\u4e58\n  static vector&lt;int64_t&gt; inverse_fac({1, 1});  // \u9636\u4e58\u7684\u9006\u5143\n  static vector&lt;int64_t&gt; inverse({0, 1});      // \u4e58\u6cd5\u9006\u5143\n\n  int size = fac.size();\n  if (fac.size() &lt;= n) {\n    fac.resize(n + 1, 1);\n    inverse_fac.resize(n + 1, 1);\n    inverse.resize(n + 1, 1);\n  }\n\n  // O(n)\u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143\n  // \u8ba1\u7b97\u9636\u4e58\n  for (int i = size; i &lt;= n; ++i) { fac[i] = fac[i - 1] * i % mod; }\n  // \u8ba1\u7b97\u9636\u4e58\u7684\u9006\u5143\n  inverse_fac[n] = pow(fac[n], mod - 2, mod);\n  for (int i = n; i &gt; size; --i) { inverse_fac[i - 1] = inverse_fac[i] * i % mod; }\n  // \u8ba1\u7b97\u4e58\u6cd5\u9006\u5143\n  for (int i = size; i &lt;= n; ++i) { inverse[i] = inverse_fac[i] * fac[i - 1] % mod; }\n\n  return [&amp;](int64_t x) { return inverse[x]; };\n}\n</code></pre>","tags":["Math","\u9006\u5143","Inverse","\u6a21\u9006\u5143","Modular Inverse"]},{"location":"code/algorithm/Math/JosephRing/","title":"\u7ea6\u745f\u592b\u73af","text":"","tags":["Math","\u7ea6\u745f\u592b\u73af","Joseph Ring"]},{"location":"code/algorithm/Math/JosephRing/#\u7ea6\u745f\u592b\u73af","title":"\u7ea6\u745f\u592b\u73af","text":"<p>\u7ed9\u5b9a n \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c 1 \u4e2a\u4eba\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u5230 m \u7684\u4eba\u51fa\u5217\uff0c\u95ee\u6700\u540e\u5269\u4e0b\u7684\u662f\u8c01\uff1f \u89e3\u51b3\u65b9\u6cd5\uff1a  </p> <ol> <li>\u6734\u7d20\u6a21\u62df\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 O(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n)</li> <li>\u6570\u5b66\u5f52\u7eb3\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)</li> </ol>","tags":["Math","\u7ea6\u745f\u592b\u73af","Joseph Ring"]},{"location":"code/algorithm/Math/JosephRing/#\u6570\u5b66\u5f52\u7eb3\u6cd5","title":"\u6570\u5b66\u5f52\u7eb3\u6cd5","text":"<p>\u5047\u8bbe f(n, m) \u8868\u793a n \u4e2a\u4eba\u62a5\u6570\u5230 m \u51fa\u5217\u65f6\uff0c\u5e78\u5b58\u8005\u7684\u7f16\u53f7(\u4ece 0 \u5f00\u59cb)\u3002 \u5f53\u7b2c 1 \u4e2a\u4eba\u51fa\u5217\u65f6\uff08\u7f16\u53f7\u4e3a m-1\uff09\uff0c\u5269\u4e0b n-1 \u4e2a\u4eba\u3002\u65b0\u4e00\u8f6e\u7f16\u53f7\u4ece\u539f\u7f16\u53f7\u4e3a m \u7684\u4eba\u5f00\u59cb\uff0c\u8fd9\u4e2a\u4eba\u5728\u65b0\u4e00\u8f6e\u7684\u7f16\u53f7\u4e3a 0\uff0c\u539f\u7f16\u53f7\u4e3a m+1 \u7684\u4eba\u5728\u65b0\u4e00\u8f6e\u7684\u7f16\u53f7\u4e3a 1\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u56e0\u6b64\uff0c\u65e7\u7f16\u53f7\u4e0e\u65b0\u7f16\u53f7\u7684\u5173\u7cfb\u4e3a\uff1a\\text{old\\_index} = (\\text{new\\_index} + m) \\% n </p> <p>\u9012\u63a8\u5173\u7cfb\u5982\u4e0b\uff1a  </p>  f(n,m) =  \\begin{cases} 0, &amp; n=1 \\\\ \\left(f\\left(n-1,m\\right) + m\\right) \\% n, &amp; n&gt;1 \\end{cases}  <p>Tip</p> <p>\u5f53\u9012\u63a8\u5173\u7cfb\u5448\u73b0\u5148\u4e0d\u65ad\u9012\u589e\uff0c\u7136\u540e\u9aa4\u51cf\u5230 0 \u7684\u5f62\u5f0f\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u53d6\u6a21\u8fd0\u7b97\u3002</p> \u7ea6\u745f\u592b\u73af C++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint64_t josephus(int64_t n, int64_t m) {\n  int64_t result = 0;  // \u53ea\u6709\u4e00\u4e2a\u4eba\u65f6, \u7f16\u53f7\u4e3a0\n  for (int64_t i = 2; i &lt;= n; ++i) { result = (result + m) % i; }\n  return result;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  cout &lt;&lt; josephus(n, m) + 1 &lt;&lt; \"\\n\";  // \u4ece1\u5f00\u59cb\u7f16\u53f7\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ea6\u745f\u592b\u73af","Joseph Ring"]},{"location":"code/algorithm/Math/JosephRing/#\u53d8\u79cd\u7ea6\u745f\u592b\u73af","title":"\u53d8\u79cd\u7ea6\u745f\u592b\u73af","text":"<p>\u6bcf\u8f6e\u62a5\u6570\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u7531\u6570\u7ec4 ms \u7ed9\u51fa\uff0cms[i] \u8868\u793a\u7b2c i \u8f6e\u62a5\u6570\u7684\u503c\uff0c\u5219\u9012\u63a8\u5173\u7cfb\u4e3a:  </p>  f(n, ms) =  \\begin{cases} 0, &amp; n=1 \\\\ \\left(f\\left(n-1, ms\\right) + ms[n-2]\\right) \\% n, &amp; n&gt;1 \\end{cases}  \u53d8\u79cd\u7ea6\u745f\u592b\u73af C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t josephus(int64_t n, const vector&lt;int64_t&gt; &amp;ms) {\n  int64_t result = 0;  // \u53ea\u6709\u4e00\u4e2a\u4eba\u65f6, \u4e0b\u6807\u4e3a0\n  for (int64_t i = 2; i &lt;= n; ++i) { result = (result + ms[i - 2]) % i; }\n  return result;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; ms(n - 1);\n  for (int64_t i = 0; i &lt; n - 1; ++i) { cin &gt;&gt; ms[i]; }\n  cout &lt;&lt; josephus(n, ms) + 1 &lt;&lt; \"\\n\";  // \u4ece1\u5f00\u59cb\u7f16\u53f7\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ea6\u745f\u592b\u73af","Joseph Ring"]},{"location":"code/algorithm/Math/LinearBasis/","title":"\u7ebf\u6027\u57fa","text":"","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/LinearBasis/#\u7ebf\u6027\u57fa","title":"\u7ebf\u6027\u57fa","text":"<p>\u7ebf\u6027\u57fa\uff08\\text{Linear Basis}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u5411\u91cf\u7a7a\u95f4\u4e2d\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u4e00\u7cfb\u5217\u4e0e\u7ebf\u6027\u4ee3\u6570\u76f8\u5173\u7684\u95ee\u9898\uff0c\u5982\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u3001\u8ba1\u7b97\u5411\u91cf\u7684\u79e9\u3001\u5bfb\u627e\u6700\u5927\u5f02\u6216\u5b50\u96c6\u7b49\u3002 \u7ebf\u6027\u57fa\u662f\u4e00\u4e2a\u5411\u91cf\u7ec4\uff0c\u53ef\u4ee5\u8868\u793a\u8be5\u5411\u91cf\u7ec4\u4e2d\u4efb\u610f\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u3002\u7ebf\u6027\u57fa\u7684\u4e3b\u8981\u7279\u70b9\u662f\u5176\u5411\u91cf\u4e4b\u95f4\u7ebf\u6027\u65e0\u5173\uff0c\u5373\u6ca1\u6709\u4e00\u4e2a\u5411\u91cf\u53ef\u4ee5\u8868\u793a\u4e3a\u5176\u4ed6\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\uff08\u7ebf\u6027\u65e0\u5173\u6027\uff09\u3002\u7ebf\u6027\u57fa\u7684\u5927\u5c0f\u7b49\u4e8e\u8be5\u5411\u91cf\u7ec4\u7684\u79e9\u3002 \u7ebf\u6027\u57fa\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u901a\u5e38\u4e3a O(n \\cdot m)\uff0c\u5176\u4e2d n \u662f\u5411\u91cf\u7684\u7ef4\u5ea6\uff0cm \u662f\u63d2\u5165\u7684\u5411\u91cf\u6570\u91cf\u3002  </p>","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/LinearBasis/#\u666e\u901a\u6d88\u5143","title":"\u666e\u901a\u6d88\u5143","text":"<p>\u666e\u901a\u6d88\u5143\u6cd5\u901a\u8fc7\u9010\u6b65\u6d88\u53bb\u5411\u91cf\u4e2d\u7684\u6700\u9ad8\u4f4d\u6765\u6784\u5efa\u7ebf\u6027\u57fa\uff08\u8d2a\u5fc3\u6784\u9020\uff09\u3002 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u6c42\u51fa\u7ebf\u6027\u57fa\u7684\u6700\u5927\u5f02\u6216\u548c\u3001\u6700\u5c0f\u5f02\u6216\u548c\u3001\u79e9\u3001\u80fd\u8868\u793a\u7684\u6570\u7684\u4e2a\u6570\u3001\u662f\u5426\u80fd\u8868\u793a\u67d0\u4e2a\u6570\u7b49\u4fe1\u606f\u3002  </p> \u3010\u6a21\u677f\u3011\u7ebf\u6027\u57fa <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u6784\u5efa\u5176\u7ebf\u6027\u57fa\u3002 \u6c42\u7ebf\u6027\u57fa\u7684\u6700\u5927\u5f02\u6216\u548c\u3002  </p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct linear_basis {\n  int64_t bit;            // \u7ebf\u6027\u57fa\u7684\u4f4d\u6570\n  vector&lt;int64_t&gt; basis;  // \u7ebf\u6027\u57fa\n\n  bool has_zero = false;  // \u539f\u6570\u7ec4\u662f\u5426\u80fd\u8868\u793a 0\n\n  explicit linear_basis(int64_t bit = 64) : bit(bit), basis(bit) {}\n\n  // \u63d2\u5165 x \u5230\u7ebf\u6027\u57fa, \u5982\u679c\u63d2\u5165\u6210\u529f\u8fd4\u56de true, \u5426\u5219\u8fd4\u56de false\n  // \u63d2\u5165\u5931\u8d25\u8868\u793a x \u53ef\u4ee5\u7531\u7ebf\u6027\u57fa\u8868\u793a, \u5373 x \u88ab\u6d88\u4e3a 0, \u539f\u6570\u7ec4\u53ef\u4ee5\u8868\u793a 0\n  bool insert(int64_t x) {\n    for (int64_t i = bit - 1; i &gt;= 0; --i) {\n      // x \u7684\u7b2c i \u4f4d\u4e3a 0\uff0c\u8df3\u8fc7\n      if ((x &gt;&gt; i &amp; 1) == 0) { continue; }\n      if (basis[i] == 0) {  // basis[i] \u4e3a\u7a7a\uff0c\u63d2\u5165\n        basis[i] = x;\n        return true;\n      }\n      x ^= basis[i];  // \u6d88\u53bb x \u7684\u7b2c i \u4f4d\n    }\n    has_zero = true;  // x \u88ab\u6d88\u4e3a 0, \u539f\u6570\u7ec4\u80fd\u8868\u793a 0\n    return false;     // x \u88ab\u6d88\u4e3a 0, \u672a\u63d2\u5165\n  };\n\n  // \u6c42\u7ebf\u6027\u57fa\u4e2d\u7684\u6700\u5927\u5f02\u6216\u548c\n  int64_t max_xor() const {\n    int64_t res = 0;\n    for (int64_t i = bit - 1; i &gt;= 0; --i) { res = max(res, res ^ basis[i]); }\n    return res;\n  };\n\n  // \u6c42\u7ebf\u6027\u57fa\u4e2d\u7684\u6700\u5c0f\u5f02\u6216\u548c\n  int64_t min_xor() const {\n    for (int64_t i = 0; i &lt; bit; ++i) {\n      if (basis[i] != 0) { return basis[i]; }  // \u6700\u5c0f\u975e\u96f6\u5f02\u6216\u548c\n    }\n    return 0LL;  // \u7ebf\u6027\u57fa\u4e3a\u7a7a, \u6700\u5c0f\u5f02\u6216\u548c\u4e3a 0\n  };\n\n  // \u6c42\u7ebf\u6027\u57fa\u7684\u79e9\n  int64_t rank() const {\n    int64_t res = 0;\n    for (int64_t i = 0; i &lt; bit; ++i) { res += static_cast&lt;int64_t&gt;(basis[i] != 0); }\n    return res;\n  };\n\n  // \u6c42\u7ebf\u6027\u57fa\u80fd\u8868\u793a\u7684\u6570\u7684\u4e2a\u6570: 2^rank\n  int64_t size() const { return 1LL &lt;&lt; rank(); };\n\n  // \u68c0\u67e5 x \u662f\u5426\u53ef\u4ee5\u7531\u7ebf\u6027\u57fa\u8868\u793a\n  bool check(int64_t x) const {\n    for (int64_t i = bit - 1; i &gt;= 0; --i) {\n      if ((x &gt;&gt; i &amp; 1) == 0) { continue; }\n      if (basis[i] == 0) { return false; }  // basis[i] \u4e3a\u7a7a\uff0c\u65e0\u6cd5\u8868\u793a\n      x ^= basis[i];                        // \u6d88\u53bb x \u7684\u7b2c i \u4f4d\n    }\n    return true;  // x \u88ab\u6d88\u4e3a 0\uff0c\u53ef\u4ee5\u8868\u793a\n  };\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  linear_basis lb(64);\n  for (int64_t i = 0; i &lt; n; ++i) {\n    int64_t x;\n    cin &gt;&gt; x;\n    lb.insert(x);\n  }\n  cout &lt;&lt; lb.max_xor() &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/LinearBasis/#\u9ad8\u65af\u6d88\u5143","title":"\u9ad8\u65af\u6d88\u5143","text":"<p>\u9ad8\u65af\u6d88\u5143\u6cd5\u901a\u8fc7\u5c06\u5411\u91cf\u7ec4\u8868\u793a\u4e3a\u77e9\u9635\uff0c\u5e76\u5bf9\u77e9\u9635\u8fdb\u884c\u884c\u53d8\u6362\u6765\u6784\u5efa\u7ebf\u6027\u57fa\u3002 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u6c42\u51fa\u7ebf\u6027\u57fa\u7684\u6700\u5927\u5f02\u6216\u548c\u3001\u6700\u5c0f\u5f02\u6216\u548c\u3001\u7b2c k \u5927\u5f02\u6216\u548c\uff08\u666e\u901a\u6d88\u5143\u6cd5\u4e0d\u80fd\u6c42\u51fa\uff09\u3001\u79e9\u3001\u80fd\u8868\u793a\u7684\u6570\u7684\u4e2a\u6570\u3001\u662f\u5426\u80fd\u8868\u793a\u67d0\u4e2a\u6570\u7b49\u4fe1\u606f\u3002  </p> k \u5927\u5f02\u6216\u548c <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u6784\u5efa\u5176\u7ebf\u6027\u57fa\u3002 \u5bf9\u4e8e m \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570 k\uff0c\u6c42\u7b2c k \u5927\u5f02\u6216\u548c\u3002\u5982\u679c k \u8d85\u51fa\u8303\u56f4\uff0c\u8f93\u51fa -1\u3002  </p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct guassian_basis {\n  vector&lt;int64_t&gt; basis;  // \u7ebf\u6027\u57fa\n\n  bool has_zero = false;  // \u662f\u5426\u80fd\u8868\u793a 0\n\n  explicit guassian_basis(const vector&lt;int64_t&gt; &amp;nums, int64_t bit = 64) : basis(nums) {\n    int64_t n   = nums.size();\n    int64_t len = 0;  // \u7ebf\u6027\u57fa\u7684\u957f\u5ea6\n    // \u9ad8\u65af\u6d88\u5143\u6784\u5efa\u7ebf\u6027\u57fa\n    for (int64_t i = bit - 1; i &gt;= 0; --i) {\n      for (int64_t j = len; j &lt; n; ++j) {\n        if ((basis[j] &gt;&gt; i &amp; 1) != 0) {  // \u627e\u5230\u7b2c i \u4f4d\u4e3a 1 \u7684\u6570\n          swap(basis[j], basis[len]);    // \u5c06\u5176\u653e\u5230\u524d\u9762\n          break;\n        }\n      }\n      if ((basis[len] &gt;&gt; i &amp; 1) == 0) { continue; }  // \u6ca1\u6709\u627e\u5230\uff0c\u8df3\u8fc7\n      for (int64_t j = 0; j &lt; n; ++j) {\n        // \u6d88\u53bb\u7b2c i \u4f4d\n        if (j != len &amp;&amp; (basis[j] &gt;&gt; i &amp; 1) != 0) { basis[j] ^= basis[len]; }\n      }\n      len++;  // \u589e\u52a0\u7ebf\u6027\u57fa\u7684\u957f\u5ea6\n    }\n\n    basis.resize(len);\n    has_zero = len &lt; n;\n  }\n\n  // \u6c42k\u5927\u5f02\u6216\u548c\n  int64_t kth_xor(int64_t k) const {\n    if (has_zero &amp;&amp; k == 1) { return 0LL; }\n    if (has_zero) { k--; }                            // \u80fd\u8868\u793a 0\uff0ck \u51cf 1\n    if (k &gt;= (1LL &lt;&lt; basis.size())) { return -1LL; }  // \u8d85\u51fa\u8303\u56f4\n    int64_t res = 0;\n    for (int64_t i = basis.size() - 1, j = 0; i &gt;= 0; --i, ++j) {\n      if ((k &gt;&gt; j &amp; 1) != 0) { res ^= basis[i]; }  // \u7b2c i \u4f4d\u4e3a 1\uff0c\u52a0\u5165 basis[i]\n    }\n    return res;\n  }\n\n  // \u6c42\u7ebf\u6027\u57fa\u4e2d\u7684\u6700\u5927\u5f02\u6216\u548c\u7b49\u4fe1\u606f\u548c\u666e\u901a\u6d88\u5143\u6cd5\u7c7b\u4f3c\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int64_t&gt; nums(n);\n  for (int64_t i = 0; i &lt; n; ++i) { cin &gt;&gt; nums[i]; }\n  guassian_basis gb(nums);\n\n  int m;\n  cin &gt;&gt; m;\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t k;\n    cin &gt;&gt; k;\n    cout &lt;&lt; gb.kth_xor(k) &lt;&lt; \"\\n\";\n  }\n}\n</code></pre>","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/LinearBasis/#\u5411\u91cf\u7ebf\u6027\u57fa","title":"\u5411\u91cf\u7ebf\u6027\u57fa","text":"<p>\u5411\u91cf\u7ebf\u6027\u57fa\u662f\u7ebf\u6027\u57fa\u7684\u4e00\u79cd\u6269\u5c55\uff0c\u9002\u7528\u4e8e\u5904\u7406\u9ad8\u7ef4\u5411\u91cf\u7a7a\u95f4\u4e2d\u7684\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u96c6\u5408\u3002  </p> \u88c5\u5907\u8d2d\u4e70 <p>\u6709 n \u4ef6\u88c5\u5907\uff0c\u6bcf\u4ef6\u88c5\u5907\u6709 m \u4e2a\u5c5e\u6027\uff0c\u88c5\u5907 i \u7684\u5c5e\u6027\u4e3a a_{i1}, a_{i2}, \\ldots, a_{im}\uff0c\u4e14\u6709\u4e00\u4e2a\u8d2d\u4e70\u8d39\u7528 c_i\u3002 \u73b0\u5728\u9700\u8981\u4ece\u4e2d\u9009\u62e9\u4e00\u4e9b\u88c5\u5907\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u88c5\u5907\u7684\u5c5e\u6027\u5411\u91cf\u7ebf\u6027\u65e0\u5173\uff0c\u4e14\u8d2d\u4e70\u8d39\u7528\u4e4b\u548c\u6700\u5c0f\u3002 \u8f93\u51fa\u6700\u591a\u80fd\u9009\u62e9\u591a\u5c11\u4ef6\u88c5\u5907\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u6700\u5c0f\u8d39\u7528\u3002  </p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct linear_basis_vector {\n  int64_t m;              // \u5411\u91cf\u7684\u7ef4\u5ea6\n  vector&lt;int64_t&gt; basis;  // \u7ebf\u6027\u57fa\n\n  // m: \u7ef4\u5ea6\n  explicit linear_basis_vector(int64_t m) : m(m), basis(m, -1) {}\n\n  // \u63d2\u5165\u5411\u91cf v \u5230\u7ebf\u6027\u57fa\n  bool insert(int64_t i, vector&lt;vector&lt;double&gt;&gt; &amp;vectors) {\n    const double eps = 1e-5;\n    for (int64_t j = 0; j &lt; m; ++j) {\n      if (abs(vectors[i][j]) &lt; eps) { continue; }  // x \u7684\u7b2c j \u4f4d\u4e3a 0\uff0c\u8df3\u8fc7\n      if (basis[j] == -1) {                        // basis[j] \u4e3a\u7a7a\uff0c\u63d2\u5165\n        basis[j] = i;\n        return true;\n      }\n      // \u6d88\u53bb x \u7684\u7b2c i \u4f4d\n      double ratio = vectors[i][j] / vectors[basis[j]][j];\n      for (int64_t k = j; k &lt; m; ++k) { vectors[i][k] -= ratio * vectors[basis[j]][k]; }\n    }\n    return false;  // x \u88ab\u6d88\u4e3a 0\uff0c\u672a\u63d2\u5165\n  };\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;double&gt;&gt; vectors(n, vector&lt;double&gt;(m));\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; m; ++j) { cin &gt;&gt; vectors[i][j]; }\n  }\n  vector&lt;int64_t&gt; cost(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; cost[i]; }\n  vector&lt;int&gt; indices(n);\n  iota(indices.begin(), indices.end(), 0);\n  // \u6309\u7167 cost \u5347\u5e8f\u6392\u5e8f, cost \u5c0f\u7684\u4f18\u5148\u63d2\u5165\u7ebf\u6027\u57fa\n  sort(indices.begin(), indices.end(), [&amp;](int a, int b) { return cost[a] &lt; cost[b]; });\n\n  linear_basis_vector lb(m);\n  int64_t num = 0, total_cost = 0;\n  for (int i = 0; i &lt; n; ++i) {\n    if (lb.insert(indices[i], vectors)) {\n      num++;\n      total_cost += cost[indices[i]];\n    }\n  }\n  cout &lt;&lt; num &lt;&lt; \" \" &lt;&lt; total_cost &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/LinearBasis/#\u6811\u4e0a\u7ebf\u6027\u57fa","title":"\u6811\u4e0a\u7ebf\u6027\u57fa","text":"<p>\u6811\u4e0a\u7ebf\u6027\u57fa\u662f\u7ebf\u6027\u57fa\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u9002\u7528\u4e8e\u5904\u7406\u6811\u7ed3\u6784\u4e2d\u7684\u8def\u5f84\u67e5\u8be2\u95ee\u9898\uff0c\u53ef\u4ee5\u7ed3\u5408 LCA \u5c06\u8def\u5f84\u67e5\u8be2\u8f6c\u5316\u4e3a\u8282\u70b9\u7684\u5f02\u6216\u548c\u3002 \u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u7ebf\u6027\u57fa\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b69\u5b50\u8282\u70b9\u9996\u5148\u7ee7\u627f\u7236\u8282\u70b9\u7684\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u7684\u503c\u63d2\u5165\u5230\u7ebf\u6027\u57fa\u4e2d\u3002  </p> <ul> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u503c\u53ef\u4ee5\u7531\u7ebf\u6027\u57fa\u8868\u793a\uff0c\u5219\u4fdd\u7559\u6df1\u5ea6\u8f83\u5927\u7684\u503c\u4f5c\u4e3a\u7ebf\u6027\u57fa\u7684\u4e00\u90e8\u5206</li> <li>\u7136\u540e\u5c06\u6dd8\u6c70\u7684\u503c\u91cd\u65b0\u63d2\u5165\u5230\u7ebf\u6027\u57fa\u4e2d\uff08\u6839\u636e\u6df1\u5ea6\u5224\u65ad\u662f\u6267\u884c\u5f02\u6216\u8fd8\u662f\u7ee7\u7eed\u6dd8\u6c70\uff09</li> <li>\u76f4\u5230\u6dd8\u6c70\u7684\u503c\u65e0\u6cd5\u518d\u63d2\u5165\u4e3a\u6b62</li> </ul>","tags":["Math","\u7ebf\u6027\u57fa","Linear Basis"]},{"location":"code/algorithm/Math/MEX/","title":"MEX","text":"","tags":["Math","\u6700\u5c0f\u7f3a\u5931\u503c","MEX"]},{"location":"code/algorithm/Math/MEX/#mex","title":"MEX","text":"<p>\\text{MEX}\uff08\\text{Minimum Excludant}\uff09\u6307\u7684\u662f\u4e00\u4e2a\u96c6\u5408\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\\text{MEX} \u662f\u4ece 0 \u5f00\u59cb\u3001\u4e0d\u5c5e\u4e8e\u7ed9\u5b9a\u7684\u96c6\u5408\u7684\u6700\u5c0f\u6574\u6570\u3002 \\text{MEX}(S) = \\min\\{x \\geq 0 \\mid x \\notin S\\}</p> <p>\\text{MEX}\u4e0e\u535a\u5f08\u8bba</p> <p>\u5728\u535a\u5f08\u8bba\u4e2d\uff0c\\text{MEX} \u5e38\u7528\u4e8e\u8ba1\u7b97 \\text{Grundy} \u6570\uff08\u683c\u5170\u8fea\u6570\uff09\uff0c\u4ee5\u5224\u65ad\u5f53\u524d\u5c40\u52bf\u662f\u5426\u4e3a\u5fc5\u80dc\u6001</p> <p>\\text{MEX} \u7684\u4e00\u4e9b\u6027\u8d28\uff1a  </p> <ol> <li>\u6700\u5927\u53ef\u80fd\u503c: \u5bf9\u4e8e\u4e00\u4e2a\u5305\u542b n \u4e2a\u975e\u8d1f\u6574\u6570\u7684\u96c6\u5408 S\uff0c\\text{MEX}(S) \u7684\u6700\u5927\u53ef\u80fd\u503c\u662f n </li> <li>\u6700\u5c0f\u53ef\u80fd\u503c: \u5bf9\u4e8e\u4efb\u4f55\u975e\u7a7a\u96c6\u5408 S\uff0c\\text{MEX}(S) \u7684\u6700\u5c0f\u53ef\u80fd\u503c\u662f 0 </li> <li>\u5355\u8c03\u6027: \u5982\u679c\u96c6\u5408 A \u662f\u96c6\u5408 B \u7684\u5b50\u96c6\uff0c\u90a3\u4e48 \\text{MEX}(A) \u2264 \\text{MEX}(B)\u3002\u8fd9\u610f\u5473\u7740\u5411\u96c6\u5408\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\u4f1a\u5bfc\u81f4 \\text{MEX} \u503c\u7684\u589e\u52a0\uff0c\u4f46\u4e0d\u4f1a\u51cf\u5c11  </li> <li>\u5b50\u96c6\u6027\u8d28: \u5982\u679c S \u662f\u4e00\u4e2a\u5305\u542b n \u4e2a\u975e\u8d1f\u6574\u6570\u7684\u96c6\u5408\uff0c\u5e76\u4e14 \\text{MEX}(S) = m\uff0c\u90a3\u4e48\u96c6\u5408 \\{0, 1, 2, \\ldots, m-1\\} \u5fc5\u987b\u662f S \u7684\u5b50\u96c6  </li> <li>\u8865\u96c6\u6027\u8d28: \u5982\u679c S \u662f\u5168\u96c6 U = \\{0, 1, 2, \\ldots, m\\} \u7684\u5b50\u96c6\uff0c\u90a3\u4e48 \\text{MEX}(S) \u662f\u8865\u96c6 U \\setminus S \u7684\u6700\u5c0f\u5143\u7d20  </li> </ol> MEX\u7684\u8ba1\u7b97 \u6570\u7ec4\u8f85\u52a9\u8d1f\u53f7\u6807\u8bb0\u53cc\u6307\u9488 <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\u3002</p> C++<pre><code>int mex(const std::vector&lt;int&gt; &amp;nums) {\n  int n = nums.size();\n  // n\u4e2a\u6570\u7684\u6570\u7ec4\uff0cmex\u6700\u5927\u53ef\u80fd\u662fn\n  std::vector&lt;bool&gt; present(n + 1, false);\n  for (int num : nums) {  // \u6807\u8bb0\u6570\u7ec4\u4e2d\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\n    if (num &lt;= n) { present[num] = true; }\n  }\n  for (int i = 0; i &lt;= n; ++i) {  // \u627e\u5230\u7b2c\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u6570\u5b57\n    if (!present[i]) { return i; }\n  }\n  return n;  // \u5982\u679c0\u5230n-1\u90fd\u51fa\u73b0\u4e86\uff0c\u8fd4\u56den\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002</p> C++<pre><code>int mex(std::vector&lt;int&gt; &amp;nums) {\n  int n = nums.size();\n  for (int i = 0; i &lt; n; i++) {\n    if (nums[i] &lt;= 0) { nums[i] = n + 1; }  // \u5c06\u8d1f\u6570\u548c\u96f6\u66ff\u6362\u4e3an+1\n  }\n  for (int i = 0; i &lt; n; i++) {\n    // \u4f7f\u7528\u8d1f\u53f7\u6807\u8bb0\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\n    if (abs(nums[i]) &lt;= n &amp;&amp; nums[abs(nums[i]) - 1] &gt; 0) { nums[abs(nums[i]) - 1] *= -1; }\n  }\n  for (int i = 0; i &lt; n; i++) {\n    if (nums[i] &gt; 0) { return i + 1; }  // \u7b2c\u4e00\u4e2a\u6b63\u6570\u7684\u7d22\u5f15+1\u5373\u4e3amex\n  }\n  return n + 1;\n}\n</code></pre> <p>\u53cc\u6307\u9488\u65b9\u6cd5\u5229\u7528\u4e86\u6570\u7ec4\u7684\u7279\u6027\uff0c\u5c06\u6709\u6548\u6570\u5b57\u653e\u5728\u5de6\u8fb9\uff0c\u5783\u573e\u6570\u5b57\u653e\u5728\u53f3\u8fb9\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002</p> C++<pre><code>int mex(std::vector&lt;int&gt; &amp;nums) {\n  // left \u5de6\u8fb9\u7684\u533a\u57df\u5df2\u7ecf\u653e\u597d 1~left \u7684\u6570\u5b57\n  int left = 0;\n  // [right....]\u5783\u573e\u533a\n  int right = nums.size();\n  while (left &lt; right) {\n    // \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u6b63\u597d\u662f left+1\uff0c\u6269\u5c55 mex \u533a\u57df\n    if (nums[left] == left + 1) {\n      left++;\n    } else if (nums[left] &lt;= left || nums[left] &gt; right || nums[nums[left] - 1] == nums[left]) {\n      // \u5982\u679c\u5f53\u524d\u6570\u5b57\u65e0\u6548\uff08&lt;= left\u3001&gt; right\u3001\u91cd\u590d\uff09\uff0c\u4e22\u5230\u5783\u573e\u533a\n      --right;\n      swap(nums[left], nums[right]);\n    } else {\n      // \u628a\u5f53\u524d\u6570\u5b57\u653e\u5230\u5b83\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\n      swap(nums[left], nums[nums[left] - 1]);\n    }\n  }\n  return left + 1;\n}\n</code></pre> <p>\u52a8\u6001\u67e5\u8be2\\text{MEX}</p> <p>\u52a8\u6001\u66f4\u65b0\u67e5\u8be2\u533a\u95f4\\text{MEX}\u9700\u8981\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4</p> Rmq Problem / mex <p>\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 a_1,a_2,\\dots,a_n\u3002 \u6709 m \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u8981\u6c42\u4f60\u627e\u51fa\u5b50\u533a\u95f4 [l,r] \u5185\u7684 \\text{MEX}\u3002</p> Hint <p>\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u6743\u503c\u5728\u539f\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\u3002\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c [l,r]\uff0c\u5982\u679c\u67d0\u4e2a\u6743\u503c\u7684\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u5c0f\u4e8e l\uff0c\u5219\u8be5\u6743\u503c\u4e0d\u5728\u533a\u95f4 [l,r] \u5185\u51fa\u73b0\u3002\u4e8e\u662f\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u8282\u70b9\u4fdd\u5b58\u8be5\u533a\u95f4\u5185\u6240\u6709\u6743\u503c\u7684\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u3002\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u4e8c\u5206\u67e5\u627e\u5c0f\u4e8e l \u7684\u6700\u5c0f\u6743\u503c\uff0c\u5373\u4e3a \\text{MEX}\u3002</p> <p>\u7531\u4e8e n \u4e2a\u6570\u7684 \\text{MEX} \u6700\u5927\u53ef\u80fd\u4e3a n\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5927\u4e8e n \u7684\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u89c6\u4e3a\u4e0d\u5b58\u5728\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9 r\uff0c\u53ea\u9700\u8981\u5c06 a_r \u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5e76\u66f4\u65b0\u5176\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u4e3a r\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;\n  int64_t right;\n  int64_t last_pos;\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_segment_tree {\n  p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  // \u66f4\u65b0\u5f53\u524d\u533a\u95f4\u5143\u7d20\u7684\u6700\u5c0f\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\n  static void push_up(int64_t i) {\n    int64_t left_min_pos  = nodes[nodes[i].left].last_pos;\n    int64_t right_min_pos = nodes[nodes[i].right].last_pos;\n    nodes[i].last_pos     = std::min(left_min_pos, right_min_pos);\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u4fee\u6539\u8282\u70b9\u7684\u503c, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  int64_t update(int64_t index, int64_t pos, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {\n      nodes[new_node].last_pos = pos;  // \u66f4\u65b0\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (index &lt;= mid) {\n      nodes[new_node].left = update(index, pos, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(index, pos, nodes[i].right, mid + 1, r);\n    }\n    push_up(new_node);\n    return new_node;\n  }\n\n  // root_u\u4e3a\u7248\u672cu\u7684\u6839\u8282\u70b9\n  int64_t query(int64_t pos, int64_t root_u, int64_t l, int64_t r) {\n    if (l == r) { return l; }\n    int64_t mid          = l + ((r - l) / 2);\n    int64_t left_min_pos = nodes[nodes[root_u].left].last_pos;\n    // \u5982\u679c\u5de6\u4fa7\u7684\u6700\u5c0f\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u5c0f\u4e8epos, \u8bf4\u660e\u5728\u5de6\u5b50\u6811\u4e2d\u5b58\u5728\u5c0f\u4e8epos\u7684\u503c\n    if (left_min_pos &lt; pos) { return query(pos, nodes[root_u].left, l, mid); }\n    // \u5426\u5219\u5de6\u5b50\u6811\u7684\u503c\u90fd\u5728 pos \u4ee5\u540e\u51fa\u73b0\u4e86, \u53bb\u53f3\u5b50\u6811\u627e\n    return query(pos, nodes[root_u].right, mid + 1, r);\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n  p_segment_tree pst;\n  vector&lt;int64_t&gt; roots(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    if (nums[i] &lt; 0 || nums[i] &gt; n) {  // \u6570\u5b57\u8d8a\u754c, \u4e0d\u66f4\u65b0\n      roots[i] = roots[i - 1];\n      continue;\n    }\n    roots[i] = pst.update(nums[i], i, roots[i - 1], 0, n);\n  }\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    int64_t ans = pst.query(l, roots[r], 0, n);\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n</code></pre>","tags":["Math","\u6700\u5c0f\u7f3a\u5931\u503c","MEX"]},{"location":"code/algorithm/Math/M%C3%B6bius/","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","text":"","tags":["Math","\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","M\u00f6bius Function","\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","M\u00f6bius Inversion","\u65e0\u5e73\u65b9\u56e0\u5b50\u6570","Squarefree Number","\u65e0\u5e73\u65b9\u56e0\u5b50\u6838","Squarefree Kernel"]},{"location":"code/algorithm/Math/M%C3%B6bius/#\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","text":"<p>\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff08\\text{M\u00f6bius function}\uff09\u662f\u6570\u8bba\u4e2d\u4e00\u4e2a\u91cd\u8981\u7684\u7b97\u672f\u51fd\u6570\uff0c\u8bb0\u4e3a \\mu(n)\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a</p>  \\mu(n) = \\begin{cases} 1, &amp; n = 1, \\\\ (-1)^k, &amp; n = p_1 p_2 \\cdots p_k,\\ \\text{\u5176\u4e2d } p_i \\text{ \u4e92\u4e0d\u76f8\u540c}, \\\\ 0, &amp; n \\text{ \u542b\u6709\u5927\u4e8e $1$ \u7684\u5e73\u65b9\u56e0\u5b50}. \\end{cases}  <p>\u5373\uff1a</p> <ul> <li>\u5f53 n = 1 \u65f6\uff0c\\mu(n) = 1\uff1b</li> <li>\u5f53 n \u662f \u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff08\\text{squarefree number}\uff09\uff0c\u4e14\u6709 k \u4e2a\u4e0d\u540c\u8d28\u56e0\u5b50\u65f6\uff0c\\mu(n) = (-1)^k\uff1b</li> <li>\u5f53 n \u542b\u6709\u5927\u4e8e 1 \u7684\u5e73\u65b9\u56e0\u5b50\u65f6\uff08\u5373 n \u80fd\u88ab\u5927\u4e8e 1 \u7684\u5e73\u65b9\u6570\u6574\u9664\uff09\uff0c\\mu(n) = 0\u3002</li> </ul> <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6570</p> <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff08\\text{Squarefree Number}\uff09\u662f\u6307\u4e0d\u80fd\u88ab\u4efb\u4f55\u5927\u4e8e 1 \u7684\u5e73\u65b9\u6570\u6574\u9664\u7684\u6b63\u6574\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u7684\u8d28\u56e0\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\u90fd\u662f 1\u3002</p> <p>Example</p> <p>6 \u662f\u4e00\u4e2a\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u56e0\u4e3a\u5b83\u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a 2^1 \\cdot 3^1\u3002</p> <p>12 \u4e0d\u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u56e0\u4e3a\u5b83\u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a 2^2 \\cdot 3^1\uff0c\u5176\u4e2d 2 \u7684\u6307\u6570\u5927\u4e8e 1\u3002</p> <p>\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u6574\u6570 n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a\uff1a</p> n = p_1^{e_1} \\cdot p_2^{e_2} \\cdots p_k^{e_k} <p>\u5176\u4e2d p_i \u662f\u8d28\u6570\uff0ce_i \u662f\u5bf9\u5e94\u7684\u6307\u6570\uff0c\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u7684 e_i = 1 \u65f6\uff0cn \u662f\u4e00\u4e2a\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u3002</p> <p>\u4f7f\u7528\u6570\u5b66\u7b26\u53f7\u8868\u793a\u4e3a\uff1a\\mu (n)^{2} = 1\uff0c\u5176\u4e2d \\mu \u662f\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u3002</p> <p>\u7531\u4e8e\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u7684\u6240\u6709\u7d20\u56e0\u6570\u6307\u6570\u5747\u4e3a\u4e00\u6b21\u65b9\uff0c\u6545\u9664 1 \u4ee5\u5916\uff0c\u6709\u5173\u6570\u7684\u6b63\u7ea6\u6570\u6570\u76ee\u5fc5\u5b9a\u662f 2 \u7684\u975e\u8d1f\u6574\u6570\u6b21\u65b9\u3002</p> <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u7684\u6b63\u7ea6\u6570\u6570\u76ee</p> <p>\u8bbe n \u662f\u4e00\u4e2a\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u4e14\u5176\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a n = p_1^{1} \\cdot p_2^{1} \\cdots p_k^{1}\uff0c\u5219 n \u7684\u6b63\u7ea6\u6570\u6570\u76ee\u4e3a\uff1a</p>  d(n) = \\prod_{i=1}^{k} (\\alpha_i + 1) = 2^k  <p>\u5176\u4e2d k \u662f n \u7684\u4e0d\u540c\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\u3002</p>","tags":["Math","\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","M\u00f6bius Function","\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","M\u00f6bius Inversion","\u65e0\u5e73\u65b9\u56e0\u5b50\u6570","Squarefree Number","\u65e0\u5e73\u65b9\u56e0\u5b50\u6838","Squarefree Kernel"]},{"location":"code/algorithm/Math/M%C3%B6bius/#\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u6027\u8d28","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u6027\u8d28","text":"<ol> <li> <p>\u4e58\u79ef\u6027\u8d28</p> <p>\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 m \u548c n\uff0c\u5982\u679c \\gcd(m, n) = 1\uff0c\u5219\u6709\uff1a</p>  \\mu(mn) = \\mu(m) \\cdot \\mu(n)  <p>\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u3002\u4f46\u662f\uff0c\u5f53 m \u548c n \u4e0d\u4e92\u8d28\u65f6\uff0c\u4e58\u79ef\u6027\u8d28\u4e0d\u6210\u7acb\uff0c\u8bf4\u660e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u662f\u975e\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u3002</p> \u8bc1\u660e <p>\u8bbe m \u548c n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u5206\u522b\u4e3a\uff1a</p>  m = p_1^{e_1} p_2^{e_2} \\cdots p_k^{e_k}   n = q_1^{f_1} q_2^{f_2} \\cdots q_l^{f_l}  <p>\u7531\u4e8e \\gcd(m, n) = 1\uff0c\u6240\u4ee5 m \u548c n \u6ca1\u6709\u5171\u540c\u7684\u8d28\u56e0\u5b50\u3002\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u5206\u6790\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u5982\u679c m \u6216 n \u542b\u6709\u5e73\u65b9\u56e0\u5b50\uff0c\u5219 \\mu(m) = 0 \u6216 \\mu(n) = 0\uff0c\u56e0\u6b64 \\mu(mn) = 0\uff0c\u4e58\u79ef\u6027\u8d28\u6210\u7acb\u3002</p> </li> <li> <p>\u5982\u679c m \u548c n \u90fd\u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u4e14\u5206\u522b\u6709 k \u548c l \u4e2a\u4e0d\u540c\u8d28\u56e0\u5b50\uff0c\u5219 mn \u4e5f\u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u4e14\u6709 k + l \u4e2a\u4e0d\u540c\u8d28\u56e0\u5b50\u3002\u56e0\u6b64\uff1a</p> </li> </ul>  \\mu(m) = (-1)^k, \\quad \\mu(n) = (-1)^l, \\quad \\mu(mn) = (-1)^{k+l}  <p>\u56e0\u6b64\uff0c\u6709\uff1a</p>  \\mu(mn) = (-1)^{k+l} = (-1)^k \\cdot (-1)^l = \\mu(m) \\cdot \\mu(n)  </li> <li> <p>\u7d2f\u52a0\u6027\u8d28</p> <p>\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 n\uff0c\u6709\uff1a</p>  \\sum_{d|n} \\mu(d) = \\begin{cases} 1, &amp; n = 1, \\\\ 0, &amp; n &gt; 1. \\end{cases}  <p>\u5176\u4e2d\uff0c\u6c42\u548c\u662f\u5bf9\u6240\u6709\u6b63\u7ea6\u6570 d \u8fdb\u884c\u7684\u3002</p> \u8bc1\u660e <p>\u8bbe n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a n = p_1^{e_1} p_2^{e_2} \\cdots p_k^{e_k}\u3002\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ea\u6709\u5f53 d \u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u65f6\uff0c\\mu(d) \u624d\u4e0d\u4e3a\u96f6\u3002</p> <p>\u56e0\u6b64\uff0c\u53ea\u9700\u8003\u8651 d \u7684\u5f62\u5f0f\u4e3a d = p_1^{f_1} p_2^{f_2} \\cdots p_k^{f_k}\uff0c\u5176\u4e2d\u6bcf\u4e2a f_i \u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1\u3002\u8fd9\u6837\uff0cd \u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\u5bf9\u5e94\u4e8e n \u7684\u6240\u6709\u5b50\u96c6\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u96c6\uff0c\u5176\u5bf9\u5e94\u7684 \\mu(d) \u503c\u4e3a (-1)^{\\text{\u5b50\u96c6\u5927\u5c0f}}\u3002\u56e0\u6b64\u6709\uff1a</p>  \\sum_{d|n} \\mu(d) = \\sum_{j=0}^{k} \\binom{k}{j} (-1)^j  <p>\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u8fd9\u4e2a\u548c\u7b49\u4e8e (1 - 1)^k = 0^k\u3002\u5f53 k &gt; 0 \u65f6\uff0c\u7ed3\u679c\u4e3a 0\uff1b\u5f53 k = 0\uff08\u5373 n = 1\uff09\u65f6\uff0c\u7ed3\u679c\u4e3a 1\u3002</p> </li> <li> <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6838</p> <p>\u5b9a\u4e49 \\mathrm{rad}(n) = \\prod_{p|n} p\uff0c\u5373 n \u7684\u4e0d\u540c\u8d28\u56e0\u5b50\u4e4b\u79ef\u3002</p>  \\mu(n) \\ne 0 \\iff n = \\mathrm{rad}(n)  \u65e0\u5e73\u65b9\u56e0\u5b50\u6838 <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6838\uff08\\text{Squarefree Kernel}\uff0c\\text{radical}\uff09\uff0c\u4e5f\u79f0\u4e3a\u65e0\u5e73\u65b9\u56e0\u5b50\u90e8\u5206\uff0c\u662f\u6307\u4e00\u4e2a\u6b63\u6574\u6570\u4e2d\u6240\u6709\u4e0d\u540c\u8d28\u56e0\u5b50\u7684\u4e58\u79ef\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u5e73\u65b9\u56e0\u5b50\u6838\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a\u6570\u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e2d\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\u90fd\u53d6\u4e3a 1 \u6765\u5f97\u5230\u7684\u3002</p> <p>\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u6574\u6570 n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a\uff1a</p>  n = p_1^{e_1} \\cdot p_2^{e_2} \\cdots p_k^{e_k}  <p>\u5176\u4e2d p_i \u662f\u8d28\u6570\uff0ce_i \u662f\u5bf9\u5e94\u7684\u6307\u6570\uff0c\u90a3\u4e48\u65e0\u5e73\u65b9\u56e0\u5b50\u6838\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p>  \\text{rad}(n) = p_1^{1} \\cdot p_2^{1} \\cdots p_k^{1}  <p>Example</p> <p>\u8003\u8651\u6b63\u6574\u6570 60\u3002\u5b83\u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a\uff1a</p>  60 = 2^2 \\cdot 3^1 \\cdot 5^1  <p>\u56e0\u6b64\uff0c60 \u7684\u65e0\u5e73\u65b9\u56e0\u5b50\u6838\u4e3a\uff1a</p>  \\text{rad}(60) = 2^1 \\cdot 3^1 \\cdot 5^1 = 30  \u8ba1\u7b97\u65e0\u5e73\u65b9\u56e0\u5b50\u6838 \u5355\u4e2a\u6570\u7684\u65e0\u5e73\u65b9\u56e0\u5b50\u6838\u8ba1\u7b97\u7ebf\u6027\u7b5b\u6cd5\u9884\u5904\u7406\u65e0\u5e73\u65b9\u56e0\u5b50\u6838 C++<pre><code>int64_t rad(int64_t n) {\n  int64_t res = 1;\n  for (int64_t i = 2; i * i &lt;= n; ++i) {\n    if (n % i == 0) {\n      res *= i;\n      while (n % i == 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n &gt; 1) { res *= n; }  // n \u662f\u8d28\u6570\n  return res;\n}\n</code></pre> C++<pre><code>auto rad_sieve(int64_t n) {\n  static vector&lt;int&gt; core(n + 1);\n  for (int i = 1; i &lt;= n; ++i) {\n    if (core[i] == 0) {  // i \u4e0d\u542b\u5b8c\u5168\u5e73\u65b9\u56e0\u5b50\uff0c\u53ef\u4ee5\u4f5c\u4e3a core \u503c\n      for (int j = 1; i * j * j &lt;= n; ++j) { core[i * j * j] = i; }\n    }\n  }\n  return [&amp;](int64_t x) { return core[x]; };\n}\n</code></pre> \u5b8c\u5168\u5b50\u96c6\u7684\u6700\u5927\u5143\u7d20\u548c <p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u3001\u7531 n \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\u3002\u4f60\u9700\u8981\u4ece nums \u9009\u62e9\u4e00\u4e2a \u5b8c\u5168\u96c6\uff0c\u5176\u4e2d\u6bcf\u5bf9\u5143\u7d20\u4e0b\u6807\u7684\u4e58\u79ef\u90fd\u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u4f8b\u5982\u9009\u62e9 a_i \u548c a_j \uff0ci * j \u4e00\u5b9a\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002</p> <p>\u8fd4\u56de\u5b8c\u5168\u5b50\u96c6\u6240\u80fd\u53d6\u5230\u7684 \u6700\u5927\u5143\u7d20\u548c \u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto rad_sieve = [](int64_t n) {\n  static vector&lt;int&gt; core(n + 1);\n  for (int i = 1; i &lt;= n; ++i) {\n    if (core[i] == 0) {  // i \u4e0d\u542b\u5b8c\u5168\u5e73\u65b9\u56e0\u5b50\uff0c\u53ef\u4ee5\u4f5c\u4e3a core \u503c\n      for (int j = 1; i * j * j &lt;= n; ++j) { core[i * j * j] = i; }\n    }\n  }\n  return [&amp;](int64_t x) { return core[x]; };\n}(10'000);\n\nclass Solution {\n  int64_t rad(int64_t n) {\n    for (int64_t i = 2; i * i &lt;= n; i++) {\n      while (n % (i * i) == 0) { n /= i * i; }\n    }\n    return n;\n  }\n\n public:\n  long long maximumSum(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    {  // \u679a\u4e3e\u6bcf\u4e2a\u6570\u7684 rad \u503c\uff0c\u7136\u540e\u7edf\u8ba1\u5404\u4e2a rad \u503c\u5bf9\u5e94\u7684\u548c\uff0c\u6700\u540e\u53d6\u6700\u5927\u503c\n      vector&lt;int64_t&gt; sum(n + 1);\n      for (int i = 0; i &lt; n; i++) { sum[rad(i + 1)] += nums[i]; }\n      return ranges::max(sum);\n    }\n    {  // \u4f7f\u7528\u9884\u5904\u7406\u7684 rad_sieve \u6765\u52a0\u901f\u8ba1\u7b97\n      int64_t ans = 0;\n      vector&lt;int64_t&gt; sum(n + 1, 0);\n      for (int i = 1; i &lt;= n; ++i) {\n        sum[rad_sieve(i)] += nums[i - 1];\n        ans                = max(ans, sum[rad_sieve(i)]);\n      }\n      return ans;\n    }\n  }\n};\n</code></pre> </li> <li> <p>\u4e0e\u6b27\u62c9\u51fd\u6570\u7684\u5173\u7cfb</p> <p>\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0e\u6b27\u62c9\u51fd\u6570 \\varphi(n) \u4e4b\u95f4\u5b58\u5728\u4ee5\u4e0b\u5173\u7cfb\uff1a</p>  \\varphi(n) = n \\sum_{d|n} \\frac{\\mu(d)}{d}  \u8bc1\u660e <p>\u8bbe n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a n = p_1^{e_1} p_2^{e_2} \\cdots p_k^{e_k}\u3002\u6839\u636e\u6b27\u62c9\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u6709\uff1a</p>  \\varphi(n) = n \\prod_{i=1}^{k} \\left(1 - \\frac{1}{p_i}\\right)  <p>\u53ef\u4ee5\u5c06\u53f3\u4fa7\u5c55\u5f00\u4e3a\uff1a</p>  \\varphi(n) = n \\left(1 - \\sum_{i=1}^{k} \\frac{1}{p_i} + \\sum_{1 \\leq i &lt; j \\leq k} \\frac{1}{p_i p_j} - \\cdots + (-1)^k \\frac{1}{p_1 p_2 \\cdots p_k}\\right)  <p>\u6ce8\u610f\u5230\u6bcf\u4e00\u9879\u90fd\u5bf9\u5e94\u4e8e\u67d0\u4e2a\u65e0\u5e73\u65b9\u56e0\u5b50\u6570 d\uff0c\u4e14 \\mu(d) \u7684\u503c\u6b63\u597d\u662f\u8be5\u9879\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u8868\u8fbe\u5f0f\u91cd\u65b0\u5199\u4e3a\uff1a</p>  \\varphi(n) = n \\sum_{d|n} \\frac{\\mu(d)}{d}  </li> <li> <p>\u5e73\u65b9\u548c\u6027\u8d28</p> <p>\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 n\uff0c\u6709\uff1a</p>  \\sum_{d^2|n} \\mu(d) = \\begin{cases} 1, &amp; n \\text{ \u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570}, \\\\ 0, &amp; \\text{\u5426\u5219}. \\end{cases}  \u8bc1\u660e <p>\u8bbe n \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a n = p_1^{e_1} p_2^{e_2} \\cdots p_k^{e_k}\u3002\u8003\u8651\u6240\u6709\u6ee1\u8db3 d^2 | n \u7684\u6b63\u6574\u6570 d\u3002</p> <p>\u7531\u4e8e d^2 | n\uff0c\u6240\u4ee5 d \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e2d\u7684\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\u5fc5\u987b\u4e0d\u8d85\u8fc7\u5bf9\u5e94\u8d28\u56e0\u5b50\u5728 n \u4e2d\u6307\u6570\u7684\u4e00\u534a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8bbe d \u7684\u8d28\u56e0\u5b50\u5206\u89e3\u4e3a d = p_1^{f_1} p_2^{f_2} \\cdots p_k^{f_k}\uff0c\u5219\u6709 2f_i \\leq e_i \u5bf9\u6240\u6709 i \u6210\u7acb\u3002</p> <p>\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ea\u6709\u5f53\u6bcf\u4e2a f_i \u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1 \u65f6\uff0c\\mu(d) \u624d\u4e0d\u4e3a\u96f6\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8003\u8651\u90a3\u4e9b\u6ee1\u8db3 f_i \\in \\{0, 1\\} \u4e14 2f_i \\leq e_i \u7684\u60c5\u51b5\u3002</p> <ul> <li>\u5982\u679c n \u662f\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\uff0c\u5219\u6240\u6709\u7684 e_i = 1\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u5f53\u6240\u6709\u7684 f_i = 0 \u65f6\uff0c\u624d\u80fd\u6ee1\u8db3 2f_i \\leq e_i\u3002\u8fd9\u65f6\uff0c\u552f\u4e00\u7684\u7b26\u5408\u6761\u4ef6\u7684 d \u662f 1\uff0c\u4e14 \\mu(1) = 1\u3002\u56e0\u6b64\uff0c\u6709\uff1a</li> </ul>  \\sum_{d^2|n} \\mu(d) = \\mu(1) = 1  <ul> <li>\u5982\u679c n \u542b\u6709\u5e73\u65b9\u56e0\u5b50\uff0c\u5219\u5b58\u5728\u67d0\u4e2a\u8d28\u56e0\u5b50 p_j \u4f7f\u5f97 e_j \\geq 2\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65e2\u53ef\u4ee5\u9009\u62e9 f_j = 0\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 f_j = 1\uff0c\u4ece\u800c\u4ea7\u751f\u591a\u4e2a\u7b26\u5408\u6761\u4ef6\u7684 d\u3002\u8fd9\u4e9b\u4e0d\u540c\u7684\u9009\u62e9\u4f1a\u5bfc\u81f4 \\mu(d) \u7684\u7b26\u53f7\u76f8\u4e92\u62b5\u6d88\uff0c\u4ece\u800c\u4f7f\u5f97\u603b\u548c\u4e3a\u96f6\u3002\u56e0\u6b64\uff0c\u6709\uff1a</li> </ul>  \\sum_{d^2|n} \\mu(d) = 0  </li> </ol>","tags":["Math","\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","M\u00f6bius Function","\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","M\u00f6bius Inversion","\u65e0\u5e73\u65b9\u56e0\u5b50\u6570","Squarefree Number","\u65e0\u5e73\u65b9\u56e0\u5b50\u6838","Squarefree Kernel"]},{"location":"code/algorithm/Math/M%C3%B6bius/#\u8ba1\u7b97\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","title":"\u8ba1\u7b97\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","text":"<p>\u53ef\u4ee5\u5728 O(\\sqrt{n}) \u65f6\u95f4\u5185\u8ba1\u7b97\u5355\u4e2a\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\uff0c\u6216\u8005\u4f7f\u7528\u7ebf\u6027\u7b5b\u6cd5\u5728 O(n) \u65f6\u95f4\u5185\u9884\u5904\u7406 1 \u5230 n \u8303\u56f4\u5185\u6240\u6709\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u3002</p> \u5355\u4e2a\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u8ba1\u7b97 C++<pre><code>int64_t mu(int64_t n) {\n  if (n == 1) { return 1; }\n  int64_t res = 1;\n  for (int64_t i = 2; i * i &lt;= n; ++i) {\n    if (n % i == 0) {\n      n /= i;\n      if (n % i == 0) { return 0; }  // \u542b\u6709\u5e73\u65b9\u56e0\u5b50\n      res = -res;\n    }\n  }\n  if (n &gt; 1) { res = -res; }  // n \u662f\u8d28\u6570\n  return res;\n}\n</code></pre> \u7ebf\u6027\u7b5b\u6cd5\u9884\u5904\u7406\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 C++<pre><code>auto mu_sieve(int64_t n) {\n  static vector&lt;int64_t&gt; mu(n + 1);\n  vector&lt;int64_t&gt; primes;\n  vector&lt;bool&gt; not_prime(n + 1);\n  primes.reserve(n);\n  mu[1] = 1;  // \u5b9a\u4e49 \u03bc(1) = 1\n  for (int64_t x = 2; x &lt;= n; ++x) {\n    if (!not_prime[x]) {\n      primes.push_back(x);\n      mu[x] = -1;  // \u8d28\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a -1\n    }\n    for (int64_t p : primes) {\n      if (x * p &gt; n) { break; }\n      not_prime[x * p] = true;\n      if (x % p == 0) {  // p \u662f x \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50, \u5219 p^2 \u4e5f\u662f x * p \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\n        mu[x * p] = 0;  // \u542b\u6709\u5e73\u65b9\u56e0\u5b50\u7684\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a 0\n        break;\n      }\n      mu[x * p] = -mu[x];  // \u4e92\u8d28\u6570\u7684\u4e58\u79ef\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a\u4e24\u4e2a\u6570\u503c\u7684\u4e58\u79ef\n    }\n  }\n  return [&amp;](int64_t x) { return mu[x]; };\n}\n</code></pre>","tags":["Math","\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","M\u00f6bius Function","\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","M\u00f6bius Inversion","\u65e0\u5e73\u65b9\u56e0\u5b50\u6570","Squarefree Number","\u65e0\u5e73\u65b9\u56e0\u5b50\u6838","Squarefree Kernel"]},{"location":"code/algorithm/Math/M%C3%B6bius/#\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u516c\u5f0f","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u516c\u5f0f","text":"<p>\u5982\u679c f(n) \u548c g(n) \u662f\u5b9a\u4e49\u5728\u6b63\u6574\u6570\u4e0a\u7684\u4e24\u4e2a\u7b97\u672f\u51fd\u6570\uff0c\u4e14\u6ee1\u8db3\uff1a</p>  g(n) = \\sum_{d|n} f(d)  <p>\u5219\u6709\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u516c\u5f0f\uff1a</p>  f(n) = \\sum_{d|n} \\mu(d) \\cdot g\\left(\\frac{n}{d}\\right)  \u8bc1\u660e <p>\u6839\u636e\u5b9a\u4e49\uff0c\u6709\uff1a</p>  g(n) = \\sum_{d|n} f(d)  <p>\u5c06 g\\left(\\frac{n}{d}\\right) \u5c55\u5f00\uff1a</p>  g\\left(\\frac{n}{d}\\right) = \\sum_{k|\\frac{n}{d}} f(k)  <p>\u56e0\u6b64\uff0c\u6709\uff1a</p>  \\sum_{d|n} \\mu(d) \\cdot g\\left(\\frac{n}{d}\\right) = \\sum_{d|n} \\mu(d) \\sum_{k|\\frac{n}{d}} f(k)  <p>\u4ea4\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u5f97\u5230\uff1a</p>  \\sum_{d|n} \\mu(d) \\cdot g\\left(\\frac{n}{d}\\right) = \\sum_{m|n} f(m) \\sum_{d|\\frac{n}{m}} \\mu(d)  <p>\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u7d2f\u52a0\u6027\u8d28\uff0c\\sum_{d|\\frac{n}{m}} \\mu(d) \u7b49\u4e8e 1 \u5f53\u4e14\u4ec5\u5f53 \\frac{n}{m} = 1\uff0c\u5426\u5219\u4e3a 0\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u5f53 m = n \u65f6\uff0c\u5185\u5c42\u6c42\u548c\u624d\u4e0d\u4e3a\u96f6\u3002</p> <p>\u6700\u7ec8\u5f97\u5230\uff1a</p>  \\sum_{d|n} \\mu(d) \\cdot g\\left(\\frac{n}{d}\\right) = f(n)  \u65e0\u5e73\u65b9\u56e0\u5b50\u7684\u6570 <p>\u7ed9\u5b9a\u533a\u95f4 [n, m]\uff0c\u8ba1\u6570\u533a\u95f4\u5185\u7684\u65e0\u5e73\u65b9\u56e0\u5b50\u6570\u7684\u4e2a\u6570\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto mu_sieve(int64_t n) {\n  static vector&lt;int64_t&gt; mu(n + 1);\n  vector&lt;int64_t&gt; primes;\n  vector&lt;bool&gt; not_prime(n + 1);\n  primes.reserve(n);\n  mu[1] = 1;  // \u5b9a\u4e49 \u03bc(1) = 1\n  for (int64_t x = 2; x &lt;= n; ++x) {\n    if (!not_prime[x]) {\n      primes.push_back(x);\n      mu[x] = -1;  // \u8d28\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a -1\n    }\n    for (int64_t p : primes) {\n      if (x * p &gt; n) { break; }\n      not_prime[x * p] = true;\n      if (x % p == 0) {  // p \u662f x \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50, \u5219 p^2 \u4e5f\u662f x * p \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\n        mu[x * p] = 0;   // \u542b\u6709\u5e73\u65b9\u56e0\u5b50\u7684\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a 0\n        break;\n      }\n      mu[x * p] = -mu[x];  // \u4e92\u8d28\u6570\u7684\u4e58\u79ef\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a\u4e24\u4e2a\u6570\u503c\u7684\u4e58\u79ef\n    }\n  }\n  return [&amp;](int64_t x) { return mu[x]; };\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  auto mu    = mu_sieve(max(n, m));\n\n  auto count = [&amp;](int64_t x) {\n    int64_t res = 0;\n    for (int64_t d = 1; d &lt;= x / d; ++d) { res += mu(d) * (x / (d * d)); }\n    return res;\n  };\n  cout &lt;&lt; count(m) - count(n - 1) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570","M\u00f6bius Function","\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14","M\u00f6bius Inversion","\u65e0\u5e73\u65b9\u56e0\u5b50\u6570","Squarefree Number","\u65e0\u5e73\u65b9\u56e0\u5b50\u6838","Squarefree Kernel"]},{"location":"code/algorithm/Math/PerfectShuffle/","title":"\u5b8c\u7f8e\u6d17\u724c","text":"","tags":["Math","\u6d17\u724c","Perfect Shuffle"]},{"location":"code/algorithm/Math/PerfectShuffle/#\u5b8c\u7f8e\u6d17\u724c","title":"\u5b8c\u7f8e\u6d17\u724c","text":"<p>\u5b8c\u7f8e\u6d17\u724c\uff08\\text{Perfect Shuffle}\uff09\u662f\u6307\u5c06\u4e00\u526f\u724c\u5747\u5300\u5730\u5206\u6210\u4e24\u534a\uff0c\u7136\u540e\u5c06\u4e24\u534a\u724c\u4ea4\u66ff\u5408\u5e76\u5728\u4e00\u8d77\u3002 \u5b8c\u7f8e\u6d17\u724c\u5206\u4e3a\u4e24\u79cd\uff1a\u5185\u6d17\u724c \u548c \u5916\u6d17\u724c\u3002  </p> <ul> <li>\u5185\u6d17\u724c\uff08\\text{out-shuffle}\uff09\uff1a\u5c06\u4e0b\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u5f20\u724c\u653e\u5728\u6700\u4e0a\u9762\uff0c\u7136\u540e\u4ea4\u66ff\u653e\u7f6e\u4e0a\u534a\u90e8\u5206\u548c\u4e0b\u534a\u90e8\u5206\u7684\u724c  </li> <li>\u5916\u6d17\u724c\uff08\\text{in-shuffle}\uff09\uff1a\u5c06\u4e0a\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u5f20\u724c\u653e\u5728\u6700\u4e0a\u9762\uff0c\u7136\u540e\u4ea4\u66ff\u653e\u7f6e\u4e0b\u534a\u90e8\u5206\u548c\u4e0a\u534a\u90e8\u5206\u7684\u724c  </li> </ul> <p>\u5047\u8bbe\u6709 2n \u5f20\u724c\uff0c\u7f16\u53f7\u4e3a 0, 1, 2, \\ldots, n-1, \\vert n, n+1, n+2, \\ldots, 2n-1\uff0c\u5219\u5b8c\u7f8e\u6d17\u724c\u540e\u7684\u724c\u7684\u7f16\u53f7\u4e3a\uff1a  </p> <p>\u5185\u6d17\u724c\u540e\u7684\u724c\u7684\u7f16\u53f7\u4e3a\uff1a \\begin{aligned} &amp;n, 0, n+1, 1, n+2, 2, \\ldots, 2n-1, n-1 \\end{aligned}</p> <p>\u5916\u6d17\u724c\u540e\u7684\u724c\u7684\u7f16\u53f7\u4e3a\uff1a \\begin{aligned} &amp;0, n, 1, n+1, 2, n+2, \\ldots, n-1, 2n-1 \\end{aligned}</p> \u5b8c\u7f8e\u6d17\u724c\uff08\u5185\u6d17\uff09 \u8f85\u52a9\u6570\u7ec4\u7f6e\u6362\u73af C++<pre><code>void in_shuffle(vector&lt;int&gt; &amp;arr) {\n  int n = arr.size();\n  if (n % 2 != 0) { return; }\n  vector&lt;int&gt; temp(arr);\n  for (int i = 0; i &lt; n / 2; ++i) {\n    arr[2 * i]     = temp[n / 2 + i];\n    arr[2 * i + 1] = temp[i];\n  }\n}\n</code></pre> C++<pre><code>void perfect_in_shuffle(vector&lt;int&gt; &amp;arr) {\n  int n = arr.size();\n  if (n % 2 != 0) { return; }  // \u4ec5\u5904\u7406\u5076\u6570\u957f\u5ea6\u7684\u6570\u7ec4\n  // \u957f\u5ea6\u4e3a 3^k-1 \u7684\u6570\u7ec4\u7684\u5b50\u73af\u8d77\u70b9\u4e3a3^(k-1)\n  // start \u8bb0\u5f55\u6bcf\u4e2a\u5b50\u73af\u7684\u8d77\u70b9, split \u8bb0\u5f55\u6bcf\u4e2a\u5b50\u73af\u7684\u957f\u5ea6\n  // \u4efb\u610f\u5076\u6570\u957f\u5ea6\u7684\u6570\u7ec4\u90fd\u53ef\u4ee5\u62c6\u5206\u4e3a\u82e5\u5e72\u4e2a 3^k-1 \u7684\u5b50\u6570\u7ec4\n  vector&lt;int&gt; start, split;\n  for (int s = 1, p = 2; p &lt;= n; s *= 3, p = s * 3 - 1) {\n    start.push_back(s);\n    split.push_back(p);\n  }\n  // \u539f\u5730\u9006\u8f6c\n  auto reverse = [&amp;](int left, int right) {\n    while (left &lt; right) { swap(arr[left++], arr[right--]); }\n  };\n  // \u4e09\u6b21\u9006\u8f6c\u5b9e\u73b0\u533a\u95f4\u65cb\u8f6c\n  auto rotate = [&amp;](int left, int mid, int right) {\n    reverse(left, mid);\n    reverse(mid + 1, right);\n    reverse(left, right);\n  };\n  auto to\n      = [&amp;](int i, int l, int r) { return i &lt;= (l + r) / 2 ? i + (i - l + 1) : i - (r - i + 1); };\n  // \u5904\u7406\u5b50\u73af\n  auto circle = [&amp;](int l, int r, int i) {\n    for (int j = 0; j &lt;= i; ++j) {           // \u679a\u4e3e\u6240\u6709\u8d77\u70b9\n      int init          = l + start[j] - 1;  // \u5f53\u524d\u5b50\u73af\u8d77\u70b9\n      int current       = init;\n      int next          = to(current, l, r);\n      int current_value = arr[current];\n      while (next != init) {  // \u5904\u7406\u5faa\u73af\u94fe\n        // \u5c06current\u4f4d\u7f6e\u7684\u503c\u653e\u5230next\u4f4d\u7f6e, \u7136\u540e\u8bb0\u5f55\u539f\u5148next\u4f4d\u7f6e\u7684\u503c\n        swap(arr[next], current_value);\n        current = next;               // \u66f4\u65b0current\u4f4d\u7f6e\n        next    = to(current, l, r);  // \u8ba1\u7b97next\u4f4d\u7f6e\n      }\n      arr[init] = current_value;  // \u5c06\u6700\u540e\u4e00\u4e2a\u503c\u653e\u56de\u8d77\u70b9\n    }\n  };\n\n  for (int i = start.size() - 1, l = 0, r = n - 1; n &gt; 0;) {\n    if (split[i] &lt;= n) {\n      int mid = (l + r) / 2;  // \u4e2d\u70b9\n      // \u65cb\u8f6c\u533a\u95f4 [l + split[i]/2, mid] \u548c [mid + 1, mid + split[i]/2]\n      // \u4f7f\u5f97\u533a\u95f4 [l, l + split[i] - 1] \u5185\u7684\u5143\u7d20\u6ee1\u8db3\u6d17\u724c\u8981\u6c42\n      rotate(l + split[i] / 2, mid, mid + split[i] / 2);\n      // \u5904\u7406\u5b50\u73af\n      circle(l, l + split[i] - 1, i);\n      l += split[i];  // \u66f4\u65b0\u5de6\u8fb9\u754c\n      n -= split[i];  // \u66f4\u65b0\u5269\u4f59\u957f\u5ea6\n    } else {\n      i--;\n    }\n  }\n}\n</code></pre>","tags":["Math","\u6d17\u724c","Perfect Shuffle"]},{"location":"code/algorithm/Math/Permutation/","title":"\u6392\u5217\u4e0e\u5eb7\u6258\u5c55\u5f00","text":"","tags":["Math","\u6392\u5217","permutation","\u5eb7\u6258\u5c55\u5f00","Cantor Expansion"]},{"location":"code/algorithm/Math/Permutation/#\u6392\u5217","title":"\u6392\u5217","text":"<p>\u6392\u5217\uff08\\text{Permutation}\uff09\u662f\u6307\u4ece\u4e00\u7ec4\u5143\u7d20\u4e2d\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u9009\u53d6\u5168\u90e8\u6216\u90e8\u5206\u5143\u7d20\u6240\u5f62\u6210\u7684\u6709\u5e8f\u5e8f\u5217\u3002\u6392\u5217\u5f3a\u8c03\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u987a\u5e8f\u88ab\u89c6\u4e3a\u4e0d\u540c\u7684\u6392\u5217\u3002  </p>","tags":["Math","\u6392\u5217","permutation","\u5eb7\u6258\u5c55\u5f00","Cantor Expansion"]},{"location":"code/algorithm/Math/Permutation/#\u4e0a\u4e00\u4e2a\u6392\u5217\u4e0e\u4e0b\u4e00\u4e2a\u6392\u5217","title":"\u4e0a\u4e00\u4e2a\u6392\u5217\u4e0e\u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u6c42\u89e3\u4e00\u7ec4\u957f\u5ea6\u4e3a n \u7684\u6570\u7684\u4e0a\u4e00\u4e2a\u6392\u5217:  </p> <ol> <li>\u627e\u5230\u6700\u5927\u4e0b\u6807 i\uff0c\u6ee1\u8db3 s[i] &lt; s[i - 1] (1 \\le i &lt; n) </li> <li>\u627e\u5230\u6700\u5927\u4e0b\u6807 j\uff0c\u6ee1\u8db3 \\forall k \\in [i, j]: s[k] &lt; s[i - 1] (1 \\le j &lt; n) </li> <li>\u4ea4\u6362\u4e0b\u6807\u4e3a i-1 \u548c j \u5904\u7684\u4e24\u4e2a\u5b57\u7b26  </li> <li>\u5c06\u4e0b\u6807 i \u5f00\u59cb\u7684\u540e\u7f00\u53cd\u8f6c  </li> </ol> \u4e0a\u4e00\u4e2a\u6392\u5217 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int64_t&gt; prev_permutation(vector&lt;int64_t&gt; nums) {\n  int n = nums.size();\n  int i = n - 1;\n  for (; i &gt;= 1; --i) {\n    if (nums[i] &lt; nums[i - 1]) { break; }\n  }\n  // \u5df2\u7ecf\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff0c\u6ca1\u6709\u66f4\u5c0f\u7684\u6392\u5217, \u8fd4\u56de\u5b57\u5178\u5e8f\u6700\u5927\u7684\u6392\u5217\n  if (i == 0) {\n    reverse(next(nums.begin(), i), nums.end());\n    return nums;\n  }\n  int j = i;\n  for (; j &lt; n; ++j) { // \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6bd4 nums[i-1] \u5c0f\u7684\u6570\n    if (nums[j] &lt; nums[i - 1]) { continue; }\n    break;\n  }\n  j -= 1; // j \u56de\u9000\u5230\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4f4d\u7f6e\n  swap(nums[i - 1], nums[j]);\n  reverse(next(nums.begin(), i), nums.end());\n  return nums;\n}\n</code></pre> <p>\u5c06\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u7684\u6bd4\u8f83\u5f0f\u5b50\u4e0d\u7b49\u53f7\u53cd\u8f6c\u5c31\u80fd\u5f97\u5230\u4e0b\u4e00\u4e2a\u6392\u5217:</p> \u4e0b\u4e00\u4e2a\u6392\u5217 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int64_t&gt; next_permutation(vector&lt;int64_t&gt; nums) {\n  int n = nums.size();\n  int i = n - 1;\n  for (; i &gt;= 1; --i) {\n    if (nums[i] &gt; nums[i - 1]) { break; }\n  }\n  // \u5df2\u7ecf\u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u6392\u5217\uff0c\u6ca1\u6709\u66f4\u5927\u7684\u6392\u5217, \u8fd4\u56de\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\n  if (i == 0) {\n    reverse(next(nums.begin(), i), nums.end());\n    return nums;\n  }\n  int j = i;\n  for (; j &lt; n; ++j) { // \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6bd4 nums[i-1] \u5927\u7684\u6570\n    if (nums[j] &gt; nums[i - 1]) { continue; }\n    break;\n  }\n  j -= 1; // j \u56de\u9000\u5230\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4f4d\u7f6e\n  swap(nums[i - 1], nums[j]);\n  reverse(next(nums.begin(), i), nums.end());\n  return nums;\n}\n</code></pre>","tags":["Math","\u6392\u5217","permutation","\u5eb7\u6258\u5c55\u5f00","Cantor Expansion"]},{"location":"code/algorithm/Math/Permutation/#\u5eb7\u6258\u5c55\u5f00","title":"\u5eb7\u6258\u5c55\u5f00","text":"<p>\u5eb7\u6258\u5c55\u5f00\uff08\\text{Cantor Expansion}\uff09\u662f\u4e00\u79cd\u5c06\u957f\u5ea6\u4e3a n \u7684\u6392\u5217\u4e0e n! \u4e2a\u6574\u6570\u4e4b\u95f4\u5efa\u7acb\u53cc\u5c04\u5173\u7cfb\u7684\u7b97\u6cd5\u3002 \u524d\u8005\u5230\u540e\u8005\u79f0\u4e3a\u5eb7\u6258\u5c55\u5f00\uff0c\u540e\u8005\u5230\u524d\u8005\u79f0\u4e3a\u9006\u5eb7\u6258\u5c55\u5f00\uff08\\text{Inverse Cantor Expansion}\uff09\u3002  </p> <p>\u5eb7\u6258\u5c55\u5f00\u5c06\u4e00\u4e2a\u6392\u5217\u6620\u5c04\u5230\u4e00\u4e2a\u6574\u6570\uff0c\u8be5\u6574\u6570\u8868\u793a\u8be5\u6392\u5217\u5728\u5b57\u5178\u5e8f\u4e2d\u7684\u6392\u540d\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570\u3002  </p> <p>Example</p> <p>\u6392\u5217 [3,1,2] \u7684\u5eb7\u6258\u5c55\u5f00\u4e3a 4\uff0c\u56e0\u4e3a\u5728\u6240\u6709\u6392\u5217\u4e2d\uff0c[1,2,3],[1,3,2],[2,1,3],[2,3,1] \u90fd\u6392\u5728\u5b83\u524d\u9762</p> <p>\u5bf9\u4e8e\u6392\u5217 P = [p_1, p_2, \\dots, p_n]\uff0c\u5eb7\u6258\u5c55\u5f00\u516c\u5f0f\u4e3a\uff1aC(P) = \\sum_{i=1}^{n} (c_i * (n-i)!)\u3002 \u5176\u4e2d c_i = \\sum_{j=i+1}^{n} \\mathbb{I}\\left(p_j &lt; p_i\\right)\uff0c\u8868\u793a\u5728 p_i \u4e4b\u540e\u7684\u5143\u7d20\u4e2d\u5c0f\u4e8e p_i \u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5229\u7528\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5728 O(n \\log n) \u65f6\u95f4\u5185\u8ba1\u7b97\u5eb7\u6258\u5c55\u5f00\u3002  </p> \u3010\u6a21\u677f\u3011\u5eb7\u6258\u5c55\u5f00 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 P = [p_1, p_2, \\dots, p_n]\uff0c\u6c42\u5176\u5eb7\u6258\u5c55\u5f00 C(P)\u3002</p> <p></p>C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t cantor_expansion(const vector&lt;int&gt; &amp;permutation, int64_t mod = 998'244'353) {\n  int n = permutation.size();\n  vector&lt;int64_t&gt; fenwick(n + 1, 0);  // \u6811\u72b6\u6570\u7ec4, \u7528\u4e8e\u7ef4\u62a4\u5df2\u51fa\u73b0\u7684\u5143\u7d20\n\n  auto fenwick_update = [&amp;](int64_t index, int64_t delta) {\n    while (index &lt;= n) {\n      fenwick[index] += delta;\n      index          += index &amp; -index;\n    }\n  };\n  auto fenwick_query = [&amp;](int64_t index) {\n    int64_t sum = 0;\n    while (index &gt; 0) {\n      sum   += fenwick[index];\n      index -= index &amp; -index;\n    }\n    return sum;\n  };\n  // \u4ece\u540e\u5411\u524d\u5904\u7406\u6392\u5217\u5143\u7d20 (1)\n  int64_t result = 0;\n  int64_t factor = 1;  // (n-n)!\n  for (int64_t i = n; i &gt;= 1; --i) {\n    int64_t x = permutation[i - 1];\n    // \u67e5\u8be2\u5728 x \u4e4b\u524d\u7684\u5143\u7d20\u4e2d\u6709\u591a\u5c11\u4e2a\u5df2\u7ecf\u51fa\u73b0\u8fc7 (\u5373\u53f3\u8fb9\u6bd4 x \u5c0f\u7684\u5143\u7d20\u4e2a\u6570)\n    int64_t ci = fenwick_query(x - 1);\n    result     = (result + ci * factor % mod) % mod;  // \u7d2f\u52a0\u5f53\u524d\u5143\u7d20\u7684\u8d21\u732e\n    // \u6807\u8bb0 x \u5df2\u51fa\u73b0\n    fenwick_update(x, 1);\n    factor = factor * (n - (i - 1)) % mod;  // \u66f4\u65b0 (n-i)!\n  }\n\n  return (result + 1) % mod;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; permutation(n);\n  for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; permutation[i]; }\n  cout &lt;&lt; cantor_expansion(permutation) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u5982\u679c\u4ece\u524d\u5411\u540e\u5904\u7406\uff0c\u9700\u8981\u9884\u5904\u7406\u9636\u4e58\u6570\u7ec4\u6811\u72b6\u6570\u7ec4\u9700\u8981\u5148\u6807\u8bb0\u6240\u6709\u5143\u7d20\uff0c\u67e5\u8be2\u5b8c\u6210\u540e\u518d\u53d6\u6d88\u6807\u8bb0</li> </ol>","tags":["Math","\u6392\u5217","permutation","\u5eb7\u6258\u5c55\u5f00","Cantor Expansion"]},{"location":"code/algorithm/Math/Permutation/#\u9006\u5eb7\u6258\u5c55\u5f00","title":"\u9006\u5eb7\u6258\u5c55\u5f00","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 k\uff0c\u6c42\u51fa\u5b57\u5178\u5e8f\u4e2d\u6392\u540d\u4e3a k \u7684\u6392\u5217\u3002</p> <p>\u5bf9\u4e8e\u6392\u5217 P = [p_1, p_2, \\dots, p_n]\uff0c\u5eb7\u6258\u5c55\u5f00 C(P) = \\sum_{i=1}^{n} (c_i * (n-i)!)\uff0c\u5176\u4e2d c_i \u8868\u793a\u5728 p_i \u4e4b\u540e\u7684\u5143\u7d20\u4e2d\u5c0f\u4e8e p_i \u7684\u5143\u7d20\u4e2a\u6570\u3002 \u9006\u5eb7\u6258\u5c55\u5f00\u7684\u8fc7\u7a0b\u5c31\u662f\u4ece k \u4e2d\u9010\u6b65\u63d0\u53d6 c_i \u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u6839\u636e c_i \u6784\u9020\u6392\u5217\u3002 \u4e00\u822c\u4f1a\u5148\u6839\u636e\u67d0\u4e2a\u6392\u5217\u8ba1\u7b97\u51fa\u771f\u5b9e\u6392\u540d\uff0c\u7136\u540e\u8be2\u95ee\u8be5\u6392\u540d\u4e4b\u524d\u6216\u4e4b\u540e m \u4e2a\u6392\u5217\u3002\u7531\u4e8e\u6392\u540d\u8f83\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u9636\u4e58\u8fdb\u5236\u6765\u8868\u793a\u6392\u540d\u3002</p> \u9636\u4e58\u8fdb\u5236 <p>\u9636\u4e58\u8fdb\u5236\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u4f9d\u6b21\u4e3a 0!, 1!, 2!, 3!, \\dots, n!\u3002 \u7b2c i(i=0,1,2,\\dots,n) \u4f4d\u5bf9\u5e94\u6743\u503c i!\uff0c\u53d6\u503c\u8303\u56f4\u4e3a [0, i]\u3002 \u8fdb\u4f4d\u5904\u7406\u4e0e\u5341\u8fdb\u5236\u7c7b\u4f3c\u3002  </p> <p>Example</p> <p>\u5341\u8fdb\u5236\u6570 463 \u8f6c\u6362\u4e3a\u9636\u4e58\u8fdb\u5236: 463 = 3 * 5! + 4 * 4! + 1 * 3! + 0 * 2! + 1 * 1! + 0 * 0!\uff0c\u56e0\u6b64\u9636\u4e58\u8fdb\u5236\u8868\u793a\u4e3a [3,4,1,0,1,0]\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u5229\u7528\u7ebf\u6bb5\u6811\uff08\u4e8c\u5206\uff09\u53ef\u4ee5\u5728 O(n \\log n) \u65f6\u95f4\u5185\u5b8c\u6210\u3002  </p> \u706b\u661f\u4ebaplus <p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 P = [p_1, p_2, \\dots, p_n] \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u6c42\u5b57\u5178\u5e8f\u4e2d\u6392\u540d\u4e3a C(P) + k \u7684\u6392\u5217\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;  // sum[i] \u8868\u793a\u8be5\u8282\u70b9\u8986\u76d6\u7684\u533a\u95f4\u5185\u8fd8\u672a\u4f7f\u7528\u7684\u5143\u7d20\u4e2a\u6570\n\n  explicit segment_tree(int64_t n) : sum(n * 4) {}\n\n  // \u5efa\u6811, \u6839\u8282\u70b9\u4e3a 1, \u8986\u76d6\u533a\u95f4 [1, n]\n  void build(int64_t node, int64_t left, int64_t right) {\n    if (left == right) {\n      sum[node] = 1;  // \u521d\u59cb\u65f6\u6bcf\u4e2a\u5143\u7d20\u90fd\u672a\u4f7f\u7528\n      return;\n    }\n    int64_t mid = (left + right) / 2;\n    build(2 * node, left, mid);\n    build(2 * node + 1, mid + 1, right);\n    sum[node] = sum[2 * node] + sum[2 * node + 1];\n  };\n\n  // \u66f4\u65b0, \u6807\u8bb0 index \u4f4d\u7f6e\u7684\u5143\u7d20\u5df2\u4f7f\u7528\n  void update(int64_t index, int64_t node, int64_t left, int64_t right) {\n    if (left == right) {\n      sum[node] = 0;  // \u6807\u8bb0\u8be5\u5143\u7d20\u5df2\u4f7f\u7528\n      return;\n    }\n    int64_t mid = (left + right) / 2;\n    if (index &lt;= mid) {\n      update(index, 2 * node, left, mid);\n    } else {\n      update(index, 2 * node + 1, mid + 1, right);\n    }\n    sum[node] = sum[2 * node] + sum[2 * node + 1];\n  };\n\n  // \u67e5\u8be2\u533a\u95f4\u548c\n  int64_t query(int64_t ql, int64_t qr, int64_t node, int64_t left, int64_t right) {\n    if (ql &lt;= left &amp;&amp; right &lt;= qr) { return sum[node]; }\n    int64_t mid = (left + right) / 2;\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += query(ql, qr, 2 * node, left, mid); }\n    if (qr &gt; mid) { res += query(ql, qr, 2 * node + 1, mid + 1, right); }\n    return res;\n  };\n\n  // \u67e5\u8be2\u7b2c k \u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20, \u5e76\u4e14\u6807\u8bb0\u8be5\u5143\u7d20\u5df2\u4f7f\u7528\n  int64_t query_kth(int64_t k, int64_t node, int64_t left, int64_t right) {\n    if (left == right) {\n      sum[node] = 0;  // \u6807\u8bb0\u8be5\u5143\u7d20\u5df2\u4f7f\u7528\n      return left;\n    }\n    int64_t mid = (left + right) / 2;\n    int64_t res;\n    if (sum[2 * node] &gt;= k) {  // \u5de6\u5b50\u6811\u7684\u672a\u4f7f\u7528\u5143\u7d20\u4e2a\u6570\u8db3\u591f, \u7ee7\u7eed\u5f80\u5de6\u5b50\u6811\u627e\n      res = query_kth(k, 2 * node, left, mid);\n    } else {  // \u5426\u5219\u5f80\u53f3\u5b50\u6811\u627e, k \u51cf\u53bb\u5de6\u5b50\u6811\u7684\u672a\u4f7f\u7528\u5143\u7d20\u4e2a\u6570\n      res = query_kth(k - sum[2 * node], 2 * node + 1, mid + 1, right);\n    }\n    sum[node] = sum[2 * node] + sum[2 * node + 1];\n    return res;\n  };\n};\n\nvoid inverse_cantor_expansion(vector&lt;int64_t&gt; &amp;permutation, int64_t k) {\n  int64_t n = permutation.size();\n  segment_tree tree(n);\n  tree.build(1, 1, n);\n\n  // \u8ba1\u7b97\u5f53\u524d\u6392\u5217\u7684\u5eb7\u6258\u5c55\u5f00\u6392\u540d\n  for (int64_t i = 0; i &lt; n; ++i) {\n    int64_t x = permutation[i];\n    if (x == 1) {\n      permutation[i] = 0;\n    } else {\n      // \u67e5\u8be2\u5728 x \u4e4b\u524d\u7684\u5143\u7d20\u4e2d\u6709\u591a\u5c11\u4e2a\u672a\u4f7f\u7528\n      permutation[i] = tree.query(1, x - 1, 1, 1, n);\n    }\n    tree.update(x, 1, 1, n);  // \u6807\u8bb0 x \u5df2\u4f7f\u7528\n  }\n  permutation[n - 1] += k;  // \u5bf9\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684 ci \u503c\u52a0\u4e0a k\n  // \u5904\u7406\u8fdb\u4f4d\n  for (int64_t i = n - 1; i &gt; 0; --i) {\n    permutation[i - 1] += permutation[i] / (n - i);\n    permutation[i]     %= (n - i);\n  }\n\n  // \u91cd\u65b0\u5efa\u6811, \u7528\u4e8e\u6839\u636e ci \u503c\u6784\u9020\u6392\u5217\n  tree.build(1, 1, n);\n  for (int64_t i = 0; i &lt; n; ++i) {\n    int64_t ci = permutation[i];\n    // \u67e5\u8be2\u7b2c ci+1 \u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5df2\u4f7f\u7528\n    permutation[i] = tree.query_kth(ci + 1, 1, 1, n);\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  vector&lt;int64_t&gt; permutation(n);\n  for (int64_t i = 0; i &lt; n; ++i) { cin &gt;&gt; permutation[i]; }\n  inverse_cantor_expansion(permutation, k);\n  for (int64_t i = 0; i &lt; n; ++i) {\n    if (i &gt; 0) { cout &lt;&lt; \" \"; }\n    cout &lt;&lt; permutation[i];\n  }\n  cout &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>","tags":["Math","\u6392\u5217","permutation","\u5eb7\u6258\u5c55\u5f00","Cantor Expansion"]},{"location":"code/algorithm/Math/PermutationCycle/","title":"\u7f6e\u6362\u73af","text":"","tags":["Math","\u7f6e\u6362\u73af","Permutation Cycle"]},{"location":"code/algorithm/Math/PermutationCycle/#\u7f6e\u6362\u73af","title":"\u7f6e\u6362\u73af","text":"<p>\u7ed9\u5b9a\u96c6\u5408 S=\\{1,\\dots,n\\}\uff0c\u7f6e\u6362\u662f S \u4e0a\u7684\u53cc\u5c04\u3002\u4efb\u4e00\u7f6e\u6362\u53ef\u4ee5\u552f\u4e00\uff08\u9664\u5faa\u73af\u987a\u5e8f\u5916\uff09\u5206\u89e3\u4e3a\u82e5\u5e72\u4e24\u4e24\u4e0d\u76f8\u4ea4\u7684\u73af\uff08\\text{cycle}\uff09\u3002 \u5728\u6570\u7ec4\u6392\u5e8f\u95ee\u9898\u4e2d\uff0c\u5e38\u628a\u5f53\u524d\u6570\u7ec4\u4e0e\u76ee\u6807\u6570\u7ec4\u7684\u4e0b\u6807\u6620\u5c04\u89c6\u4e3a\u4e00\u4e2a\u7f6e\u6362\uff1a\u82e5\u5143\u7d20\u4ece\u4e0b\u6807 i \u5e94\u653e\u5230\u4e0b\u6807 P(i)\uff0c\u5219\u4e0b\u6807\u6620\u5c04 i\\mapsto P(i) \u662f\u4e00\u4e2a\u7f6e\u6362\uff0c\u73af\u5373\u4e3a\u7d22\u5f15\u5faa\u73af\u3002</p> <p>\u73af\u7684\u6027\u8d28\u4e0e\u6700\u5c11\u4ea4\u6362\u6b21\u6570\u8bc1\u660e</p> <p>\u8bbe\u4e00\u4e2a\u7f6e\u6362\u5206\u89e3\u4e3a r \u4e2a\u4e0d\u76f8\u4ea4\u73af\uff0c\u73af\u7684\u957f\u5ea6\u5206\u522b\u4e3a k_1, k_2, \\ldots, k_r\uff0c\u5219\u6709 \\sum_{i=1}^r k_i = n\u3002 \u8bbe\u4e00\u4e2a\u73af\u957f\u5ea6\u4e3a k\u3002\u8981\u628a\u73af\u4e2d\u7684\u5143\u7d20\u653e\u56de\u6b63\u786e\u4f4d\u7f6e\uff0c\u6700\u5c11\u9700\u8981 k-1 \u6b21\u4ea4\u6362\uff1a\u6bcf\u6b21\u628a\u4e00\u4e2a\u4e0d\u5728\u4f4d\u7684\u5143\u7d20\u76f4\u63a5\u4ea4\u6362\u5230\u5b83\u5e94\u5728\u7684\u4f4d\u7f6e\uff0c\u80fd\u628a\u73af\u4e2d\u4e00\u4e2a\u5143\u7d20\u56fa\u5b9a\u5230\u4f4d\uff0c\u91cd\u590d k-1 \u6b21\u540e\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\u81ea\u7136\u5728\u4f4d\u3002 \u82e5\u7f6e\u6362\u5206\u89e3\u4e3a r \u4e2a\u4e0d\u76f8\u4ea4\u73af\u4e14\u603b\u5143\u7d20\u6570\u4e3a n\uff0c\u5219\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u4e3a</p>  \\sum_{i=1}^r (k_i-1) = \\Big(\\sum_{i=1}^r k_i\\Big) - r = n - r.  <p>\u53e6\u4e00\u79cd\u8bc1\u660e\u601d\u8def\uff1a\u6bcf\u6b21\u4ea4\u6362\u81f3\u591a\u5c06\u73af\u6570\u589e\u52a0 1\uff0c\u4ece\u521d\u59cb r \u4e2a\u73af\u589e\u52a0\u5230 n \u4e2a\uff08\u6bcf\u4e2a\u5143\u7d20\u81ea\u6210\u73af\uff09\u9700 n-r \u6b21\u4ea4\u6362\uff0c\u4e14\u53ef\u4ee5\u8fbe\u5230\uff0c\u56e0\u6b64\u4e0b\u754c\u53ef\u8fbe\u3002</p> \u7f6e\u6362\u73af\u4e0e\u6700\u5c11\u4ea4\u6362\u6b21\u6570 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums\uff0c\u6570\u7ec4\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u4e14\u5747\u5728 [1,n] \u4e4b\u95f4\u3002\u6c42\u5c06\u6570\u7ec4\u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u4ea4\u6362\u6b21\u6570\u3002  </p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u8fd4\u56de\u4f7f\u6570\u7ec4\u975e\u964d\u5e8f\u6240\u9700\u7684\u6700\u5c11\u4ea4\u6362\u6b21\u6570\nint64_t min_swaps_to_sort(const vector&lt;int64_t&gt;&amp; nums) {\n  int64_t n = nums.size();\n  vector&lt;pair&lt;int64_t, int64_t&gt;&gt; v(n);\n  for (int64_t i = 0; i &lt; n; ++i) { v[i] = {nums[i], i}; }\n  sort(v.begin(), v.end());  // \u6309\u503c\u6392\u5e8f\uff08\u76f8\u540c\u503c\u6309\u539f\u4e0b\u6807\u533a\u5206\uff09\n  vector&lt;int64_t&gt; to(n);\n  for (int64_t j = 0; j &lt; n; ++j) { to[v[j].second] = j; }\n  vector&lt;int64_t&gt; vis(n, 0);\n  int64_t ans = 0;\n  for (int64_t i = 0; i &lt; n; ++i) {\n    if (vis[i]) { continue; }\n    int64_t cur = i, len = 0;\n    while (!vis[cur]) {\n      vis[cur] = 1;\n      cur      = to[cur];\n      ++len;\n    }\n    if (len &gt; 0) ans += len - 1;\n  }\n  return ans;\n}\n</code></pre>","tags":["Math","\u7f6e\u6362\u73af","Permutation Cycle"]},{"location":"code/algorithm/Math/Prime/","title":"\u8d28\u6570","text":"","tags":["Math","\u8d28\u6570","Prime","\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","Sieve of Eratosthenes","\u6b27\u62c9\u7b5b\u6cd5","Sieve of Euler","\u8d28\u56e0\u5b50","Prime Factorization","\u6b27\u62c9\u51fd\u6570","Euler's Totient Function"]},{"location":"code/algorithm/Math/Prime/#\u8d28\u6570\u4e0e\u7b5b\u6cd5","title":"\u8d28\u6570\u4e0e\u7b5b\u6cd5","text":"<p>\u8d28\u6570\uff08\\text{Prime}\uff09\u662f\u6307\u5927\u4e8e 1 \u7684\u81ea\u7136\u6570\u4e2d\uff0c\u9664\u4e86 1 \u548c\u5b83\u672c\u8eab\u5916\uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u81ea\u7136\u6570\u6574\u9664\u7684\u6570\u3002 \u4efb\u4f55\u5927\u4e8e 1 \u7684\u81ea\u7136\u6570\u90fd\u53ef\u4ee5\u552f\u4e00\u5730\u8868\u793a\u4e3a\u8d28\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u88ab\u79f0\u4e3a\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u3002 \u4e3a\u4e86\u6709\u6548\u5730\u627e\u51fa\u8d28\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b5b\u6cd5\uff0c\u5e38\u89c1\u7684\u7b5b\u6cd5\u6709\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u548c\u6b27\u62c9\u7b5b\u6cd5\u3002  </p>","tags":["Math","\u8d28\u6570","Prime","\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","Sieve of Eratosthenes","\u6b27\u62c9\u7b5b\u6cd5","Sieve of Euler","\u8d28\u56e0\u5b50","Prime Factorization","\u6b27\u62c9\u51fd\u6570","Euler's Totient Function"]},{"location":"code/algorithm/Math/Prime/#\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","title":"\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","text":"<p>\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff08\\text{Sieve of Eratosthenes}\uff09\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u4ece 2 \u5f00\u59cb\uff0c\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u8d28\u6570\u7684\u500d\u6570\u6807\u8bb0\u4e3a\u5408\u6570\uff0c\u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\sqrt{n} \u7684\u6570\u3002 \u4f7f\u7528\u57c3\u6c0f\u7b5b\u8fd8\u80fd\u591f\u9ad8\u6548\u5730\u7edf\u8ba1 n \u8303\u56f4\u5185\u7684\u8d28\u6570\u4e2a\u6570\u3001\u8ba1\u7b97\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570\uff08\\omega \u51fd\u6570\uff09\u4ee5\u53ca\u6240\u6709\u8d28\u56e0\u5b50\u4e2a\u6570\uff08\\Omega \u51fd\u6570(1)\uff09\u7b49\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\log \\log n)\uff0c\u9002\u7528\u4e8e\u9700\u8981\u4e00\u6b21\u6027\u627e\u51fa\u6240\u6709\u8d28\u6570\u7684\u573a\u666f\u3002</p> <ol> <li>\u4ee4 p \u4e3a n \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0cn \u53ef\u4ee5\u8868\u793a\u4e3a n = p \\times m\uff0c\u4e8e\u662f m = n / p\u3002     \u53bb\u6389\u4e00\u4e2a\u8d28\u56e0\u5b50 p \u540e\uff0c\u5173\u4e8e\"\u542b\u91cd\u6570\u7684\u8d28\u56e0\u5b50\u4e2a\u6570\"\u8bb0\u4f5c \\Omega(n)\uff0c\u6709\u9012\u63a8\u5173\u7cfb\uff1a\\Omega(n) = \\Omega(m) + 1\u3002     \u9012\u63a8\u7684\u8fb9\u754c\u6761\u4ef6\u4e3a \\Omega(1) = 0\uff0c\u56e0\u4e3a 1 \u6ca1\u6709\u8d28\u56e0\u5b50\u3002</li> </ol> \u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5 \u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u8ba1\u7b97\u8d28\u6570\u4e2a\u6570\u4e0d\u540c\u8d28\u56e0\u5b50\u4e2a\u6570\u6240\u6709\u8d28\u56e0\u5b50\u4e2a\u6570 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto is_prime_Eratosthenes(int64_t n = 15'000'000) {\n  static vector&lt;bool&gt; is_prime(n + 1, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int64_t i = 2; i * i &lt;= n; ++i) {\n    if (is_prime[i]) {\n      for (int64_t j = i * i; j &lt;= n; j += i) { is_prime[j] = false; }\n    }\n  }\n  return [&amp;](int64_t x) { return is_prime[x]; };\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint64_t count_prime_number(int64_t n) {\n  if (n &lt;= 1) { return 0; }\n  vector&lt;bool&gt; is_prime(n + 1, true);\n  int64_t count = (n + 1) / 2;  // \u5947\u6570\u4e2a\u6570\u52a0\u4e0a`2`\u8fd9\u4e2a\u6570\n  for (int i = 3; i * i &lt;= n; i += 2) {\n    if (!is_prime[i]) { continue; }            // not a prime num\n    for (int j = i * i; j &lt;= n; j += i * 2) {  // \u6392\u9664\u5076\u6570\n      if (is_prime[j]) {\n        is_prime[j] = false;\n        count--;\n      }\n    }\n  }\n  return count;\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto omega(int64_t n = 15'000'000) {\n  static vector&lt;int64_t&gt; count(n + 1, 0);\n  for (int64_t i = 2; i &lt;= n; ++i) {\n    if (count[i] == 0) {  // a prime num\n      for (int64_t j = i; j &lt;= n; j += i) { count[j]++; }\n    }\n  }\n  return [&amp;](int64_t x) { return count[x]; };\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto Omega(int64_t n = 15'000'000) {\n  static vector&lt;int64_t&gt; count(n + 1, 0);\n  vector&lt;int64_t&gt; minp(n + 1, 0);  // \u6700\u5c0f\u8d28\u56e0\u5b50\n  for (int64_t i = 2; i &lt;= n; ++i) {\n    if (minp[i] == 0) {  // i\u662f\u7d20\u6570\n      for (int64_t j = i; j &lt;= n; j += i) {\n        if (minp[j] == 0) { minp[j] = i; }\n      }\n    }\n  }\n  // \u8ba1\u7b97\u6bcf\u4e2a\u6570\u7684\u6240\u6709\u7d20\u56e0\u5b50\u4e2a\u6570\n  for (int64_t i = 2; i &lt;= n; ++i) { count[i] = count[i / minp[i]] + 1; }\n  return [&amp;](int64_t x) { return count[x]; };\n}\n</code></pre> <p>Tip</p> <p>\u7531\u4e8e\u7b5b\u6cd5\u9700\u8981\u4ece\u5934\u5f00\u59cb\u9884\u5904\u7406\uff0c\u6240\u4ee5\u4e0d\u652f\u6301\u52a8\u6001\u589e\u5927 n \u7684\u8303\u56f4</p>","tags":["Math","\u8d28\u6570","Prime","\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","Sieve of Eratosthenes","\u6b27\u62c9\u7b5b\u6cd5","Sieve of Euler","\u8d28\u56e0\u5b50","Prime Factorization","\u6b27\u62c9\u51fd\u6570","Euler's Totient Function"]},{"location":"code/algorithm/Math/Prime/#\u6b27\u62c9\u7b5b\u6cd5","title":"\u6b27\u62c9\u7b5b\u6cd5","text":"<p>\u6b27\u62c9\u7b5b\u6cd5\uff08\\text{Sieve of Euler}\uff09\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u5b83\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u7b5b\u9009\u4e00\u6b21\uff0c\u4ee5\u8fbe\u5230\u4e0d\u91cd\u590d\u7b5b\u9009\u7684\u76ee\u7684\u3002 \u6b27\u62c9\u7b5b\u6cd5\u4e0d\u4ec5\u53ef\u4ee5\u627e\u51fa\u8d28\u6570\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u4ece\u800c\u5b9e\u73b0\u5feb\u901f\u7684\u8d28\u56e0\u5b50\u5206\u89e3\u3002 \u6b27\u62c9\u7b5b\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u9002\u7528\u4e8e\u9700\u8981\u9891\u7e41\u5224\u65ad\u8d28\u6570\u7684\u573a\u666f\u3002  </p> \u6b27\u62c9\u7b5b\u6cd5 \u6b27\u62c9\u7b5b\u6cd5\u6700\u5c0f\u8d28\u56e0\u5b50 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nauto is_prime_euler(int n = 15'000'000) {\n  static vector&lt;bool&gt; is_prime(n + 1, true);\n  is_prime[0] = is_prime[1] = false;\n  vector&lt;int&gt; primes;\n  primes.reserve((n / 2) + 1);\n  for (int i = 2; i &lt;= n; ++i) {\n    if (is_prime[i]) { primes.push_back(i); }\n    for (int p : primes) {\n      if (i * p &gt; n) { break; }\n      is_prime[i * p] = false;\n      if (i % p == 0) { break; }  // i has p as a prime factor\n    }\n  }\n  return [&amp;](int x) { return is_prime[x]; };\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int64_t&gt; min_prime_euler(int64_t n) {\n  vector&lt;int64_t&gt; minp(n + 1, 0);  // minp[i] \u8868\u793a i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\n  vector&lt;int64_t&gt; primes;\n  for (int64_t i = 2; i &lt;= n; ++i) {\n    if (minp[i] == 0) {\n      minp[i] = i;\n      primes.push_back(i);\n    }\n    for (int64_t p : primes) {\n      if (p &gt; minp[i] || i * p &gt; n) { break; }\n      minp[i * p] = p;\n    }\n  }\n  // \u8fd4\u56de\u6700\u5c0f\u8d28\u56e0\u5b50\u6570\u7ec4, \u5982\u679c\u662f\u7d20\u6570\u5219 minp[i] = i\n  return minp;\n}\n</code></pre>","tags":["Math","\u8d28\u6570","Prime","\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","Sieve of Eratosthenes","\u6b27\u62c9\u7b5b\u6cd5","Sieve of Euler","\u8d28\u56e0\u5b50","Prime Factorization","\u6b27\u62c9\u51fd\u6570","Euler's Totient Function"]},{"location":"code/algorithm/Math/Prime/#\u6b27\u62c9\u51fd\u6570","title":"\u6b27\u62c9\u51fd\u6570","text":"<p>\u6b27\u62c9\u7b5b\u6cd5\u8fd8\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570 \\varphi(n)\uff0c\u5373\u5c0f\u4e8e n \u4e14\u4e0e n \u4e92\u8d28\u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570\u3002</p> <p>\u6b27\u62c9\u51fd\u6570</p> <p>\u6b27\u62c9\u51fd\u6570 \\varphi(n) \u8868\u793a [1, n] \u4e2d\u4e0e n \u4e92\u8d28\u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570\uff0c\u5373 \\varphi(n) = \\left|\\{ k \\mid 1 \\leq k \\leq n, \\gcd(k, n) = 1 \\}\\right|\u3002 \u6b27\u62c9\u51fd\u6570\u6709\u5982\u4e0b\u6027\u8d28\uff1a</p> <ol> <li>\u5982\u679c n \u662f\u8d28\u6570\uff0c\u5219 \\varphi(n) = n - 1\u3002</li> <li>\u5982\u679c n = p_1^{a_1} p_2^{a_2} \\cdots p_k^{a_k}\uff08n \u7684\u8d28\u56e0\u6570\u5206\u89e3\uff09\uff0c\u5219 \\varphi(n) = n (1 - \\frac{1}{p_1}) (1 - \\frac{1}{p_2}) \\cdots (1 - \\frac{1}{p_k})\u3002</li> </ol> <p>\u6b27\u62c9\u5b9a\u7406\uff1a\u5982\u679c \\gcd(a, n) = 1\uff0c\u5219 a^{\\varphi(n)} \\equiv 1 \\ (\\text{mod} \\ n)\u3002</p> \u6b27\u62c9\u51fd\u6570 \u6b27\u62c9\u51fd\u6570\u7ebf\u6027\u65f6\u95f4\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570 C++<pre><code>int64_t phi(int64_t n) {\n  int64_t result = n;\n  for (int64_t i = 2; i * i &lt;= n; i++) {\n    if (n % i == 0) {                 // i \u662f n \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\n      while (n % i == 0) { n /= i; }  // \u53bb\u6389\u6240\u6709 i \u56e0\u5b50, \u4fdd\u8bc1\u6bcf\u4e2a\u8d28\u56e0\u5b50\u53ea\u5904\u7406\u4e00\u6b21\n      result -= result / i;           // \u5e94\u7528\u516c\u5f0f result *= (1 - 1/i)\n    }\n  }\n  if (n &gt; 1) { result -= result / n; }  // \u8fd8\u6709\u4e00\u4e2a\u5927\u4e8e sqrt(n) \u7684\u8d28\u56e0\u5b50\n  return result;\n}\n</code></pre> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int64_t&gt; euler_phi_sieve(int64_t n) {\n  vector&lt;int64_t&gt; phi(n + 1);\n  vector&lt;int64_t&gt; primes;\n  phi[0] = 0;\n  phi[1] = 1;\n  for (int64_t i = 2; i &lt;= n; ++i) {\n    if (phi[i] == 0) {  // i \u662f\u7d20\u6570\n      phi[i] = i - 1;\n      primes.push_back(i);\n    }\n    for (int64_t p : primes) {\n      if (i * p &gt; n) { break; }\n      if (i % p == 0) {\n        phi[i * p] = phi[i] * p;\n        break;\n      }\n      phi[i * p] = phi[i] * (p - 1);\n    }\n  }\n  return phi;\n}\n</code></pre>","tags":["Math","\u8d28\u6570","Prime","\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5","Sieve of Eratosthenes","\u6b27\u62c9\u7b5b\u6cd5","Sieve of Euler","\u8d28\u56e0\u5b50","Prime Factorization","\u6b27\u62c9\u51fd\u6570","Euler's Totient Function"]},{"location":"code/algorithm/Math/QuickPow/","title":"\u5feb\u901f\u5e42","text":"","tags":["Math","\u5feb\u901f\u5e42","Quick Power","\u77e9\u9635\u5feb\u901f\u5e42","Matrix Quick Power"]},{"location":"code/algorithm/Math/QuickPow/#\u5feb\u901f\u5e42","title":"\u5feb\u901f\u5e42","text":"","tags":["Math","\u5feb\u901f\u5e42","Quick Power","\u77e9\u9635\u5feb\u901f\u5e42","Matrix Quick Power"]},{"location":"code/algorithm/Math/QuickPow/#\u4e58\u6cd5\u5feb\u901f\u5e42","title":"\u4e58\u6cd5\u5feb\u901f\u5e42","text":"<p>\u4e58\u6cd5\u5feb\u901f\u5e42\uff08\\text{Quick Power}\uff09\u662f\u4e00\u79cd\u9ad8\u6548\u8ba1\u7b97\u5927\u6574\u6570\u5e42 x^n, n \\geq 0 \u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log n)\u3002 \u57fa\u672c\u601d\u60f3\u662f\u5c06\u6307\u6570 n \u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff1an = b_k*2^k + ... + b_0*2^0, b_i \\in \\{0, 1\\}\u3002\u56e0\u6b64\uff1ax^n = x^{b_k*2^k} * ... * x^{b_0*2^0}\u3002 \u4e0d\u65ad\u5e73\u65b9\u5e95\u6570\uff0c\u6307\u6570\u53f3\u79fb\u4e00\u4f4d\uff0c\u9047\u5230 b_i=1 \u5c31\u4e58\u5230\u7ed3\u679c\u4e0a\u3002 \u540c\u7406\uff0c\u6574\u6570\u4e58\u6cd5\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002  </p> \u4e58\u6cd5\u5feb\u901f\u5e42 \u5feb\u901f\u5e42\u6574\u6570\u4e58\u6cd5 C++<pre><code>int64_t pow(int64_t x, int64_t n, int64_t mod = 1'000'000'007) {\n  int64_t res  = 1;\n  int64_t base = x % mod;\n  while (n &gt; 0) {\n    if ((n &amp; 1) != 0) { res = (res * base) % mod; }\n    base   = (base * base) % mod;\n    n    &gt;&gt;= 1;\n  }\n  return res;\n}\n</code></pre> C++<pre><code>int64_t multiply(int64_t a, int64_t b, int64_t mod = 1'000'000'007) {\n  int64_t result = 0;\n  a              = (a % mod + mod) % mod;\n  b              = (b % mod + mod) % mod;\n  while (b &gt; 0) {\n    if ((b &amp; 1) != 0) { result = (result + a) % mod; }\n    a   = (a * 2) % mod;\n    b &gt;&gt;= 1;\n  }\n  return result % mod;\n}\n</code></pre> <p>Tip</p> <p>\u4e58\u6cd5\u5feb\u901f\u5e42\u7684\u5e94\u7528</p> <ul> <li>\u8ba1\u7b97\u5927\u6574\u6570\u7684\u5e42\u6a21</li> <li>\u8ba1\u7b97\u7ec4\u5408\u6570</li> <li>\u8ba1\u7b97\u9006\u5143</li> </ul>","tags":["Math","\u5feb\u901f\u5e42","Quick Power","\u77e9\u9635\u5feb\u901f\u5e42","Matrix Quick Power"]},{"location":"code/algorithm/Math/QuickPow/#\u77e9\u9635\u5feb\u901f\u5e42","title":"\u77e9\u9635\u5feb\u901f\u5e42","text":"<p>\u77e9\u9635\u5feb\u901f\u5e42\uff08\\text{Matrix Quick Power}\uff09\u662f\u4e00\u79cd\u9ad8\u6548\u8ba1\u7b97\u77e9\u9635\u7684\u6574\u6570\u6b21\u5e42 A^n, n \\geq 0 \u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k^3 \\log n)\uff0c\u5176\u4e2dA\u4e3ak \\times k\u7684\u65b9\u9635\u3002 \u57fa\u672c\u601d\u60f3\u4e0e\u4e58\u6cd5\u5feb\u901f\u5e42\u7c7b\u4f3c\uff0c\u5c06\u6307\u6570 n \u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u5e76\u901a\u8fc7\u4e0d\u65ad\u5e73\u65b9\u77e9\u9635\u6765\u8ba1\u7b97\u5e42\u3002  </p> \u3010\u6a21\u677f\u3011\u77e9\u9635\u5feb\u901f\u5e42 C++<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing VVI = vector&lt;vector&lt;int64_t&gt;&gt;;\n\n// \u77e9\u9635\u4e58\u6cd5\uff0c\u8ba1\u7b97 a * b, \u5176\u4e2d a, b \u90fd\u662f n*n \u77e9\u9635\nVVI multiply(const VVI &amp;a, const VVI &amp;b, int64_t mod = 1'000'000'007) {\n  int n        = a.size();\n  int64_t zero = 0;  // \u96f6\u5143\n  VVI c(n, vector&lt;int64_t&gt;(n, zero));\n\n  for (int i = 0; i &lt; n; i++) {\n    for (int k = 0; k &lt; n; k++) {\n      for (int j = 0; j &lt; n; j++) { c[i][j] = (c[i][j] + a[i][k] * b[k][j] % mod) % mod; }\n    }\n  }\n  return c;\n}\n\n// \u77e9\u9635\u5feb\u901f\u5e42\uff0c\u8ba1\u7b97 x^n, \u5176\u4e2d x \u662f k*k \u77e9\u9635\nVVI pow(const VVI &amp;x, int64_t n, int64_t mod = 1'000'000'007) {\n  int k        = x.size();\n  int64_t zero = 0;  // \u96f6\u5143\n  int64_t one  = 1;  // \u5355\u4f4d\u5143\n  VVI res(k, vector&lt;int64_t&gt;(k, zero));\n  for (int i = 0; i &lt; k; ++i) { res[i][i] = one; }  // \u521d\u59cb\u5316\u4e3a\u5355\u4f4d\u77e9\u9635\n  VVI base = x;\n  while (n &gt; 0) {\n    if ((n &amp; 1) == 1) { res = multiply(res, base, mod); }\n    base   = multiply(base, base, mod);\n    n    &gt;&gt;= 1;\n  }\n  return res;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  const int64_t MOD = 1'000'000'007;\n  int64_t n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  VVI mat(n, vector&lt;int64_t&gt;(n, 0));\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) {\n      cin &gt;&gt; mat[i][j];\n      mat[i][j] = (mat[i][j] % MOD + MOD) % MOD;\n    }\n  }\n  VVI res = pow(mat, k, MOD);\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) { cout &lt;&lt; res[i][j] &lt;&lt; \" \"; }\n    cout &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n</code></pre> \u77e9\u9635\u4e58\u6cd5 <p>\u5bf9\u4e8e\u4e24\u4e2a\u77e9\u9635 A \u548c B\uff0c\u5b83\u4eec\u7684\u4e58\u79ef C = A * B, A \\in \\mathbb{R}^{m \\times n}, B \\in \\mathbb{R}^{n \\times p}\uff0c\u5219 C \\in \\mathbb{R}^{m \\times p}\uff0c\u5176\u4e2d C_{ij} = \\sum_{k=1}^{n} A_{ik} * B_{kj}\u3002  </p> C++<pre><code>using VVI = vector&lt;vector&lt;int64_t&gt;&gt;;\n\n// \u77e9\u9635\u4e58\u6cd5\uff0c\u8ba1\u7b97 a * b, \u5176\u4e2d a \u662f m*n \u77e9\u9635, b \u662f n*p \u77e9\u9635\nVVI multiply(const VVI &amp;a, const VVI &amp;b, int64_t mod = 1'000'000'007) {\n  int m = a.size(), n = a[0].size(), p = b[0].size();\n  int64_t zero = 0;  // \u96f6\u5143\n  VVI c(m, vector&lt;int64_t&gt;(p, zero));\n\n  for (int i = 0; i &lt; m; i++) {\n    for (int k = 0; k &lt; n; k++) {\n      for (int j = 0; j &lt; p; j++) { c[i][j] = (c[i][j] + a[i][k] * b[k][j] % mod) % mod; }\n    }\n  }\n  return c;\n}\n</code></pre> <p>\u77e9\u9635\u5feb\u901f\u5e42\u5e38\u7528\u4e8e\u9012\u63a8\u95ee\u9898\u7684\u9ad8\u6548\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u4e00\u7ef4 k \u9636\u7ebf\u6027\u9012\u63a8\u5173\u7cfb\uff1aF(n) = c_{1} \\cdot F(n-1) + c_{2} \\cdot F(n-2) + \\dots + c_{k} \\cdot F(n-k)\uff0c\u5982\u679c\u4f7f\u7528\u884c\u5411\u91cf\u8868\u793a\u9012\u63a8\uff0c\u53ef\u4ee5\u6784\u9020\u8f6c\u79fb\u77e9\u9635 M \u6ee1\u8db3\uff1a [F(n), F(n-1), \\dots, F(n-k+1)] = [F(n-1), F(n-2), \\dots, F(n-k)] * M\uff0c\u5176\u4e2d M \u4e3a\uff1a</p>  M = \\begin{bmatrix} c_1 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 \\\\ c_2 &amp; 0 &amp; 1 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ c_{k-1} &amp; 0 &amp; 0 &amp; \\cdots &amp; 1 \\\\ c_k &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\end{bmatrix}  <p>\u5373\uff1a  </p> <ul> <li>\u7b2c\u4e00\u5217\u662f\u9012\u63a8\u7cfb\u6570 [c_1, c_2, \\dots, c_k]</li> <li>\u5176\u4f59\u662f\u5355\u4f4d\u77e9\u9635\u53f3\u79fb\u4e00\u5217\uff08\u5373 I_{k-1}\uff09  </li> </ul> <p>\u7531\u6b64\u53ef\u5f97\uff1a[F(n), F(n-1), \\dots, F(n-k+1)] = [F(k), F(k-1), \\dots, F(1)] * M^{n-k}\uff0c \u56e0\u6b64\uff0c\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u9ad8\u6548\u6c42\u89e3 F(n)\uff08\u6ce8\u610f\u521d\u59cb\u884c\u5411\u91cf\u548c\u77e9\u9635\u4e58\u6cd5\u987a\u5e8f\uff09  </p> \u6590\u6ce2\u90a3\u5951\u6570 <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217</p> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6ee1\u8db3\u9012\u63a8\u5173\u7cfb F(n) = F(n-1) + F(n-2)\uff0c\u521d\u59cb\u6761\u4ef6\u4e3a F(0) = 0, F(1) = 1\u3002 \u6784\u9020\u8f6c\u79fb\u77e9\u9635\uff1a</p>  M = \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; 0 \\end{bmatrix}  <p>\u5219\u6709\uff1a</p>  \\begin{bmatrix} F(n) &amp; F(n-1) \\end{bmatrix} = \\begin{bmatrix} F(1) &amp; F(0) \\end{bmatrix} * M^{n-1}  <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u77e9\u9635 M^{n-1} \u6765\u9ad8\u6548\u6c42\u89e3 F(n)\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing VVI = vector&lt;vector&lt;int64_t&gt;&gt;;\n\n// \u77e9\u9635\u4e58\u6cd5\uff0c\u8ba1\u7b97 a * b, \u5176\u4e2d a, b \u90fd\u662f n*n \u77e9\u9635\nVVI multiply(const VVI &amp;a, const VVI &amp;b, int64_t mod = 1'000'000'007) {\n  int n        = a.size();\n  int64_t zero = 0;  // \u96f6\u5143\n  VVI c(n, vector&lt;int64_t&gt;(n, zero));\n\n  for (int i = 0; i &lt; n; i++) {\n    for (int k = 0; k &lt; n; k++) {\n      for (int j = 0; j &lt; n; j++) { c[i][j] = (c[i][j] + a[i][k] * b[k][j] % mod) % mod; }\n    }\n  }\n  return c;\n}\n\n// \u77e9\u9635\u5feb\u901f\u5e42\uff0c\u8ba1\u7b97 x^n, \u5176\u4e2d x \u662f k*k \u77e9\u9635\nVVI pow(const VVI &amp;x, int64_t n, int64_t mod = 1'000'000'007) {\n  int k        = x.size();\n  int64_t zero = 0;  // \u96f6\u5143\n  int64_t one  = 1;  // \u5355\u4f4d\u5143\n  VVI res(k, vector&lt;int64_t&gt;(k, zero));\n  for (int i = 0; i &lt; k; ++i) { res[i][i] = one; }  // \u521d\u59cb\u5316\u4e3a\u5355\u4f4d\u77e9\u9635\n  VVI base = x;\n  while (n &gt; 0) {\n    if ((n &amp; 1) == 1) { res = multiply(res, base, mod); }\n    base   = multiply(base, base, mod);\n    n    &gt;&gt;= 1;\n  }\n  return res;\n}\n\nint fib(int n) {\n  if (n == 0) { return 0; }\n  VVI M = {\n      {1, 1},\n      {1, 0}\n  };\n  VVI res = pow(M, n - 1);\n  return res[0][0];  // F(n) \u5b58\u50a8\u5728\u7ed3\u679c\u77e9\u9635\u7684 (0,0) \u4f4d\u7f6e\n}\n</code></pre>","tags":["Math","\u5feb\u901f\u5e42","Quick Power","\u77e9\u9635\u5feb\u901f\u5e42","Matrix Quick Power"]},{"location":"code/algorithm/Math/QuickPow/#\u5e7f\u4e49\u77e9\u9635\u5feb\u901f\u5e42","title":"\u5e7f\u4e49\u77e9\u9635\u5feb\u901f\u5e42","text":"<p>\u5e7f\u4e49\u4e0a\uff0c\u53ea\u8981\u4e24\u4e2a\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u4ee3\u6570\u7cfb\u7edf\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u8fdb\u884c\u5feb\u901f\u5e42\u8ba1\u7b97\u3002 \u5373\u6ee1\u8db3\uff1a\u5185\u5c42\u7684\u8fd0\u7b97\u5177\u6709\u7ed3\u5408\u5f8b\uff0c\u5916\u5c42\u7684\u8fd0\u7b97\u5bf9\u4e8e\u5185\u5c42\u8fd0\u7b97\u6709\u5206\u914d\u5f8b\u3002(1)</p> <ol> <li> <p>\u8fd0\u7b97\u7b26 A \u5bf9\u4e8e\u8fd0\u7b97\u7b26 B \u6709\u5206\u914d\u5f8b, \u5982\u679c\u5bf9\u4e8e\u6240\u6709 a, b, c \\in S \u90fd\u6ee1\u8db3 A(a, B(b, c)) = B(A(a, b), A(a, c)) \u548c A(B(b, c), a) = B(A(b, a), A(c, a))\u3002</p> <p>* \u5bf9 + \u6709\u5206\u914d\u5f8b</p> <p>\u5bf9\u4e8e\u6240\u6709 a, b, c \\in \\mathbb{R} \u90fd\u6ee1\u8db3 a * (b + c) = a * b + a * c \u548c (b + c) * a = b * a + c * a\u3002</p> </li> </ol> <p>\u534a\u73af\u4e0a\u7684\u77e9\u9635\u5feb\u901f\u5e42</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u52a0\u6cd5\u548c\u4e58\u6cd5\u6ee1\u8db3\u534a\u73af\uff08semi-ring\uff09\u7684\u516c\u7406\uff0c\u90a3\u4e48\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u6210\u7acb\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u5feb\u901f\u5e42\u4f18\u5316\u52a8\u6001\u89c4\u5212\u3002<sup>1</sup> </p> <p>\u534a\u73af\uff08semi-ring\uff09\u7684\u5b9a\u4e49\uff1a \u534a\u73af\u662f\u4e00\u4e2a\u96c6\u5408 A\uff0c\u914d\u5907\u4e86\u52a0\u6cd5 \\oplus \u548c\u4e58\u6cd5 \\otimes\u4e24\u4e2a\u4e8c\u5143\u8fd0\u7b97\uff0c\u5e76\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a  </p> <ol> <li> <p>(A, \\oplus) \u662f\u4e00\u4e2a\u4ea4\u6362\u5e7a\u534a\u7fa4\uff08\\text{commutative monoid}\uff09\uff0c\u5373\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a</p> <ol> <li>\u52a0\u6cd5\u7684\u7ed3\u5408\u5f8b\u6210\u7acb\uff1a\u5bf9\u4e8e\u4efb\u610f a, b, c \\in A\uff0c\u6709 (a \\oplus b) \\oplus c = a \\oplus (b \\oplus c) </li> <li>\u5b58\u5728\u52a0\u6cd5\u7684\u5355\u4f4d\u5143 0\uff1a\u5b58\u5728 0 \\in A\uff0c\u4f7f\u5f97 a \\oplus 0 = 0 \\oplus a = a </li> <li>\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff1a\u5bf9\u4e8e\u4efb\u610f a, b \\in A\uff0c\u6709 a \\oplus b = b \\oplus a </li> </ol> </li> <li> <p>(A, \\otimes) \u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff08\\text{monoid}\uff09\uff0c\u5373\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a  </p> <ol> <li>\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u6210\u7acb\uff1a\u5bf9\u4e8e\u4efb\u610f a, b, c \\in A\uff0c\u6709 (a \\otimes b) \\otimes c = a \\otimes (b \\otimes c) </li> <li>\u5b58\u5728\u4e58\u6cd5\u7684\u5355\u4f4d\u5143 1\uff1a\u5b58\u5728 1 \\in A\uff0c\u4f7f\u5f97 a \\otimes 1 = 1 \\otimes a = a </li> </ol> </li> <li> <p>\u52a0\u6cd5\u548c\u4e58\u6cd5\u6ee1\u8db3\u4ee5\u4e0b\u5206\u914d\u5f8b\uff1a  </p> <ol> <li>\u5de6\u5206\u914d\u5f8b\uff1a\u5bf9\u4e8e\u4efb\u610f a, b, c \\in A\uff0c\u6709 a \\otimes (b \\oplus c) = a \\otimes b \\oplus a \\otimes c </li> <li>\u53f3\u5206\u914d\u5f8b\uff1a\u5bf9\u4e8e\u4efb\u610f a, b, c \\in A\uff0c\u6709 (a \\oplus b) \\otimes c = a \\otimes c \\oplus b \\otimes c </li> <li>\u4e58\u6cd5\u5bf9 0 \u7684\u5438\u6536\u6027\uff1a\u5bf9\u4e8e\u4efb\u610f a \\in A\uff0c\u6709 0 \\otimes a = a \\otimes 0 = 0 </li> </ol> </li> </ol> <p>\u6839\u636e\u4e0d\u540c\u7684\u52a0\u6cd5\u548c\u4e58\u6cd5\u5b9a\u4e49\uff0c\u521d\u59cb\u5316\u77e9\u9635\u65f6\uff1a  </p> <ul> <li>\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u52a0\u6cd5 \\oplus \u7684\u96f6\u51430 </li> <li>\u5355\u4f4d\u77e9\u9635\u7684\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u4e58\u6cd5 \\otimes \u7684\u5355\u4f4d\u51431 </li> </ul> <p>\u5bf9\u4e8e\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u4ee3\u6570\u7cfb\u7edf, \u4f7f\u7528\u5bf9\u5e94\u7684\u64cd\u4f5c\u66ff\u4ee3\u77e9\u9635\u4e58\u6cd5\u4e2d\u7684\u52a0\u6cd5\u548c\u4e58\u6cd5\u5373\u53ef\u3002</p> <p>\u5e38\u89c1\u7684\u534a\u73af</p> <ol> <li>A := \\mathbb{R}, \\oplus \u662f\u666e\u901a\u52a0\u6cd5\uff0c\\otimes \u662f\u666e\u901a\u4e58\u6cd5\uff08\u666e\u901a\u7684\u77e9\u9635\u4e58\u6cd5\uff09(1)  </li> <li>A := \\mathbb{R}\uff0c\\oplus \u662f min\uff0c\\otimes \u662f max(2)  </li> <li>A := \\mathbb{N}\uff0c\\oplus \u662f gcd\uff0c\\otimes \u662f lcm(3)   </li> <li>A := \\mathbb{R} \\cup \\{-\\infty\\}\uff0c\\oplus \u662f max\uff0c\\otimes \u662f\u666e\u901a\u52a0\u6cd5  </li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0cA \u662f\u5c0f\u4e8e 2^n \u7684\u975e\u8d1f\u6574\u6570\u96c6\u5408\uff0c\\oplus \u662f\u6309\u4f4d\u903b\u8f91\u6216\uff0c\\otimes \u662f\u6309\u4f4d\u903b\u8f91\u4e0e  </li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0cA \u662f\u5c0f\u4e8e 2^n \u7684\u975e\u8d1f\u6574\u6570\u96c6\u5408\uff0c\\oplus \u662f\u6309\u4f4d\u5f02\u6216\uff0c\\otimes \u662f\u6309\u4f4d\u903b\u8f91\u4e0e  </li> </ol> <p>\u6839\u636e\u52a0\u6cd5 \\oplus \u548c\u4e58\u6cd5 \\otimes \u7684\u5b9a\u4e49\uff0c\u96f6\u5143\u548c\u5355\u4f4d\u5143(4)\u7684\u9009\u62e9\u5982\u4e0b\uff1a  </p>  \\begin{array}{c|c|c|c|c} \\text{\u96c6\u5408 }A &amp; \\text{\u52a0\u6cd5 }\\oplus &amp; \\text{\u96f6\u5143 }0 &amp; \\text{\u4e58\u6cd5 }\\otimes &amp; \\text{\u5355\u4f4d\u5143 }1\\\\ \\hline \\mathbb{R} &amp; \\text{ordinary }+ &amp; 0 &amp; \\text{ordinary }* &amp; 1\\\\ \\mathbb{R} &amp; \\min &amp; +\\infty &amp; \\max &amp; -\\infty\\\\ \\mathbb{R} &amp; \\max &amp; -\\infty &amp; \\min &amp; +\\infty\\\\ \\mathbb{N} &amp; \\gcd &amp; 0 &amp; \\mathrm{lcm} &amp; 1\\\\ \\mathbb{R}\\cup\\{-\\infty\\} &amp; \\max &amp; -\\infty &amp; \\text{ordinary }+ &amp; 0\\\\ \\mathbb{R}\\cup\\{+\\infty\\} &amp; \\min &amp; +\\infty &amp; \\text{ordinary }+ &amp; 0\\\\ \\forall n\\in\\mathbb{N}^+,\\ \\{0,\\dots,2^n-1\\} &amp; \\text{bitwise OR} &amp; 0 &amp; \\text{bitwise AND} &amp; 2^n-1\\\\ \\forall n\\in\\mathbb{N}^+,\\ \\{0,\\dots,2^n-1\\} &amp; \\text{bitwise AND} &amp; 2^n-1 &amp; \\text{bitwise OR} &amp; 0 \\end{array}  <ol> <li>+ \u548c * \u6ee1\u8db3\u7ed3\u5408\u5f8b, \u4e14 * \u5bf9 + \u6709\u5206\u914d\u5f8b</li> <li>min \u548c max \u6ee1\u8db3\u7ed3\u5408\u5f8b, \u4e14 max \u5bf9 min \u6709\u5206\u914d\u5f8b</li> <li>gcd \u548c lcm \u6ee1\u8db3\u7ed3\u5408\u5f8b, \u4e14 lcm \u5bf9 gcd \u6709\u5206\u914d\u5f8b</li> <li> <p>\u96f6\u5143\u548c\u5355\u4f4d\u5143</p> <ul> <li>\u5bf9\u4e8e (+, *)\uff1a(A, +) \u96f6\u5143\u4e3a 0\uff0c(A, *) \u5355\u4f4d\u5143\u4e3a 1 (1)  </li> <li>\u5bf9\u4e8e (min, max)\uff1a(A, min) \u96f6\u5143\u4e3a +\\infty\uff0c(A, max) \u5355\u4f4d\u5143\u4e3a -\\infty (2)</li> </ul> <ol> <li>a + 0 = a, a * 1 = a</li> <li>min(a, +\\infty) = a, max(a, -\\infty) = a</li> </ol> </li> </ol> <p>min-max \u77e9\u9635\u5feb\u901f\u5e42</p> <p>\u8bbe\u6709\u4e24\u4e2a\u77e9\u9635 A, B \\in \\mathbb{R}^{m \\times n}, \u5b9a\u4e49\u77e9\u9635\u4e58\u6cd5\u4e3a C = A * B, C \\in \\mathbb{R}^{m \\times n}, \u5176\u4e2d c[i][j] = min\\{max\\left(a[i][k], b[k][j]\\right), k \\in [1, n]\\}\u3002 \u5219\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u77e9\u9635\u5feb\u901f\u5e42\u65b9\u6cd5\u8ba1\u7b97 C^n\u3002 \u4ee3\u7801\u5b9e\u73b0\u4e0e\u4e0a\u8ff0\u7c7b\u4f3c, \u53ea\u9700\u66ff\u6362\u4e58\u6cd5\u548c\u52a0\u6cd5\u4e3a\u5bf9\u5e94\u7684 min \u548c max \u64cd\u4f5c\u5373\u53ef\u3002 \u8be5\u65b9\u6cd5\u4e00\u822c\u7528\u4e8e\u6c42\u89e3\u6700\u5c0f\u5316\u6700\u5927\u8fb9\u6743\u95ee\u9898\uff08\\text{bottleneck / minimax}\uff09\u3002</p> Good Vertices <p>\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5305\u542b N \u4e2a\u9876\u70b9\uff0c\u7f16\u53f7\u4e3a 1, 2, \\dots, N\u3002 \u521d\u59cb\u65f6\u523b t = 0\uff0c\u56fe\u4e2d\u6ca1\u6709\u4efb\u4f55\u8fb9\u3002\u5728\u6bcf\u4e2a\u65f6\u523b t = 1, 2, \\dots, T\uff0c\u6dfb\u52a0\u4e00\u6761\u6709\u5411\u8fb9\uff1a\u4ece\u9876\u70b9 u_t \u5230\u9876\u70b9 v_t\uff08\u53ef\u80fd\u662f\u81ea\u73af\uff0c\u5373 u_t = v_t\uff09\u3002 \u5982\u679c\u4ece\u9876\u70b9 1 \u51fa\u53d1\uff0c\u7ecf\u8fc7\u6070\u597d L \u6761\u8fb9\u53ef\u4ee5\u5230\u8fbe\u9876\u70b9 i\uff0c\u5219\u79f0\u9876\u70b9 i \u662f Good \u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u9876\u70b9 i = 1, 2, \\dots, N\uff1a\u8f93\u51fa\u4f7f\u9876\u70b9 i \u6210\u4e3a Good \u7684\u6700\u65e9\u65f6\u523b t\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u65f6\u523b\uff0c\u8f93\u51fa -1\u3002  </p> Hint <p>\u5c06\u65f6\u95f4 t \u770b\u4f5c\u8fb9\u6743\uff0c\u8fb9\u6743\u4e3a t \u7684\u8fb9\u8868\u793a\u5728\u65f6\u523b t \u6dfb\u52a0\u7684\u8fb9\u3002</p> <p>\u76ee\u6807\u662f\u627e\u5230\u4ece\u9876\u70b9 1 \u51fa\u53d1\uff0c\u7ecf\u8fc7\u6070\u597d L \u8fb9\u6743\u5230\u8fbe\u9876\u70b9 i \u7684\u8def\u5f84\u4e2d\uff0c\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u77e9\u9635\u4e58\u6cd5\uff0c\u5b9a\u4e49\u4e3a \"\u6700\u5c0f\u5316\u6700\u5927\u503c\"\nvector&lt;vector&lt;int64_t&gt;&gt; multiply(const vector&lt;vector&lt;int64_t&gt;&gt; &amp;a,\n                                 const vector&lt;vector&lt;int64_t&gt;&gt; &amp;b) {\n  int n = a.size();\n  vector&lt;vector&lt;int64_t&gt;&gt; c(n, vector&lt;int64_t&gt;(n, INT64_MAX));\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; n; ++j) {\n      for (int k = 0; k &lt; n; ++k) { c[i][j] = min(c[i][j], max(a[i][k], b[k][j])); }\n    }\n  }\n  return c;\n}\n\n// \u77e9\u9635\u5feb\u901f\u5e42\nvector&lt;vector&lt;int64_t&gt;&gt; pow(vector&lt;vector&lt;int64_t&gt;&gt; base, int64_t exp) {\n  int n = base.size();\n  // \u96f6\u5143\u77e9\u9635: min(a, INT64_MAX) = a\n  vector&lt;vector&lt;int64_t&gt;&gt; result(n, vector&lt;int64_t&gt;(n, INT64_MAX));\n  for (int i = 0; i &lt; n; ++i) {\n    result[i][i] = INT64_MIN;  // \u5355\u4f4d\u5143: max(a, INT64_MIN) = a\n  }\n  while (exp &gt; 0) {\n    if ((exp &amp; 1) != 0) { result = multiply(result, base); }\n    base   = multiply(base, base);\n    exp  &gt;&gt;= 1;\n  }\n  return result;\n}\n\nint main() {\n  int n, t, l;\n  cin &gt;&gt; n &gt;&gt; t &gt;&gt; l;\n  vector&lt;vector&lt;int64_t&gt;&gt; g(n, vector&lt;int64_t&gt;(n, INT64_MAX));\n  for (int i = 1; i &lt;= t; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    --u, --v;\n    g[u][v] = i;\n  }\n  // dp[i][j]: \u4ece 0 \u8d70\u5230 j, \u6070\u597d\u8d70 i \u6b65\u7684\u8def\u5f84\u4e2d, \u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n  // dp[i][j] = min{ max(dp[i-1][k], g[k][j]) | k = 0..n-1 }\n  // \u77e9\u9635\u4e58\u6cd5\u5b9a\u4e49\u4e3a: c[i][j] = min{ max(a[i][k], b[k][j]) | k = 0..n-1 }\n  // dp[i] = dp[i-1] * g\n  // dp[l] = dp[0] * g^l = I * g^l = g^l\n  // \u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97 g^l \u5373\u53ef\n  vector&lt;vector&lt;int64_t&gt;&gt; result = pow(g, l);\n  for (int i = 0; i &lt; n; ++i) {\n    if (result[0][i] == INT64_MAX) {\n      cout &lt;&lt; \"-1 \";\n    } else {\n      cout &lt;&lt; result[0][i] &lt;&lt; \" \";\n    }\n  }\n  cout &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <ol> <li> <p>AtCoder ABC236 G - Good Vertices Editorial \u21a9</p> </li> </ol>","tags":["Math","\u5feb\u901f\u5e42","Quick Power","\u77e9\u9635\u5feb\u901f\u5e42","Matrix Quick Power"]},{"location":"code/algorithm/Math/Repetend/","title":"\u5faa\u73af\u8282","text":"","tags":["Math","\u5faa\u73af\u8282","\u5faa\u73af\u5c0f\u6570","reptend"]},{"location":"code/algorithm/Math/Repetend/#\u5faa\u73af\u8282","title":"\u5faa\u73af\u8282","text":"","tags":["Math","\u5faa\u73af\u8282","\u5faa\u73af\u5c0f\u6570","reptend"]},{"location":"code/algorithm/Math/Repetend/#\u5206\u6570\u7684\u5faa\u73af\u8282","title":"\u5206\u6570\u7684\u5faa\u73af\u8282","text":"<p>\u5faa\u73af\u8282\uff08\\text{Repetend}\uff09\u662f\u6307\u5728\u5faa\u73af\u5c0f\u6570\u4e2d\uff0c\u91cd\u590d\u51fa\u73b0\u7684\u6570\u5b57\u5e8f\u5217\u3002\u5faa\u73af\u8282\u901a\u5e38\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u8868\u793a\u3002  </p> <p>Example</p> <p>\u5728\u5c0f\u6570 0.333... \u4e2d\uff0c\u6570\u5b57 3 \u662f\u5faa\u73af\u8282\uff0c\u56e0\u4e3a\u5b83\u65e0\u9650\u91cd\u590d\u3002 \u5728\u5c0f\u6570 0.142857142857... \u4e2d\uff0c\u6570\u5b57 142857 \u662f\u5faa\u73af\u8282\u3002  </p> \u6c42\u5faa\u73af\u8282 <p>\u6c42\u5206\u6570 \\frac{a}{n} \u7684\u5faa\u73af\u8282\u3002  </p> C++<pre><code>#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; repetend(int a, int n) {  // a\u4e3a\u5206\u5b50, n\u4e3a\u5206\u6bcd\n  vector&lt;int&gt; digits;                 // \u5b58\u50a8\u5c0f\u6570\u90e8\u5206\u7684\u6bcf\u4e00\u4f4d\n  // \u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u6bcf\u4e2a\u4f59\u6570\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n  // key: \u4f59\u6570, value: \u8be5\u4f59\u6570\u5bf9\u5e94\u7684\u5c0f\u6570\u90e8\u5206\u7684\u7d22\u5f15\u4f4d\u7f6e\n  unordered_map&lt;int, int&gt; pos;\n  int r   = a % n;  // \u521d\u59cb\u4f59\u6570\n  int idx = 0;\n  while (r != 0 &amp;&amp; !pos.contains(r)) {\n    pos[r]  = idx++;\n    r      *= 10;\n    digits.push_back(r / n);  // \u5546\u7684\u90e8\u5206\u4f5c\u4e3a\u5c0f\u6570\u7684\u4e00\u4f4d\n    r %= n;                   // \u66f4\u65b0\u4f59\u6570\n  }\n  // \u6ca1\u6709\u5faa\u73af\u8282\n  if (r == 0) { return {}; }\n  return {digits.begin() + pos[r], digits.end()};\n}\n</code></pre> \u5206\u6570\u5230\u5c0f\u6570 <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5206\u6570\u7684\u5206\u5b50 numerator \u548c\u5206\u6bcd denominator\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u5c0f\u6570\u3002</p> <p>\u5982\u679c\u5c0f\u6570\u90e8\u5206\u4e3a\u5faa\u73af\u5c0f\u6570\uff0c\u5219\u5c06\u5faa\u73af\u7684\u90e8\u5206\u62ec\u5728\u62ec\u53f7\u5185\u3002</p> C++<pre><code>#include &lt;string&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  string fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0) { return \"0\"; }\n    string res;\n    // \u5224\u65ad\u7b26\u53f7\n    if ((numerator &lt; 0) ^ (denominator &lt; 0)) { res += '-'; }\n    // \u8f6c\u4e3a\u6b63\u6570\uff0c\u9632\u6b62\u6ea2\u51fa\n    int64_t n = abs(static_cast&lt;int64_t&gt;(numerator));\n    int64_t d = abs(static_cast&lt;int64_t&gt;(denominator));\n    // \u6574\u6570\u90e8\u5206\n    res       += to_string(n / d);\n    int64_t r  = n % d;\n    if (r == 0) { return res; }  // \u65e0\u5c0f\u6570\u90e8\u5206\n    res += '.';\n    unordered_map&lt;int64_t, int&gt; mp;  // \u8bb0\u5f55\u4f59\u6570\u53ca\u5176\u5bf9\u5e94\u7684\u4f4d\u7f6e\n    while (r != 0) {\n      if (mp.count(r) != 0U) {  // \u51fa\u73b0\u5faa\u73af\n        res.insert(mp[r], \"(\");\n        res += ')';\n        break;\n      }\n      mp[r]  = res.size();\n      r     *= 10;\n      res   += to_string(r / d);\n      r     %= d;\n    }\n    return res;\n  }\n};\n</code></pre>","tags":["Math","\u5faa\u73af\u8282","\u5faa\u73af\u5c0f\u6570","reptend"]},{"location":"code/algorithm/Math/Repetend/#\u5206\u6570\u7684\u5faa\u73af\u8282\u957f\u5ea6","title":"\u5206\u6570\u7684\u5faa\u73af\u8282\u957f\u5ea6","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u65e2\u7ea6\u5206\u6570 \\frac{a}{b} \uff0c\u5982\u679c\u5b83\u7684\u5341\u8fdb\u5236\u8868\u793a\u662f\u5faa\u73af\u5c0f\u6570\uff0c\u90a3\u4e48\u5b83\u7684\u5faa\u73af\u8282\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u786e\u5b9a\uff1a</p> <ol> <li>\u627e\u5230 b \u7684\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u8bb0\u4f5c b = 2^x \\cdot 5^y \\cdot p_1^{k_1} \\cdot p_2^{k_2} \\cdots p_m^{k_m}\uff0c\u5176\u4e2d p_i \u662f\u4e0d\u7b49\u4e8e 2 \u548c 5 \u7684\u8d28\u6570</li> <li>\u53bb\u6389 b \u4e2d\u6240\u6709\u7684 2 \u548c 5 \u7684\u56e0\u5b50\uff0c\u5f97\u5230 b' = p_1^{k_1} \\cdot p_2^{k_2} \\cdots p_m^{k_m}</li> <li>\u5982\u679c b' \u4e3a 1\uff0c\u5219 \\frac{a}{b} \u662f\u6709\u9650\u5c0f\u6570\uff0c\u6ca1\u6709\u5faa\u73af\u8282\uff0c\u5faa\u73af\u8282\u957f\u5ea6\u4e3a 0</li> <li>\u5426\u5219\uff0c\u5faa\u73af\u8282\u957f\u5ea6 k \u662f\u6ee1\u8db3 10^k \\equiv 1 \\mod b' \u7684\u6700\u5c0f\u6b63\u6574\u6570 k\uff0c\u4e5f\u5373 10 \u5728\u6a21 b' \u4e0b\u7684\u6700\u5c0f\u6b63\u6574\u6570\u9636</li> </ol> <p>\u8bc1\u660e</p> <p>\u4f59\u6570\u5faa\u73af\u7b49\u4ef7\u4e8e (r * 10^k) \\bmod b' = r\uff0c\u56e0 b' \u4e0e 10 \u4e92\u8d28\uff0c\u7b49\u4ef7\u4e8e 10^k \\equiv 1 \\mod b'\u3002</p> <p>Tip</p> <p>\u6570\u5faa\u73af\u8282\u7684\u672c\u8d28\uff1a\u6a21\u62df\u9664\u6cd5\u65f6\u4f59\u6570\u4f1a\u91cd\u590d\uff0c\u5bfc\u81f4\u5c0f\u6570\u90e8\u5206\u5faa\u73af\u3002 \u5206\u5b50 a \u53ea\u5f71\u54cd\u5c0f\u6570\u5185\u5bb9\uff0c\u4e0d\u5f71\u54cd\u5faa\u73af\u8282\u957f\u5ea6\uff0c\u5faa\u73af\u8282\u957f\u5ea6\u53ea\u7531\u5206\u6bcd b \u51b3\u5b9a\u3002  </p> <p>\u5982\u4f55\u6c42 k</p> <p>\u7531\u4e8e b' \u4e0e 10 \u4e92\u8d28\uff0c10^k - 1 \u7684\u56e0\u5b50\u4e2d\u4e0d\u5305\u542b 2 \u548c 5\uff0c\u56e0\u6b64 10^k \\equiv 1 \\pmod{b'} \u7684\u6700\u5c0f\u6b63\u6574\u6570 k\uff08\u5373 10 \u5728\u6a21 b' \u4e0b\u7684\u6700\u5c0f\u6b63\u6574\u6570\u9636\uff09\u5fc5\u5b9a\u662f b' \u7684\u4e00\u4e2a\u56e0\u5b50\u3002</p> <p>\u6839\u636e\u6570\u8bba\uff0c\u6a21 b' \u7684\u4e58\u6cd5\u7fa4\u7684\u9636\u4e3a \\varphi(b')\uff0c\u800c 10 \u7684\u9636 k \u5fc5\u5b9a\u662f \\varphi(b') \u7684\u4e00\u4e2a\u6b63\u56e0\u5b50\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u679a\u4e3e \\varphi(b') \u7684\u6240\u6709\u6b63\u56e0\u5b50 d\uff0c\u627e\u5230\u6700\u5c0f\u6ee1\u8db3 10^d \\equiv 1 \\pmod{b'} \u7684 d\uff0c\u5373\u53ef\u786e\u5b9a\u5faa\u73af\u8282\u957f\u5ea6 k\u3002</p> \u5faa\u73af\u8282 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u6c42 \\frac{1}{n} \u7684\u5faa\u73af\u8282\u957f\u5ea6\u3002  </p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// \u8ba1\u7b97 x^n % mod\nint64_t pow(int64_t x, int64_t n, int64_t mod = 1'000'000'007) {\n  int64_t res  = 1;\n  int64_t base = x % mod;\n  while (n &gt; 0) {\n    if ((n &amp; 1) != 0) { res = (res * base) % mod; }\n    base   = (base * base) % mod;\n    n    &gt;&gt;= 1;\n  }\n  return res;\n}\n\n// \u8ba1\u7b97\u6b27\u62c9\u51fd\u6570 \u03c6(n)\nint64_t phi(int64_t n) {\n  int64_t result = n;\n  for (int64_t i = 2; i * i &lt;= n; i++) {\n    if (n % i == 0) {                 // i \u662f n \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\n      while (n % i == 0) { n /= i; }  // \u53bb\u6389\u6240\u6709 i \u56e0\u5b50, \u4fdd\u8bc1\u6bcf\u4e2a\u8d28\u56e0\u5b50\u53ea\u5904\u7406\u4e00\u6b21\n      result -= result / i;           // \u5e94\u7528\u516c\u5f0f result *= (1 - 1/i)\n    }\n  }\n  if (n &gt; 1) { result -= result / n; }  // \u8fd8\u6709\u4e00\u4e2a\u5927\u4e8e sqrt(n) \u7684\u8d28\u56e0\u5b50\n  return result;\n}\n\nvoid solve() {\n  int64_t n;\n  cin &gt;&gt; n;\n  while (n % 2 == 0) { n /= 2; }\n  while (n % 5 == 0) { n /= 5; }\n\n  if (n == 1) {\n    cout &lt;&lt; 1 &lt;&lt; '\\n';\n    return;\n  }\n\n  int64_t euler_phi = phi(n);\n  vector&lt;int64_t&gt; divisors;  // euler_phi\u7684\u6240\u6709\u7ea6\u6570\n  for (int64_t i = 1; i * i &lt;= euler_phi; ++i) {\n    if (euler_phi % i == 0) {\n      divisors.push_back(i);\n      if (i * i != euler_phi) { divisors.push_back(euler_phi / i); }\n    }\n  }\n  sort(divisors.begin(), divisors.end());\n\n  for (int64_t d : divisors) {\n    if (pow(10, d, n) == 1) {  // 10^d \u2261 1 (mod n)\n      cout &lt;&lt; d &lt;&lt; '\\n';\n      return;\n    }\n  }\n}\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre> <p>\u6c42\u4efb\u610f\u8fdb\u5236\uff08b \u8fdb\u5236\uff09\u4e0b\u5206\u6570 \\frac{a}{n} \u7684\u5c0f\u6570\u5faa\u73af\u8282\u957f\u5ea6</p> <p>\u8bbe b \u548c n \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a g\uff0c\u5219 n \u53ef\u4ee5\u8868\u793a\u4e3a n = g * n'\uff0c\u5176\u4e2d n' \u4e0e b \u4e92\u8d28\u3002 \u5728 b \u8fdb\u5236\u4e0b\uff0c\u5206\u6bcd n \u4e2d\u6240\u6709\u4e0e b \u5171\u4eab\u7684\u8d28\u56e0\u5b50\uff08\u5373 b \u7684\u8d28\u56e0\u5b50\uff09\u53ea\u5f71\u54cd\u6709\u9650\u5c0f\u6570\u90e8\u5206\uff0c\u4e0d\u5f71\u54cd\u5faa\u73af\u8282\u3002 \u5219 \\frac{a}{n} \u7684\u5faa\u73af\u8282\u957f\u5ea6\u7b49\u4e8e \\frac{a}{n'} \u7684\u5faa\u73af\u8282\u957f\u5ea6\u3002 \u5faa\u73af\u8282\u957f\u5ea6 k \u662f\u6ee1\u8db3 b^k \\equiv 1 \\mod n' \u7684\u6700\u5c0f\u6b63\u6574\u6570 k\u3002  </p>","tags":["Math","\u5faa\u73af\u8282","\u5faa\u73af\u5c0f\u6570","reptend"]},{"location":"code/algorithm/Math/Repetend/#\u5b57\u7b26\u4e32\u5faa\u73af\u8282","title":"\u5b57\u7b26\u4e32\u5faa\u73af\u8282","text":"<p>\u89c1 KMP \u7b97\u6cd5\u3002</p>","tags":["Math","\u5faa\u73af\u8282","\u5faa\u73af\u5c0f\u6570","reptend"]},{"location":"code/algorithm/PDS/DSU/","title":"\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6","text":"","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Disjoint Set Union"]},{"location":"code/algorithm/PDS/DSU/#\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6","title":"\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6","text":"<p>\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff08\\text{Persistent Disjoint Set Union}\uff09\u662f\u4e00\u79cd\u652f\u6301\u7248\u672c\u63a7\u5236\u7684\u5e76\u67e5\u96c6\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5141\u8bb8\u5728\u5408\u5e76\u96c6\u5408\u65f6\uff0c\u4fdd\u7559\u4e4b\u524d\u7248\u672c\u7684\u72b6\u6001\uff0c\u4ece\u800c\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u3002</p> <p>\u5728\u666e\u901a\u5e76\u67e5\u96c6\u4e2d\uff0c\u5e38\u5e38\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u6309\u79e9\u5408\u5e76\u6765\u4f18\u5316\u67e5\u8be2\u548c\u5408\u5e76\u64cd\u4f5c\u3002\u800c\u5728\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u4e2d\uff0c\u4e3a\u4e86\u5b9e\u73b0\u7248\u672c\u63a7\u5236\uff0c\u9700\u8981\u5728\u6bcf\u6b21\u5408\u5e76\u64cd\u4f5c\u65f6\uff0c\u514b\u9686\u53d7\u5f71\u54cd\u7684\u8282\u70b9\uff0c\u672a\u88ab\u4fee\u6539\u7684\u8282\u70b9\u53ef\u4ee5\u5171\u4eab\u3002\u56e0\u6b64\u5e38\u5e38\u53ea\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u6765\u7b80\u5316\u5b9e\u73b0\u3002</p> \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6 <p>\u7ed9\u5b9a N \u4e2a\u5143\u7d20\uff0c\u521d\u59cb\u65f6\u6bcf\u4e2a\u5143\u7d20\u5404\u81ea\u4e3a\u4e00\u4e2a\u96c6\u5408\u3002\u73b0\u5728\u6709 M \u4e2a\u64cd\u4f5c\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\u7c7b\u578b\uff1a</p> <ol> <li>\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u4e3a\u4e00\u4e2a\u96c6\u5408\u3002</li> <li>\u56de\u6eda\u64cd\u4f5c\uff1a\u5c06\u5f53\u524d\u7248\u672c\u56de\u6eda\u5230\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u3002</li> <li>\u67e5\u8be2\u64cd\u4f5c\uff1a\u67e5\u8be2\u67d0\u4e2a\u7248\u672c\u4e2d\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002</li> </ol> <p>\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u7248\u672c\u53f7\u4ece 1 \u5f00\u59cb\u9012\u589e\u3002</p> <p></p>C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;   // \u5de6\u5b50\u8282\u70b9\u7f16\u53f7\n  int64_t right;  // \u53f3\u5b50\u8282\u70b9\u7f16\u53f7\n  int64_t root;   // \u7236\u8282\u70b9\u7f16\u53f7\n  int64_t size;   // \u96c6\u5408\u5927\u5c0f\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_dsu {\n  explicit p_dsu() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  int64_t build(int64_t left, int64_t right) {\n    int64_t i = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});\n    if (left == right) {\n      nodes[i].root = left;  // \u521d\u59cb\u65f6\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u662f\u81ea\u5df1\n      nodes[i].size = 1;     // \u521d\u59cb\u65f6\u6bcf\u4e2a\u96c6\u5408\u5927\u5c0f\u4e3a1\n      return i;\n    }\n    int64_t mid    = left + ((right - left) / 2);\n    nodes[i].left  = build(left, mid);\n    nodes[i].right = build(mid + 1, right);\n    return i;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u66f4\u65b0\u67d0\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u4e0b\u6807\u7684\u7236\u8282\u70b9\u6216\u96c6\u5408\u5927\u5c0f\n  int64_t update(int64_t q_i, int64_t q_v, bool q_root, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {                 // \u53f6\u5b50\u8282\u70b9\n      if (q_root) {\n        nodes[new_node].root = q_v;  // \u66f4\u65b0\u7236\u8282\u70b9\n      } else {\n        nodes[new_node].size = q_v;  // \u66f4\u65b0\u96c6\u5408\u5927\u5c0f\n      }\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (q_i &lt;= mid) {\n      nodes[new_node].left = update(q_i, q_v, q_root, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(q_i, q_v, q_root, nodes[i].right, mid + 1, r);\n    }\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u67d0\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u4e0b\u6807\u7684\u7236\u8282\u70b9\u6216\u96c6\u5408\u5927\u5c0f\n  int64_t query(int64_t q_i, bool q_root, int64_t i, int64_t l, int64_t r) {\n    if (l == r) { return q_root ? nodes[i].root : nodes[i].size; }\n    int64_t mid = l + ((r - l) / 2);\n    if (q_i &lt;= mid) { return query(q_i, q_root, nodes[i].left, l, mid); }\n    return query(q_i, q_root, nodes[i].right, mid + 1, r);\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  nodes.reserve(40 * n);  // \u9884\u5206\u914d\u8282\u70b9\u7a7a\u95f4\n  p_dsu dsu;\n\n  auto find = [&amp;](int64_t x, int64_t root) {\n    int64_t fx = dsu.query(x, true, root, 1, n);\n    while (fx != x) {\n      x  = fx;\n      fx = dsu.query(x, true, root, 1, n);\n    }\n    return fx;\n  };\n\n  auto union_set = [&amp;](int64_t x, int64_t y, int64_t root_v) {\n    int64_t fx = find(x, root_v);\n    int64_t fy = find(y, root_v);\n    if (fx == fy) { return root_v; };  // \u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408\u4e2d\n    int64_t root_u = 0;                // \u65b0\u7248\u672c\u6839\u8282\u70b9 (1)\n    int64_t size_x = dsu.query(fx, false, root_v, 1, n);\n    int64_t size_y = dsu.query(fy, false, root_v, 1, n);\n    if (size_x &lt; size_y) {\n      swap(fx, fy);\n      swap(size_x, size_y);\n    }\n    // \u5c06fy\u7684\u7236\u8282\u70b9\u8bbe\u4e3afx\n    root_u = dsu.update(fy, fx, true, root_v, 1, n);\n    // \u66f4\u65b0fx\u7684\u96c6\u5408\u5927\u5c0f\n    root_u = dsu.update(fx, size_x + size_y, false, root_u, 1, n);\n    return root_u;\n  };\n\n  vector&lt;int64_t&gt; root(m + 1);  // \u7248\u672c\u8bb0\u5f55\n  root[0] = dsu.build(1, n);    // \u521d\u59cb\u7248\u672c\n\n  for (int64_t v = 1; v &lt;= m; ++v) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {  // \u5408\u5e76\u64cd\u4f5c\n      int64_t x, y;\n      cin &gt;&gt; x &gt;&gt; y;\n      root[v] = union_set(x, y, root[v - 1]);  // \u5408\u5e76\u64cd\u4f5c, \u66f4\u65b0\u5f53\u524d\u7248\u672c\n    } else if (op == 2) {\n      int64_t x;\n      cin &gt;&gt; x;\n      root[v] = root[x];  // \u56de\u6eda\u5230\u67d0\u4e2a\u7248\u672c\n    } else {\n      int64_t x, y;\n      cin &gt;&gt; x &gt;&gt; y;\n      int64_t fx = find(x, root[v - 1]);\n      int64_t fy = find(y, root[v - 1]);\n      if (fx == fy) {\n        cout &lt;&lt; \"1\\n\";\n      } else {\n        cout &lt;&lt; \"0\\n\";\n      }\n      root[v] = root[v - 1];  // \u9ed8\u8ba4\u7ee7\u627f\u4e0a\u4e00\u4e2a\u7248\u672c\n    }\n  }\n\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u5982\u679c\u5c06u\u548cv\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5219\u9700\u8981\u66f4\u65b0 v \u7684\u7236\u8282\u70b9\u4e3a u\uff0c\u5e76\u4e14\u66f4\u65b0 u \u7684\u79e9\uff0c\u603b\u5171\u4e24\u6b21\u66f4\u65b0\u64cd\u4f5c\uff0c\u56e0\u6b64\u9700\u8981\u514b\u9686\u4e24\u6b21\u8282\u70b9\u3002\u5c06\u4e24\u6b21\u64cd\u4f5c\u7ed3\u675f\u540e\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\u8fd4\u56de\u3002</li> </ol>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Disjoint Set Union"]},{"location":"code/algorithm/PDS/SegmentTree/","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811","text":"","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/SegmentTree/#\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811","text":"<p>\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u652f\u6301\u7248\u672c\u7ba1\u7406\u7684\u7ebf\u6bb5\u6811\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u5728\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u4fdd\u7559\u4e4b\u524d\u7684\u7248\u672c\uff0c\u4ece\u800c\u53ef\u4ee5\u968f\u65f6\u8bbf\u95ee\u548c\u67e5\u8be2\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u3002\u6bcf\u6b21\u66f4\u65b0\u64cd\u4f5c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u800c\u65e7\u7248\u672c\u7684\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002</p>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/SegmentTree/#\u53ef\u6301\u4e45\u5316\u6570\u7ec4","title":"\u53ef\u6301\u4e45\u5316\u6570\u7ec4","text":"<p>\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4\uff0c\u652f\u6301\u5982\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u3002</li> <li>\u8bbf\u95ee\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u7684\u67d0\u4e00\u4f4d\u7f6e\u7684\u503c\u3002</li> </ol> <p>\u6b64\u5916\uff0c\u6bcf\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002\u7248\u672c\u7f16\u53f7\u5373\u4e3a\u5f53\u524d\u64cd\u4f5c\u7684\u7f16\u53f7\uff08\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff0c\u7248\u672c 0 \u8868\u793a\u521d\u59cb\u72b6\u6001\u6570\u7ec4\uff09\u3002</p> <p>\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7b49\u6570\u636e\u7ed3\u6784\u3002</p> \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff09 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;   // \u5de6\u5b50\u8282\u70b9\u7f16\u53f7\n  int64_t right;  // \u53f3\u5b50\u8282\u70b9\u7f16\u53f7\n  int64_t value;  // \u53f6\u5b50\u8282\u70b9\u5b58\u50a8\u503c, \u975e\u53f6\u5b50\u8282\u70b9\u53ef\u4e0d\u5b58\u50a8\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_array {\n  explicit p_array() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  int64_t build(int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    int64_t i = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\n      nodes[i].value = nums[left];\n      return i;\n    }\n    int64_t mid    = left + ((right - left) / 2);\n    nodes[i].left  = build(left, mid, nums);\n    nodes[i].right = build(mid + 1, right, nums);\n    return i;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u4fee\u6539\u8282\u70b9\u7684\u503c, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  // update(x, val, root, 1, n) \u8868\u793a\u5c06\u7248\u672cv\u4e2d\u4e0b\u6807x\u7684\u503c\u4fee\u6539\u4e3aval, root\u4e3a\u7248\u672cv\u7684\u6839\u8282\u70b9\n  int64_t update(int64_t index, int64_t val, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {                 // \u53f6\u5b50\u8282\u70b9\n      nodes[new_node].value = val;\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (index &lt;= mid) {\n      nodes[new_node].left = update(index, val, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(index, val, nodes[i].right, mid + 1, r);\n    }\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u67d0\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u4e0b\u6807\u7684\u503c\n  // query(x, root, 1, n) \u8868\u793a\u67e5\u8be2\u7248\u672cv\u4e2d\u4e0b\u6807x\u7684\u503c, root\u4e3a\u7248\u672cv\u7684\u6839\u8282\u70b9\n  int64_t query(int64_t index, int64_t i, int64_t l, int64_t r) {\n    if (l == r) { return nodes[i].value; }\n    int64_t mid = l + ((r - l) / 2);\n    if (index &lt;= mid) { return query(index, nodes[i].left, l, mid); }\n    return query(index, nodes[i].right, mid + 1, r);\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  nodes.reserve(70 * n + 20 * m);  // \u7ecf\u9a8c\u503c\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  p_array tree;\n\n  vector&lt;int64_t&gt; root(m + 1);\n  root[0] = tree.build(1, n, nums);  // \u6784\u5efa\u521d\u59cb\u7248\u672c0\n\n  int64_t v, op;\n  for (int64_t i = 1; i &lt;= m; i++) {\n    cin &gt;&gt; v &gt;&gt; op;\n    if (op == 1) {  // \u4fee\u6539\n      int64_t p, c;\n      cin &gt;&gt; p &gt;&gt; c;\n      root[i] = tree.update(p, c, root[v], 1, n);\n    } else if (op == 2) {  // \u67e5\u8be2\n      int64_t p;\n      cin &gt;&gt; p;\n      cout &lt;&lt; tree.query(p, root[v], 1, n) &lt;&lt; \"\\n\";\n      root[i] = root[v];  // \u65b0\u7248\u672c\u548c\u65e7\u7248\u672c\u76f8\u540c\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/SegmentTree/#\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811","title":"\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811","text":"<p>\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u533a\u95f4\u7b2c k \u5c0f\u6570\u3001\u533a\u95f4\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u7b49\u95ee\u9898\u3002</p> \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2 <p>Hint</p> <ol> <li>\u901a\u8fc7\u79bb\u6563\u5316\u5c06\u5143\u7d20\u503c\u6620\u5c04\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u8303\u56f4\u5185\uff0c\u65b9\u4fbf\u5728\u7ebf\u6bb5\u6811\u4e2d\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u6784\u5efa\u4e00\u4e2a\u521d\u59cb\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u8868\u793a\u7a7a\u6570\u7ec4\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u57fa\u4e8e\u524d\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u66f4\u65b0\u8be5\u5143\u7d20\u6240\u5728\u4f4d\u7f6e\u7684\u503c\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002</li> <li>\u67e5\u8be2\u65f6\uff0c\u5229\u7528\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff08\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u5bf9\u5e94\u7684\u7248\u672c\uff09\u8fdb\u884c\u5dee\u5206\uff0c\u8ba1\u7b97\u51fa\u533a\u95f4\u5185\u6bcf\u4e2a\u5b50\u533a\u95f4\u7684\u5143\u7d20\u6570\u91cf\uff0c\u4ece\u800c\u5b9a\u4f4d\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002</li> </ol> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;\n  int64_t right;\n  int64_t size;  // \u8bb0\u5f55\u8be5\u8282\u70b9\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u5143\u7d20\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_segment_tree {\n  p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u51fa\u73b0\u6b21\u6570\n  void push_up(int64_t i) {\n    nodes[i].size = nodes[nodes[i].left].size + nodes[nodes[i].right].size;\n  }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811, \u8fd4\u56de\u6839\u8282\u70b9\u7f16\u53f7\n  int64_t build(int64_t left, int64_t right) {\n    int64_t i = nodes.size();    // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});  // \u521b\u5efa\u65b0\u8282\u70b9\n    if (left == right) {         // \u53f6\u5b50\u8282\u70b9\n      nodes[i].size = 0;         // \u521d\u59cb\u5316\u4e3a0\n      return i;\n    }\n    int64_t mid    = left + ((right - left) / 2);\n    nodes[i].left  = build(left, mid);\n    nodes[i].right = build(mid + 1, right);\n    push_up(i);\n    return i;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u4fee\u6539\u8282\u70b9\u7684\u503c, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  int64_t update(int64_t index, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {\n      nodes[new_node].size += 1;\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (index &lt;= mid) {\n      nodes[new_node].left = update(index, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(index, nodes[i].right, mid + 1, r);\n    }\n    push_up(new_node);\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u7b2ck\u5c0f\u5143\u7d20, root_u\u4e3a\u7248\u672cu\u7684\u6839\u8282\u70b9, root_v\u4e3a\u7248\u672cv\u7684\u6839\u8282\u70b9\n  int64_t query(int64_t k, int64_t root_u, int64_t root_v, int64_t l, int64_t r) {\n    if (l == r) { return l; }\n    int64_t mid = l + ((r - l) / 2);\n    // \u8ba1\u7b97\u5de6\u5b50\u6811\u4e2d\u5143\u7d20\u7684\u6570\u91cf\n    int64_t left_count = nodes[nodes[root_v].left].size - nodes[nodes[root_u].left].size;\n    // \u5982\u679ck\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u4e2d\u7684\u5143\u7d20\u6570\u91cf, \u5219\u7b2ck\u5c0f\u5143\u7d20\u5728\u5de6\u5b50\u6811\u4e2d, \u5426\u5219\u5728\u53f3\u5b50\u6811\u4e2d\n    if (k &lt;= left_count) { return query(k, nodes[root_u].left, nodes[root_v].left, l, mid); }\n    return query(k - left_count, nodes[root_u].right, nodes[root_v].right, mid + 1, r);\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  nodes.reserve(70 * n + 20 * m);  // \u7ecf\u9a8c\u503c\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  vector&lt;int64_t&gt; sorted_nums = nums;\n  sort(sorted_nums.begin() + 1, sorted_nums.end());\n\n  vector&lt;int64_t&gt; roots(n + 1);\n  p_segment_tree seg;\n  roots[0]      = seg.build(1, n);  // \u6784\u5efa\u521d\u59cb\u7248\u672c0\n\n  auto get_rank = [&amp;](int64_t x) {  // \u79bb\u6563\u5316, \u6620\u5c04\u52301~n\n    return lower_bound(sorted_nums.begin() + 1, sorted_nums.end(), x) - sorted_nums.begin();\n  };\n  for (int64_t i = 1; i &lt;= n; i++) {\n    int64_t index = get_rank(nums[i]);  // \u83b7\u5f97nums[i]\u7684\u6392\u540d\n    roots[i]      = seg.update(index, roots[i - 1], 1, n);\n  }\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t l, r, k;\n    cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n    int64_t index = seg.query(k, roots[l - 1], roots[r], 1, n);\n    cout &lt;&lt; sorted_nums[index] &lt;&lt; \"\\n\";  // \u6620\u5c04\u56de\u539f\u503c\n  }\n  return 0;\n}\n</code></pre> Buratsuta 3 <p>\u67e5\u8be2\u533a\u95f4\u5185\u6240\u6709\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e00\uff08\\lfloor \\frac{r - l + 1}{3} \\rfloor\uff09\u7684\u5143\u7d20\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;\n  int64_t right;\n  int64_t size;  // \u8bb0\u5f55\u8be5\u8282\u70b9\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u5143\u7d20\n};\n\nvector&lt;node&gt; nodes;\n\nstruct p_segment_tree {\n  explicit p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u51fa\u73b0\u6b21\u6570\n  void push_up(int64_t i) {\n    nodes[i].size = nodes[nodes[i].left].size + nodes[nodes[i].right].size;\n  }\n\n  // \u6784\u5efa0\u53f7\u7248\u672c\u7684\u7ebf\u6bb5\u6811, \u6ca1\u6709\u4efb\u4f55\u5143\u7d20\n  int64_t build(int64_t left, int64_t right) {\n    int64_t i = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});\n    if (left == right) { return i; }\n    int64_t mid    = left + ((right - left) / 2);\n    nodes[i].left  = build(left, mid);\n    nodes[i].right = build(mid + 1, right);\n    push_up(i);\n    return i;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u8bb0\u5f55\u503c\u51fa\u73b0\u4e00\u6b21, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  int64_t update(int64_t index, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {                 // \u53f6\u5b50\u8282\u70b9\n      nodes[new_node].size += 1;  // \u8be5\u8282\u70b9\u51fa\u73b0\u6b21\u6570\u52a01\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (index &lt;= mid) {\n      nodes[new_node].left = update(index, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(index, nodes[i].right, mid + 1, r);\n    }\n    push_up(new_node);\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u51fa\u73b0\u6b21\u6570\u5927\u4e8ek\u7684\u5143\u7d20\n  void query(int64_t k, int64_t root_u, int64_t root_v, int64_t l, int64_t r,\n             vector&lt;int64_t&gt; &amp;ans) {\n    if (nodes[root_v].size - nodes[root_u].size &lt;= k) { return; }  // \u533a\u95f4\u5185\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7k\n    if (l == r) {                                                  // \u53f6\u5b50\u8282\u70b9, \u51fa\u73b0\u6b21\u6570\u5927\u4e8ek\n      ans.push_back(l);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    query(k, nodes[root_u].left, nodes[root_v].left, l, mid, ans);\n    query(k, nodes[root_u].right, nodes[root_v].right, mid + 1, r, ans);\n  }\n};\n\nint solve() {\n  int64_t n, q;\n  cin &gt;&gt; n &gt;&gt; q;\n  nodes.reserve(n * 40);  // \u9884\u5206\u914d\u7a7a\u95f4\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  vector&lt;int64_t&gt; sorted_nums = nums;\n  sort(sorted_nums.begin() + 1, sorted_nums.end());\n\n  auto get_rank = [&amp;](int64_t v) {  // \u83b7\u53d6\u503c\u7684\u6392\u540d, \u4ece1\u5f00\u59cb\n    return lower_bound(sorted_nums.begin() + 1, sorted_nums.end(), v) - sorted_nums.begin();\n  };\n\n  vector&lt;int64_t&gt; roots(n + 1);\n  p_segment_tree seg_tree;\n  roots[0] = seg_tree.build(1, n);\n  for (int64_t i = 1; i &lt;= n; i++) {  // \u6784\u5efa\u6bcf\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811, \u8bb0\u5f55\u524di\u4e2a\u5143\u7d20\n    int64_t rank = get_rank(nums[i]);\n    roots[i]     = seg_tree.update(rank, roots[i - 1], 1, n);\n  }\n  for (int64_t i = 0; i &lt; q; i++) {\n    int64_t l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    int64_t k = (r - l + 1) / 3;\n    vector&lt;int64_t&gt; ans;\n    seg_tree.query(k, roots[l - 1], roots[r], 1, n, ans);\n    for (int64_t x : ans) { cout &lt;&lt; sorted_nums[x] &lt;&lt; \" \"; }\n    if (ans.empty()) { cout &lt;&lt; \"-1\"; }\n    cout &lt;&lt; \"\\n\";\n  }\n\n  return 0;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t t = 1;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/SegmentTree/#\u6807\u8bb0\u6c38\u4e45\u5316","title":"\u6807\u8bb0\u6c38\u4e45\u5316","text":"<p>\u6807\u8bb0\u6c38\u4e45\u5316\u901a\u8fc7\u5c06\u66f4\u65b0\u64cd\u4f5c\u7684\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u53ef\u4ee5\u907f\u514d\u5728\u67e5\u8be2\u65f6\u8fdb\u884c\u590d\u6742\u7684\u6807\u8bb0\u4f20\u64ad\uff0c\u4ece\u800c\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u3002</p> \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct tag_p_tree {\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; tag_add;  // \u52a0\u6cd5\u6807\u8bb0\n\n  explicit tag_p_tree(int64_t n) : sum(n * 4), tag_add(n * 4) {}\n\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u521d\u59cb\u5316\u4e3a\u6570\u7ec4\u4e2d\u5bf9\u5e94\u503c\n      sum[i] = nums[left];\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums);\n    build(2 * i + 1, mid + 1, right, nums);\n    // \u6839\u636e\u5b50\u6811\u66f4\u65b0\n    sum[i] = sum[2 * i] + sum[2 * i + 1];\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    sum[i] += val * (min(qr, r) - max(ql, l) + 1);\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      tag_add[i] += val;\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t added, int64_t i, int64_t l, int64_t r) {\n    // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i] + added * (r - l + 1); }\n    int64_t mid = l + ((r - l) / 2);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, added + tag_add[i], 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, added + tag_add[i], 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  tag_p_tree seg(n);\n  seg.build(1, 1, n, nums);\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t op;\n    cin &gt;&gt; op;\n    if (op == 1) {\n      int64_t l, r, val;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n      seg.range_add(l, r, val, 1, 1, n);\n    } else {\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; seg.range_sum(l, r, 0, 1, 1, n) &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/SegmentTree/#\u8303\u56f4\u4fee\u6539\u53ef\u6301\u4e45","title":"\u8303\u56f4\u4fee\u6539\u53ef\u6301\u4e45","text":"<p>\u8303\u56f4\u4fee\u6539\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u7ed3\u5408\u4e86\u53ef\u6301\u4e45\u5316\u548c\u8303\u56f4\u66f4\u65b0\u7684\u7ebf\u6bb5\u6811\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u5728\u8fdb\u884c\u8303\u56f4\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u4fdd\u7559\u4e4b\u524d\u7684\u7248\u672c\uff0c\u4ece\u800c\u53ef\u4ee5\u968f\u65f6\u8bbf\u95ee\u548c\u67e5\u8be2\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u3002\u6bcf\u6b21\u66f4\u65b0\u64cd\u4f5c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u800c\u65e7\u7248\u672c\u7684\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002</p> TTM - To the moon \u514b\u9686\u6807\u8bb0\u6807\u8bb0\u6c38\u4e45\u5316 C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;\n  int64_t right;\n  int64_t sum;      // \u533a\u95f4\u548c\n  int64_t tag_add;  // \u61d2\u60f0\u6807\u8bb0\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_segment_tree {\n  p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  static void push_up(int64_t root) {\n    nodes[root].sum = nodes[nodes[root].left].sum + nodes[nodes[root].right].sum;\n  }\n\n  // \u6784\u5efa0\u7248\u672c\u7ebf\u6bb5\u6811, \u8fd4\u56de\u6839\u8282\u70b9\u7f16\u53f7\n  int64_t build(int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    int64_t i = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});   // \u521b\u5efa\u65b0\u8282\u70b9\n    if (left == right) {          // \u53f6\u5b50\u8282\u70b9\n      nodes[i].sum = nums[left];\n      return i;\n    }\n    int64_t mid       = left + ((right - left) / 2);\n    nodes[i].left  = build(left, mid, nums);\n    nodes[i].right = build(mid + 1, right, nums);\n    // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u548c\n    push_up(i);\n    return i;\n  }\n\n  static void lazy_add(int64_t i, int64_t val, int64_t count) {\n    nodes[i].sum     += count * val;\n    nodes[i].tag_add += val;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u60f0\u6807\u8bb0\n  static void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (nodes[i].tag_add != 0) {               // \u5904\u7406\u52a0\u6cd5\n      nodes[i].left  = clone(nodes[i].left);   // \u514b\u9686\u5de6\u5b50\u8282\u70b9\n      nodes[i].right = clone(nodes[i].right);  // \u514b\u9686\u53f3\u5b50\u8282\u70b9\n      // \u5b50\u8282\u70b9\u5404\u81ea\u52a0\u4e0a\u66f4\u65b0\u503c\n      lazy_add(nodes[i].left, nodes[i].tag_add, left_count);\n      lazy_add(nodes[i].right, nodes[i].tag_add, right_count);\n      nodes[i].tag_add = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  int64_t range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node = clone(i);\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6\n      lazy_add(new_node, val, r - l + 1);\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(new_node, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { nodes[new_node].left = range_add(ql, qr, val, nodes[new_node].left, l, mid); }\n    if (qr &gt; mid) {\n      nodes[new_node].right = range_add(ql, qr, val, nodes[new_node].right, mid + 1, r);\n    }\n    push_up(new_node);\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return nodes[i].sum; }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, nodes[i].left, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, nodes[i].right, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  nodes.reserve(70 * n + 20 * m);  // \u7ecf\u9a8c\u503c\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  p_segment_tree tree;\n\n  vector&lt;int64_t&gt; roots(m + 1);  // \u5404\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\n  roots[0]  = tree.build(1, n, nums);\n  int64_t t = 0;\n  for (int64_t i = 0; i &lt; m; i++) {\n    string op;\n    cin &gt;&gt; op;\n    if (op == \"C\") {\n      int64_t l, r, val;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n      int64_t new_root = tree.range_add(l, r, val, roots[t], 1, n);\n      roots[++t]       = new_root;\n    } else if (op == \"Q\") {\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; tree.range_sum(l, r, roots[t], 1, n) &lt;&lt; \"\\n\";\n    } else if (op == \"H\") {\n      int64_t l, r, version;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; version;\n      cout &lt;&lt; tree.range_sum(l, r, roots[version], 1, n) &lt;&lt; \"\\n\";\n    } else {  // op == \"B\"\n      int64_t version;\n      cin &gt;&gt; version;\n      t = version;\n    }\n  }\n  return 0;\n}\n</code></pre> <p>Tip</p> <p>\u901a\u8fc7\u6807\u8bb0\u6c38\u4e45\u5316\u53ef\u4ee5\u51cf\u5c11\u8303\u56f4\u4fee\u6539\u53ef\u6301\u4e45\u7ebf\u6bb5\u6811\u7684\u5360\u7528\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6bcf\u6b21\u66f4\u65b0\u53ea\u9700\u8981\u514b\u9686\u53d7\u5f71\u54cd\u7684\u8282\u70b9\uff0c\u800c\u4e0d\u9700\u8981\u514b\u9686\u6574\u4e2a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\uff0c\u4ece\u800c\u8282\u7701\u4e86\u7a7a\u95f4\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int64_t left;\n  int64_t right;\n  int64_t sum;      // \u533a\u95f4\u548c\n  int64_t tag_add;  // \u61d2\u60f0\u6807\u8bb0\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct tag_p_segment_tree {\n  tag_p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  // \u6784\u5efa0\u7248\u672c\u7ebf\u6bb5\u6811, \u8fd4\u56de\u6839\u8282\u70b9\u7f16\u53f7\n  int64_t build(int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums) {\n    int64_t root = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(node{});   // \u521b\u5efa\u65b0\u8282\u70b9\n    if (left == right) {          // \u53f6\u5b50\u8282\u70b9\n      nodes[root].sum = nums[left];\n      return root;\n    }\n    int64_t mid       = left + ((right - left) / 2);\n    nodes[root].left  = build(left, mid, nums);\n    nodes[root].right = build(mid + 1, right, nums);\n    nodes[root].sum   = nodes[nodes[root].left].sum + nodes[nodes[root].right].sum;\n    return root;\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_root = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.push_back(nodes[i]);        // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_root;\n  }\n\n  int64_t range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    int64_t new_node     = clone(i);\n    nodes[new_node].sum += val * (min(qr, r) - max(ql, l) + 1);\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6\n      nodes[new_node].tag_add += val;\n      return new_node;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    if (ql &lt;= mid) { nodes[new_node].left = range_add(ql, qr, val, nodes[new_node].left, l, mid); }\n    if (qr &gt; mid) {\n      nodes[new_node].right = range_add(ql, qr, val, nodes[new_node].right, mid + 1, r);\n    }\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u533a\u95f4\u548c, total_add\u4e3a\u4ece\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u61d2\u60f0\u6807\u8bb0\u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t added, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return nodes[i].sum + added * (r - l + 1); }\n    int64_t mid = l + ((r - l) / 2);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) {\n      res += range_sum(ql, qr, added + nodes[i].tag_add, nodes[i].left, l, mid);\n    }\n    if (qr &gt; mid) {\n      res += range_sum(ql, qr, added + nodes[i].tag_add, nodes[i].right, mid + 1, r);\n    }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  nodes.reserve(70 * n + 20 * m);  // \u7ecf\u9a8c\u503c\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n  tag_p_segment_tree tree;\n\n  vector&lt;int64_t&gt; roots(m + 1);  // \u5404\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\n  roots[0]  = tree.build(1, n, nums);\n  int64_t t = 0;\n  for (int64_t i = 0; i &lt; m; i++) {\n    string op;\n    cin &gt;&gt; op;\n    if (op == \"C\") {\n      int64_t l, r, val;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n      int64_t new_root = tree.range_add(l, r, val, roots[t], 1, n);\n      roots[++t]       = new_root;\n    } else if (op == \"Q\") {\n      int64_t l, r;\n      cin &gt;&gt; l &gt;&gt; r;\n      cout &lt;&lt; tree.range_sum(l, r, 0, roots[t], 1, n) &lt;&lt; \"\\n\";\n    } else if (op == \"H\") {\n      int64_t l, r, version;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; version;\n      cout &lt;&lt; tree.range_sum(l, r, 0, roots[version], 1, n) &lt;&lt; \"\\n\";\n    } else {  // op == \"B\"\n      int64_t version;\n      cin &gt;&gt; version;\n      t = version;\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Segment Tree"]},{"location":"code/algorithm/PDS/Trie/","title":"\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811","text":"","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Trie"]},{"location":"code/algorithm/PDS/Trie/#\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811","title":"\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811","text":"<p>\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811\uff08\\text{Persistent Trie}\uff09\u662f\u4e00\u79cd\u652f\u6301\u7248\u672c\u63a7\u5236\u7684\u5b57\u5178\u6811\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5141\u8bb8\u5728\u63d2\u5165\u6216\u5220\u9664\u5b57\u7b26\u4e32\u65f6\uff0c\u4fdd\u7559\u4e4b\u524d\u7248\u672c\u7684\u72b6\u6001\uff0c\u4ece\u800c\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u3002</p>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Trie"]},{"location":"code/algorithm/PDS/Trie/#\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811\u7684\u5b9e\u73b0","title":"\u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811\u7684\u5b9e\u73b0","text":"<p>\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u63d2\u5165\u6216\u5220\u9664\u5b57\u7b26\u4e32\u65f6\uff0c\u53ea\u9700\u514b\u9686\u53d7\u5f71\u54cd\u7684\u8282\u70b9\uff0c\u4ece\u800c\u5b9e\u73b0\u7248\u672c\u7684\u6301\u4e45\u5316\u3002\u672a\u88ab\u4fee\u6539\u7684\u8282\u70b9\u53ef\u4ee5\u5171\u4eab\u3002</p> \u5b57\u7b26\u4e32\u6811 <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 N \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6807\u7b7e\u3002\u73b0\u5728\u6709 Q \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u7ed9\u51fa\u4e24\u4e2a\u8282\u70b9 u \u548c v \u4ee5\u53ca\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u8981\u6c42\u8ba1\u7b97\u4ece\u8282\u70b9 u \u5230\u8282\u70b9 v \u7684\u8def\u5f84\u4e0a\uff0c\u6807\u7b7e\u4e2d\u4ee5\u5b57\u7b26\u4e32 s \u4f5c\u4e3a\u524d\u7f00\u7684\u8fb9\u7684\u6570\u91cf\u3002</p> Hint <p>\u67e5\u8be2\u4ece\u6839\u8282\u70b9\u5230\u8282\u70b9 u \u548c\u8282\u70b9 v \u7684\u8def\u5f84\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u7684\u6570\u91cf\uff0c\u7136\u540e\u51cf\u53bb\u4ece\u6839\u8282\u70b9\u5230\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9 lca(u, v) \u7684\u8def\u5f84\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u7684\u6570\u91cf\u7684\u4e24\u500d\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;array&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  array&lt;int, 26&gt; children;\n  int pass;\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_trie {\n  p_trie() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  static int clone(int i) {\n    int new_node = nodes.size();   // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u63d2\u5165\u4e00\u4e2a\u6570\u5b57, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  static int insert(const string &amp;s, int i) {\n    int new_node          = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    nodes[new_node].pass += 1;\n    for (int j = 0, last = new_node; j &lt; s.size(); ++j) {\n      int index                    = s[j] - 'a';\n      i                            = nodes[last].children[index];\n      int new_child                = clone(i);\n      nodes[new_child].pass       += 1;\n      nodes[last].children[index]  = new_child;\n      last                         = new_child;\n    }\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\n  static int query(const string &amp;s, int i) {\n    for (char ch : s) {\n      int index = ch - 'a';\n      i         = nodes[i].children[index];\n      if (i == 0) { return 0; }\n    }\n    return nodes[i].pass;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  map&lt;pair&lt;int, int&gt;, string&gt; edge_labels;\n\n  for (int i = 1; i &lt; n; ++i) {\n    int u, v;\n    string label;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; label;\n    tree[u].emplace_back(v);\n    tree[v].emplace_back(u);\n    edge_labels[{min(u, v), max(u, v)}] = label;\n  }\n  // \u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811\n  p_trie trie;\n  vector&lt;int&gt; roots(n + 1);\n  // \u6784\u5efa\u500d\u589e\u6570\u7ec4\u548c\u6df1\u5ea6\u6570\u7ec4\n  int m = 32 - __builtin_clz(n + 1);\n  vector&lt;vector&lt;int&gt;&gt; st(n + 1, vector&lt;int&gt;(m, -1));\n  vector&lt;int&gt; depth(n + 1);\n\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    st[x][0] = from;\n    for (int y : tree[x]) {\n      if (y != from) {\n        string &amp;label = edge_labels[{min(x, y), max(x, y)}];\n        roots[y]      = p_trie::insert(label, roots[x]);\n        depth[y]      = depth[x] + 1;\n        self(self, y, x);\n      }\n    }\n  };\n  dfs(dfs, 1, -1);\n  for (int j = 1; j &lt; m; ++j) {\n    for (int i = 1; i &lt;= n; ++i) {\n      if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n    }\n  }\n  // LCA\u76f8\u5173\u64cd\u4f5c\n  auto get_kth_ancestor = [&amp;](int node, int k) -&gt; int {\n    for (; (k != 0) &amp;&amp; (node != -1); k &amp;= k - 1) { node = st[node][__builtin_ctz(k)]; }\n    return node;\n  };\n  auto get_lca = [&amp;](int x, int y) -&gt; int {\n    if (depth[x] &gt; depth[y]) { swap(x, y); }\n    y = get_kth_ancestor(y, depth[y] - depth[x]);\n    if (y == x) { return x; }\n    for (int i = m - 1; i &gt;= 0; --i) {\n      int px = st[x][i];\n      int py = st[y][i];\n      if (px != py) {\n        x = px;\n        y = py;\n      }\n    }\n    return st[x][0];\n  };\n\n  int q;\n  cin &gt;&gt; q;\n  for (int i = 0; i &lt; q; ++i) {\n    int u, v;\n    string s;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;\n    int lca          = get_lca(u, v);\n    int count_in_v   = p_trie::query(s, roots[v]);\n    int count_in_u   = p_trie::query(s, roots[u]);\n    int count_in_lca = p_trie::query(s, roots[lca]);\n    cout &lt;&lt; count_in_v + count_in_u - count_in_lca * 2 &lt;&lt; \"\\n\";\n  }\n\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Trie"]},{"location":"code/algorithm/PDS/Trie/#\u53ef\u6301\u4e45\u53160-1\u5b57\u5178\u6811","title":"\u53ef\u6301\u4e45\u53160-1\u5b57\u5178\u6811","text":"<p>\u53ef\u6301\u4e45\u5316 \\text{0-1} \u5b57\u5178\u6811\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b57\u5178\u6811\uff0c\u4e3b\u8981\u7528\u4e8e\u5b58\u50a8\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff08\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff09\u3002\u5b83\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u548c\u67e5\u8be2\u64cd\u4f5c\uff0c\u540c\u65f6\u4fdd\u7559\u5386\u53f2\u7248\u672c\u7684\u4fe1\u606f\u3002</p> \u6700\u5927\u5f02\u6216\u548c <p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6570\u7ec4 a\uff0c\u521d\u59cb\u957f\u5ea6\u4e3a N\u3002\u6709 M \u4e2a\u64cd\u4f5c\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7c7b\u578b\uff1a</p> <ol> <li>\u6dfb\u52a0\u64cd\u4f5c\uff1a\u8868\u793a\u5728\u5e8f\u5217\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570 x\uff0c\u5e8f\u5217\u7684\u957f\u5ea6 N \u52a0 1\u3002</li> <li>\u8be2\u95ee\u64cd\u4f5c\uff1a\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e p\uff0c\u6ee1\u8db3 l \\leq p \\leq r\uff0c\u4f7f\u5f97\uff1aa[p] \\oplus a[p+1] \\oplus \\dots \\oplus a[N] \\oplus x \u6700\u5927\uff0c\u8f93\u51fa\u6700\u5927\u503c\u3002</li> </ol> Hint <p>\u5b9a\u4e49\u524d\u7f00\u5f02\u6216\u6570\u7ec4 eor[i] = a[1] \\oplus a[2] \\oplus ... \\oplus a[i]\uff0c\u90a3\u4e48</p>  a[p] \\oplus a[p+1] \\oplus ... \\oplus a[N] = eor[p-1] \\oplus eor[N]  <p>\u56e0\u6b64\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5728\u533a\u95f4 [l-1, r-1] \u5185\u5bfb\u627e\u4e00\u4e2a eor[i]\uff0c\u4f7f\u5f97 eor[i] \\oplus eor[N] \\oplus x \u6700\u5927\u3002</p> <p>\u4f7f\u7528\u53ef\u6301\u4e45\u5316 \\text{0-1} \u5b57\u5178\u6811\u5b58\u50a8\u524d\u7f00\u5f02\u6216\u6570\u7ec4 eor \u7684\u5404\u4e2a\u7248\u672c\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5229\u7528\u7248\u672c\u53f7\u6765\u9650\u5b9a\u67e5\u8be2\u7684\u8303\u56f4\u3002\u533a\u95f4 [l-1, r-1] \u5bf9\u5e94\u7684\u7248\u672c\u53f7\u4e3a roots[l-2] \u548c roots[r-1]\u3002</p> <p>Tip</p> <p>\u6ce8\u610f\u533a\u5206\u7a7a\u7248\u672c\u548c 0 \u7248\u672c\u7684\u533a\u522b\uff0c\u7a7a\u7248\u672c\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u6570\u63d2\u5165\uff0c\u800c 0 \u7248\u672c\u8868\u793a\u63d2\u5165\u4e86\u6570 0\u3002</p> C++<pre><code>#include &lt;array&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  array&lt;int64_t, 2&gt; children;\n  int64_t pass;\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_trie {\n  const int64_t BIT = 32;  // \u5047\u8bbe\u6570\u5b57\u4e0d\u8d85\u8fc732\u4f4d\n\n  p_trie() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  static int64_t clone(int64_t i) {\n    int64_t new_node = nodes.size();  // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);     // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u63d2\u5165\u4e00\u4e2a\u6570\u5b57, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  int64_t insert(int64_t num, int64_t i) const {\n    int64_t new_node      = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    nodes[new_node].pass += 1;\n    for (int64_t bit = BIT - 1, last = new_node; bit &gt;= 0; --bit) {\n      int64_t current_bit                = (num &gt;&gt; bit) &amp; 1;\n      i                                  = nodes[last].children[current_bit];\n      int64_t new_child                  = clone(i);\n      nodes[new_child].pass             += 1;\n      nodes[last].children[current_bit]  = new_child;\n      last                               = new_child;\n    }\n    return new_node;\n  }\n\n  // root_u\u4e3a\u7248\u672cu\u7684\u6839\u8282\u70b9, root_v\u4e3a\u7248\u672cv\u7684\u6839\u8282\u70b9\n  int64_t query(int64_t num, int64_t root_u, int64_t root_v) const {\n    int64_t result = 0;\n    for (int64_t bit = BIT - 1; bit &gt;= 0; --bit) {\n      int64_t current_bit = (num &gt;&gt; bit) &amp; 1;\n      int64_t desired_bit = current_bit ^ 1;  // \u5e0c\u671b\u8d70\u8fd9\u6761\u8def\n      int64_t count_in_v  = nodes[nodes[root_v].children[desired_bit]].pass;\n      int64_t count_in_u  = nodes[nodes[root_u].children[desired_bit]].pass;\n      if (count_in_v - count_in_u &gt; 0) {  // \u8bf4\u660e\u5728u-v\u533a\u95f4\u5185\u5b58\u5728\u8fd9\u6761\u8def\n        result += (1LL &lt;&lt; bit);\n        root_u  = nodes[root_u].children[desired_bit];\n        root_v  = nodes[root_v].children[desired_bit];\n      } else {  // \u53ea\u80fd\u8d70\u53e6\u4e00\u6761\u8def\n        root_u = nodes[root_u].children[current_bit];\n        root_v = nodes[root_v].children[current_bit];\n      }\n    }\n    return result;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  p_trie trie;\n  vector&lt;int64_t&gt; roots(n + 1);\n\n  int64_t eor = 0;\n  // \u7a7a\u7248\u672c\u7684\u6839\u8282\u70b9\u7f16\u53f7\u4e3a0\n  // \u6784\u5efa0\u7248\u672c\n  roots[0] = trie.insert(eor, 0);\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    int64_t num;\n    cin &gt;&gt; num;\n    eor      ^= num;\n    roots[i]  = trie.insert(eor, roots[i - 1]);\n  }\n\n  for (int64_t i = 0; i &lt; m; ++i) {\n    char op;\n    cin &gt;&gt; op;\n    if (op == 'A') {\n      int64_t num;\n      cin &gt;&gt; num;\n      eor ^= num;\n      roots.push_back(trie.insert(eor, roots.back()));\n    } else if (op == 'Q') {\n      int64_t l, r, x;\n      cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;\n      cout &lt;&lt; (trie.query(eor ^ x, l == 1 ? 0 : roots[l - 2], roots[r - 1])) &lt;&lt; \"\\n\";\n    }\n  }\n  return 0;\n}\n</code></pre>","tags":["Persistent Data Structure","\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784","Persistent Trie"]},{"location":"code/algorithm/String/StringMatch/","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":"","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#\u5b57\u7b26\u4e32\u5339\u914d","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":"<p>\u5b57\u7b26\u4e32\u5339\u914d\u5728\u4e00\u4e2a\u8f83\u5927\u7684\u6587\u672c\u5b57\u7b26\u4e32\uff08\\text{text}\uff09\u4e2d\u67e5\u627e\u4e00\u4e2a\u6216\u591a\u4e2a\u8f83\u5c0f\u7684\u6a21\u5f0f\u5b57\u7b26\u4e32\uff08\\text{pattern}\uff09\u3002\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\u5305\u62ec \\text{KMP} \u7b97\u6cd5\u3001\\text{Manacher} \u7b97\u6cd5\u3001\u6269\u5c55 \\text{KMP} \u7b97\u6cd5\u548c \\text{AC} \u81ea\u52a8\u673a\u7b49\u3002</p>","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#kmp","title":"KMP","text":"<p>\\text{KMP}\uff08\\text{Knuth-Morris-Pratt}\uff09\u7b97\u6cd5\u901a\u8fc7\u9884\u5904\u7406\u6a21\u5f0f\u5b57\u7b26\u4e32\u6765\u52a0\u901f\u5339\u914d\u8fc7\u7a0b\u3002</p> <p>\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u5df2\u7ecf\u5339\u914d\u7684\u90e8\u5206\u4fe1\u606f\uff0c\u907f\u514d\u91cd\u590d\u6bd4\u8f83\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2a next \u6570\u7ec4\uff0cnext[i] \u8868\u793a\u6a21\u5f0f\u5b57\u7b26\u4e32\u4e2d\u4ee5\u4f4d\u7f6e i \u7ed3\u5c3e\u7684\u5b50\u4e32\u7684\u6700\u957f\u76f8\u7b49\u771f\u524d\u540e\u7f00(1)\u7684\u957f\u5ea6\u3002</p> <ol> <li>\u771f\u524d\u7f00\uff1a\u4e0d\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff08\u5373 i \u4f4d\u7f6e\uff09\uff1b\u771f\u540e\u7f00\uff1a\u4e0d\u5305\u542b\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08\u5373 0 \u4f4d\u7f6e\uff09    \u663e\u7136\uff0c\u4f4d\u7f6e 0 \u5904\u7684\u5b57\u7b26\u6ca1\u6709\u771f\u524d\u540e\u7f00\uff0cnext[0] = 0\u3002</li> </ol> <p>\u8ba1\u7b97 next \u6570\u7ec4\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316 next[0] = 0\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6ca1\u6709\u771f\u524d\u540e\u7f00</li> <li>\u4f7f\u7528\u4e24\u4e2a\u6307\u9488 i \u548c j\uff0c\u5176\u4e2d i \u904d\u5386\u6a21\u5f0f\u5b57\u7b26\u4e32\uff0cj \u8bb0\u5f55\u5f53\u524d\u5339\u914d\u7684\u524d\u7f00\u957f\u5ea6</li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e i\uff0c\u5982\u679c pattern[i] == pattern[j]\uff0c\u5219 next[i] = j + 1(1)\uff0c\u5e76\u5c06 j \u589e\u52a0 1</p> <ol> <li>\u66f4\u65b0\u524d j \u8868\u793a pattern[i-1] \u7684\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u957f\u5ea6\uff0c\u8bf4\u660e pattern[0 \\ldots j-1] \u548c pattern[i-j \\ldots i-1] \u76f8\u7b49\u3002    \u5f53 pattern[i] \u7b49\u4e8e pattern[j] \u65f6\uff0cpattern[0 \\ldots j] \u548c pattern[i-j \\ldots i] \u4e5f\u76f8\u7b49\uff0c\u56e0\u6b64\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u957f\u5ea6\u4e3a j+1\u3002</li> </ol> </li> <li> <p>\u5982\u679c\u4e0d\u5339\u914d\u4e14 j &gt; 0\uff0c\u5219\u5c06 j \u56de\u9000\u5230 next[j - 1](1)\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u5339\u914d</p> <ol> <li>\u4e3a\u4e86\u627e\u5230\u4e0b\u4e00\u4e2a\u53ef\u80fd\u7684\u5339\u914d\u4f4d\u7f6e\uff0c\u5c06 j \u56de\u9000\u5230 next[j - 1]\uff0c\u5373\u524d\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u957f\u5ea6\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u5339\u914d\u3002</li> </ol> </li> <li> <p>\u5982\u679c j == 0 \u4e14\u4e0d\u5339\u914d\uff0c\u5219 next[i] = 0</p> </li> </ol> \u8ba1\u7b97 next \u6570\u7ec4 C++<pre><code>vector&lt;int&gt; get_next(const string &amp;pattern) {\n  vector&lt;int&gt; next(pattern.length());\n  // j \u8868\u793a\u5f53\u524d\u5339\u914d\u7684\u524d\u7f00\u957f\u5ea6\n  for (int i = 1, j = 0; i &lt; pattern.length(); ++i) {\n    while (j &gt; 0 &amp;&amp; pattern[i] != pattern[j]) { j = next[j - 1]; }\n    if (pattern[i] == pattern[j]) { ++j; }\n    next[i] = j;\n  }\n  return next;\n}\n</code></pre> <p>\u4f7f\u7528 next \u6570\u7ec4\u8fdb\u884c\u5b57\u7b26\u4e32\u5339\u914d\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u8ba1\u7b97 next \u6570\u7ec4</li> <li>\u904d\u5386\u6587\u672c\u5b57\u7b26\u4e32 text\uff0c\u4f7f\u7528 next \u6570\u7ec4\u8fdb\u884c\u5339\u914d</li> <li>\u5982\u679c text[i] == pattern[j]\uff0c\u5219\u540c\u65f6\u589e\u52a0 i \u548c j</li> <li>\u5982\u679c\u4e0d\u5339\u914d\u4e14 j &gt; 0\uff0c\u5219\u5c06 j \u56de\u9000\u5230 next[j - 1]</li> <li>\u5982\u679c j == 0 \u4e14\u4e0d\u5339\u914d\uff0c\u5219\u4ec5\u589e\u52a0 i</li> <li>\u5982\u679c j \u8fbe\u5230\u6a21\u5f0f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u8868\u793a\u627e\u5230\u4e00\u4e2a\u5339\u914d\u4f4d\u7f6e\u3002\u5982\u679c\u5141\u8bb8\u91cd\u53e0\u5339\u914d\uff0c\u5c06 j \u56de\u9000\u5230 next[j - 1]\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5339\u914d\u4f4d\u7f6e\uff1b\u5982\u679c\u4e0d\u5141\u8bb8\u91cd\u53e0\u5339\u914d\uff0c\u5c06 j \u7f6e\u4e3a 0\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5339\u914d\u4f4d\u7f6e\u3002</li> </ol> \\text{KMP} \u4e3b\u51fd\u6570 C++<pre><code>int kmp_search(const string &amp;text, const string &amp;pattern) {\n  vector&lt;int&gt; next = get_next(pattern);\n  vector&lt;int&gt; positions;  // \u8bb0\u5f55\u5339\u914d\u4f4d\u7f6e\n  // i \u8868\u793a text \u7684\u5339\u914d\u4f4d\u7f6e, j \u8868\u793a pattern \u7684\u5339\u914d\u4f4d\u7f6e\n  for (int i = 0, j = 0; i &lt; text.length(); i++) {\n    while (j &gt; 0 &amp;&amp; pattern[j] != text[i]) {  // \u6ca1\u6709\u5339\u914d\u5219\u56de\u9000, \u91cd\u65b0\u5c1d\u8bd5\u5339\u914d\n      j = next[j - 1];  // \u56de\u9000\u5230\u4e0b\u4e00\u4e2a\u53ef\u80fd\u5339\u914d\u7684\u4f4d\u7f6e, \u6b64\u65f6 [0,j-1] \u5df2\u7ecf\u5339\u914d\u6210\u529f\n    }\n    // \u5339\u914d\u6210\u529f, \u5c1d\u8bd5\u5339\u914d\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    if (text[i] == pattern[j]) { ++j; }\n    // \u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u4e32, \u56de\u9000\u5230\u4e0b\u4e00\u4e2a\u53ef\u80fd\u5339\u914d\u7684\u4f4d\u7f6e\n    if (j == pattern.length()) {\n      positions.push_back(i - j + 1);\n      j = next[j - 1];  // \u5982\u679c\u4e0d\u5141\u8bb8\u91cd\u53e0 \u5c06j\u7f6e\u4e3a0\n    }\n  }\n  return positions.size(); // \u8fd4\u56de\u5339\u914d\u6b21\u6570\n}\n</code></pre> \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807 C++<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n  vector&lt;int&gt; get_next(const string &amp;pattern) {\n    vector&lt;int&gt; next(pattern.length());\n    // j \u8868\u793a\u5f53\u524d\u5339\u914d\u7684\u524d\u7f00\u957f\u5ea6\n    for (int i = 1, j = 0; i &lt; pattern.length(); ++i) {\n      while (j &gt; 0 &amp;&amp; pattern[i] != pattern[j]) { j = next[j - 1]; }\n      if (pattern[i] == pattern[j]) { ++j; }\n      next[i] = j;\n    }\n    return next;\n  }\n\n public:\n  int strStr(string text, string pattern) {\n    if (pattern.empty()) { return 0; }\n    vector&lt;int&gt; next = get_next(pattern);\n    // i \u8868\u793a text \u7684\u5339\u914d\u4f4d\u7f6e, j \u8868\u793a pattern \u7684\u5339\u914d\u4f4d\u7f6e\n    for (int i = 0, j = 0; i &lt; text.length(); i++) {\n      while (j &gt; 0 &amp;&amp; pattern[j] != text[i]) {  // \u6ca1\u6709\u5339\u914d\u5219\u56de\u9000, \u91cd\u65b0\u5c1d\u8bd5\u5339\u914d\n        j = next[j - 1];  // \u56de\u9000\u5230\u4e0b\u4e00\u4e2a\u53ef\u80fd\u5339\u914d\u7684\u4f4d\u7f6e, \u6b64\u65f6 [0,j-1] \u5df2\u7ecf\u5339\u914d\u6210\u529f\n      }\n      // \u5339\u914d\u6210\u529f, \u5c1d\u8bd5\u5339\u914d\u4e0b\u4e00\u4e2a\u5b57\u7b26\n      if (text[i] == pattern[j]) { ++j; }\n      // \u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u4e32\n      if (j == pattern.length()) {\n        return i - j + 1;  // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u4f4d\u7f6e\n      }\n    }\n    return -1;  // \u5982\u679c\u6ca1\u6709\u5339\u914d, \u8fd4\u56de -1\n  }\n};\n</code></pre> \u6700\u77ed\u56de\u6587\u4e32 <p>\u82e5\u5b57\u7b26\u4e32 s \u7684\u6700\u957f\u56de\u6587\u524d\u7f00\u7684\u957f\u5ea6\u4e3a len\uff0c\u90a3\u4e48 s[0 \\ldots len-1] \u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5269\u4f59\u90e8\u5206\uff08\u4e0d\u5c5e\u4e8e\u56de\u6587\u524d\u7f00\u7684\u90e8\u5206\uff09\u9700\u8981\u88ab\u53cd\u8f6c\u5e76\u6dfb\u52a0\u5230 s \u7684\u524d\u9762\uff0c\u624d\u80fd\u4f7f\u6574\u4e2a\u5b57\u7b26\u4e32\u6210\u4e3a\u56de\u6587\u4e32\u3002</p> C++<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n  vector&lt;int&gt; get_next(const string &amp;pattern) {\n    vector&lt;int&gt; next(pattern.length());\n    // j \u8868\u793a\u5f53\u524d\u5339\u914d\u7684\u524d\u7f00\u957f\u5ea6\n    for (int i = 1, j = 0; i &lt; pattern.length(); ++i) {\n      while (j &gt; 0 &amp;&amp; pattern[i] != pattern[j]) { j = next[j - 1]; }\n      if (pattern[i] == pattern[j]) { ++j; }\n      next[i] = j;\n    }\n    return next;\n  }\n\n public:\n  string shortestPalindrome(string s) {\n    string rev_s = s;\n    reverse(rev_s.begin(), rev_s.end());\n    string combined  = s + '#' + rev_s;  // '#' \u662f\u5206\u9694\u7b26, \u4e0d\u4f1a\u51fa\u73b0\u5728 s \u4e2d\n    vector&lt;int&gt; next = get_next(combined);\n    int len          = next.back();  // \u6700\u957f\u56de\u6587\u524d\u7f00\u7684\u957f\u5ea6\n    return rev_s.substr(0, rev_s.length() - len) + s;\n  }\n};\n</code></pre>","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#\u6700\u5c0f\u5faa\u73af\u8282","title":"\u6700\u5c0f\u5faa\u73af\u8282","text":"<p>\\text{KMP} \u7b97\u6cd5\u8fd8\u53ef\u4ee5\u6c42\u51fa\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282(1)\u548c\u6700\u957f\u91cd\u590d\u5b50\u4e32(2)\u3002</p> <ol> <li> <p>\u6700\u5c0f\u5faa\u73af\u8282\uff1a\u5b57\u7b26\u4e32\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u8f83\u77ed\u5b57\u7b26\u4e32\u7684\u91cd\u590d\u3002</p> <p>Example</p> <p>\u5b57\u7b26\u4e32 \"ababab\" \u7684\u6700\u5c0f\u5faa\u73af\u8282\u662f \"ab\"\uff0c\u56e0\u4e3a \"ababab\" \u53ef\u4ee5\u8868\u793a\u4e3a \"ab\" \u91cd\u590d\u4e09\u6b21\u3002</p> </li> <li> <p>\u6700\u957f\u91cd\u590d\u5b50\u4e32\uff1a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e24\u6b21\u6216\u591a\u6b21\u7684\u6700\u957f\u5b50\u4e32\u3002</p> <p>Example</p> <p>\u5728\u5b57\u7b26\u4e32 \"banana\" \u4e2d\uff0c\u6700\u957f\u91cd\u590d\u5b50\u4e32\u662f \"ana\"\u3002</p> </li> </ol> <p>\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7 \\text{KMP} \u7b97\u6cd5\u7684 next \u6570\u7ec4\u6765\u8ba1\u7b97\u3002\u8bbe\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a n\uff0c\u5219\u6700\u5c0f\u5faa\u73af\u8282\u7684\u957f\u5ea6\u4e3a n - next[n - 1]\u3002\u5982\u679c n \u80fd\u88ab\u8be5\u957f\u5ea6\u6574\u9664\uff0c\u5219\u8be5\u957f\u5ea6\u5373\u4e3a\u6700\u5c0f\u5faa\u73af\u8282\u7684\u957f\u5ea6\uff0c\u5426\u5219\u6700\u5c0f\u5faa\u73af\u8282\u7684\u957f\u5ea6\u4e3a n\u3002</p> \u4e3a\u4ec0\u4e48\uff1f <p>next[n-1] = k \u8868\u793a\u5b57\u7b26\u4e32\u7684\u524d\u7f00 s[0 \\ldots k-1] \u4e0e\u540e\u7f00 s[n-k \\ldots n-1] \u76f8\u7b49\uff0c\u8bf4\u660e\u4ece\u4f4d\u7f6e n-k \u5f00\u59cb\uff0c\u5b57\u7b26\u4e32\u91cd\u65b0\u51fa\u73b0\u76f8\u540c\u7684\u6a21\u5f0f\u3002\u4e5f\u5c31\u662f\u8bf4\u6bcf\u9694 p = n-k \u4e2a\u5b57\u7b26\uff0c\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u6a21\u5f0f\u3002  </p> <p>\u5982\u679c n \u80fd\u88ab p \u6574\u9664\uff0c\u5c31\u610f\u5473\u7740\u5b57\u7b26\u4e32\u53ef\u4ee5\u6070\u597d\u5206\u6210\u82e5\u5e72\u4e2a\u5b8c\u6574\u7684\u5468\u671f\uff1as = \\underbrace{s[0 \\ldots p-1]}_{1} \\underbrace{s[p \\ldots 2p-1]}_{2} \\cdots \\underbrace{s[n-p \\ldots n-1]}_{n/p}</p> <p>\u82e5 n \u80fd\u88ab p \u6574\u9664\uff0c\u8bf4\u660e\u5b57\u7b26\u4e32\u53ef\u4ee5\u5b8c\u6574\u5730\u7531\u8be5\u957f\u5ea6\u4e3a p \u7684\u5faa\u73af\u8282\u91cd\u590d\u6784\u6210\uff1b\u5426\u5219\u6700\u540e\u4e00\u6bb5\u4e0d\u5b8c\u6574\uff0c\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u4e3a n\u3002</p> \u6700\u5c0f\u5faa\u73af\u8282 C++<pre><code>string repetend_string(const string &amp;s) {\n  int n            = s.length();\n  vector&lt;int&gt; next = get_next(s);\n  int period       = n - next[n - 1];\n  if (n % period == 0 &amp;&amp; period != n) {\n    return s.substr(0, period);  // s \u7684\u5faa\u73af\u8282\n  }\n  return \"\";  // s \u6ca1\u6709\u5faa\u73af\u8282\n}\n</code></pre> <p>Example</p> <p>\u5b57\u7b26\u4e32 s = \\text{\"ababab\"}\uff0cn = 6, \\; next[5] = 4\uff0c\u56e0\u6b64 p = n - next[5] = 2\u3002  </p> <p>\u56e0\u4e3a 6 \\bmod 2 = 0\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u6210\uff1as = (ab)(ab)(ab)\u3002</p> <p>\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u4e3a 2\uff0c\u5faa\u73af\u8282\u4e3a ab\u3002</p> <p>\u5b57\u7b26\u4e32 s = \\text{\"ababa\"}\uff0cn = 5, \\; next[4] = 3\uff0c\u56e0\u6b64 p = n - next[4] = 2\u3002</p> <p>\u56e0\u4e3a 5 \\bmod 2 = 1 \\ne 0\uff0c\u8bf4\u660e\u5b57\u7b26\u4e32\u4e0d\u80fd\u7531\u957f\u5ea6\u4e3a 2 \u7684\u5faa\u73af\u8282\u5b8c\u6574\u91cd\u590d\u3002</p> <p>\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u4e3a\u6574\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\uff1a5\u3002</p> Radio Transmission \u65e0\u7ebf\u4f20\u8f93 <p>\u4e00\u4e2a\u5b57\u7b26\u4e32 s1 \u7531\u67d0\u4e2a\u5b57\u7b26\u4e32 s2 \u4e0d\u65ad\u81ea\u6211\u8fde\u63a5\u5f62\u6210\u7684\uff08\u4fdd\u8bc1\u81f3\u5c11\u91cd\u590d 2 \u6b21\uff09\u3002\u5b57\u7b26\u4e32 s2 \u7684\u6700\u77ed\u957f\u5ea6\u662f\u591a\u5c11\uff1f</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; get_next(const string &amp;pattern) {\n  vector&lt;int&gt; next(pattern.length());\n  // j \u8868\u793a\u5f53\u524d\u5339\u914d\u7684\u524d\u7f00\u957f\u5ea6\n  for (int i = 1, j = 0; i &lt; pattern.length(); ++i) {\n    while (j &gt; 0 &amp;&amp; pattern[i] != pattern[j]) { j = next[j - 1]; }\n    if (pattern[i] == pattern[j]) { ++j; }\n    next[i] = j;\n  }\n  return next;\n}\n\nint main() {\n  int n;\n  cin &gt;&gt; n;\n  string pattern;\n  cin &gt;&gt; pattern;\n  vector&lt;int&gt; next = get_next(pattern);\n  cout &lt;&lt; n - next[n - 1] &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#manacher","title":"Manacher","text":"<p>\\text{Manacher} \u7b97\u6cd5\u7528\u4e8e\u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u6700\u957f\u56de\u6587\u5b50\u4e32\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u56de\u6587\u7684\u5bf9\u79f0\u6027\u6765\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6bd4\u8f83\u3002</p> <p>\\text{Manacher} \u7b97\u6cd5\u6269\u5c55\u5b57\u7b26\u4e32\uff0c\u5c06\u539f\u5b57\u7b26\u4e32 s \u8f6c\u6362\u4e3a\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 T\uff0c\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26(1)\uff0c\u4ee5\u7edf\u4e00\u5904\u7406\u5947\u5076\u56de\u6587\u3002</p> <ol> <li>\u8be5\u7279\u6b8a\u5b57\u7b26\u53ef\u4ee5\u968f\u610f\u9009\u62e9\uff0c\u4e0d\u4f1a\u5f71\u54cd\u56de\u6587\u6027\u8d28\u548c\u7ed3\u679c\u7684\u8ba1\u7b97\uff0c\u5e38\u7528 \\# \u6216 \\$\u3002</li> </ol> <p>\\text{Manacher} \u7b97\u6cd5\u5229\u7528\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4 P\uff0c\u5176\u4e2d P[i] \u8868\u793a\u4ee5\u4f4d\u7f6e i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u534a\u5f84\uff08\u4e0d\u5305\u62ec\u4e2d\u5fc3\u5b57\u7b26\uff09\u3002\u7b97\u6cd5\u901a\u8fc7\u7ef4\u62a4\u5f53\u524d\u5df2\u77e5\u7684\u6700\u53f3\u56de\u6587\u8fb9\u754c right \u548c\u5176\u5bf9\u5e94\u7684\u4e2d\u5fc3\u4f4d\u7f6e center \u6765\u52a0\u901f\u8ba1\u7b97\u3002</p> <p>\u6269\u5c55\u56de\u6587\u4e32\u548c\u771f\u5b9e\u56de\u6587\u4e32\u6709\u4ee5\u4e0b\u5173\u7cfb:</p> <ol> <li>\u6bcf\u4e2a\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\u53ef\u80fd\u5728\u4e00\u4e2a\u5b57\u7b26\u4e0a, \u4e5f\u53ef\u80fd\u5728\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4</li> <li>\u771f\u5b9e\u56de\u6587\u4e32\u7684\u957f\u5ea6 \u7b49\u4e8e \u534a\u5f84-1, \u5373 p[i]-1</li> <li>\u771f\u5b9e\u56de\u6587\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e3a (i - p[i] + 1) / 2</li> <li>\u771f\u5b9e\u56de\u6587\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u4e0d\u5305\u62ec\u6b64\u4f4d\u7f6e\u5b57\u7b26\uff09\u7b49\u4e8e \u6269\u5c55\u56de\u6587\u4e32\u7684\u53f3\u8fb9\u754c / 2</li> </ol> <p>\\text{Manacher} \u7b97\u6cd5\u52a0\u901f\u7684\u539f\u7406:</p> <p>\u5f53\u6765\u5230 i \u4f4d\u7f6e\u65f6, \u6839\u636e\u548c\u53f3\u8fb9\u754c right \u7684\u5173\u7cfb:</p> <ol> <li>\u5982\u679c i \\geq right, \u76f4\u63a5\u66b4\u529b\u6269\u5c55</li> <li>\u5982\u679c i &lt; right, \u5219 i \u5173\u4e8e center \u7684\u5bf9\u79f0\u70b9\u4e3a j = 2*center - i<ol> <li>\u5982\u679c p[j] + i &lt; right, \u5219 p[i] = p[j]</li> <li>\u5982\u679c p[j] + i &gt; right, \u5219 p[i] = right - i</li> <li>\u5982\u679c p[j] + i == right, \u5219 p[i] \\geq right - i, \u9700\u8981\u66b4\u529b\u6269\u5c55</li> </ol> </li> </ol> \u3010\u6a21\u677f\u3011manacher C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\npair&lt;int, int&gt; manacher(const string &amp;s) {\n  int n = 2 * s.length() + 1;\n  string t(n, 0);\n  for (int i = 0, j = 0; i &lt; n; ++i) { t[i] = (i &amp; 1) == 0 ? '#' : s[j++]; }\n  vector&lt;int&gt; p(n, 0);        // p[i] \u8868\u793a\u4ee5 t[i] \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u534a\u5f84(\u4e0d\u542b\u4e2d\u5fc3)\n  int center = 0, right = 0;  // \u5f53\u524d\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\u548c\u53f3\u8fb9\u754c\n  for (int i = 0; i &lt; n; ++i) {\n    int len = right &gt; i ? min(p[2 * center - i], right - i) : 1;\n    // \u5c1d\u8bd5\u6269\u5c55\u56de\u6587\u5b50\u4e32\n    while (i - len &gt;= 0 &amp;&amp; i + len &lt; n &amp;&amp; t[i - len] == t[i + len]) { ++len; }\n    p[i] = len;\n    // \u66f4\u65b0\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\u548c\u53f3\u8fb9\u754c\n    if (i + len &gt; right) {\n      center = i;\n      right  = i + len;\n    }\n  }\n  // \u627e\u5230\u6700\u957f\u56de\u6587\u5b50\u4e32\n  int max_len = 0, start = 0;\n  for (int i = 0; i &lt; n; ++i) {\n    if (p[i] &gt; max_len) {\n      max_len = p[i];\n      start   = (i - max_len + 1) / 2;  // \u771f\u5b9e\u56de\u6587\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e3a (i - p[i] + 1) / 2\n    }\n  }\n  return {start, max_len - 1};  // \u8fd4\u56de\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\n}\n\nint main() {\n  string s;\n  cin &gt;&gt; s;\n  auto [start, len] = manacher(s);\n  cout &lt;&lt; len &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#\u6269\u5c55-kmpz-\u51fd\u6570","title":"\u6269\u5c55 KMP\uff08Z \u51fd\u6570\uff09","text":"<p>\u6269\u5c55 \\text{KMP}\uff08\\text{Extended KMP}\uff09\uff0c\u4e5f\u79f0\u4e3a Z \u51fd\u6570\uff0c\u901a\u8fc7\u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u5feb\u901f\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u524d\u7f00\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5b9a\u4e49 Z[i] \u4e3a\u4ece\u4f4d\u7f6e i \u5f00\u59cb\u7684\u540e\u7f00\u4e0e\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002</p> <p>\u5373 Z[i] = \\max \\{ k : s[0 \\ldots k-1] = s[i \\ldots i+k-1] \\}\u3002\u7279\u522b\u5730\uff0cZ[0] = \\vert s \\vert\u3002</p> <p>Z \u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5\u548c \\text{Manacher} \u7b97\u6cd5\u7c7b\u4f3c\uff0c\u5229\u7528\u5df2\u7ecf\u8ba1\u7b97\u51fa\u7684\u4fe1\u606f\u6765\u52a0\u901f\u540e\u7eed\u7684\u8ba1\u7b97\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316 Z[0] = n\uff0c\u8868\u793a\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0e\u81ea\u8eab\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e3a n</li> <li>\u4f7f\u7528\u4e24\u4e2a\u6307\u9488 l \u548c r\uff0c\u8868\u793a\u5f53\u524d\u5df2\u77e5\u7684\u6700\u957f\u5339\u914d\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c</li> <li>\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e i\uff1a</li> <li>\u5982\u679c i &gt; r\uff0c\u5219\u4ece\u5934\u5f00\u59cb\u5339\u914d\uff0c\u8ba1\u7b97 Z[i]\uff0c\u5e76\u66f4\u65b0 l \u548c r</li> <li>\u5982\u679c i \\leq r\uff0c\u5219\u5229\u7528\u5bf9\u79f0\u6027\uff0c\u8ba1\u7b97 Z[i] \u7684\u521d\u59cb\u503c\u4e3a \\min(Z[i - l], r - i + 1)\uff0c\u7136\u540e\u5c1d\u8bd5\u6269\u5c55\u5339\u914d\uff0c\u5e76\u66f4\u65b0 l \u548c r\uff08\u5982\u679c\u6709\u6269\u5c55\uff09</li> </ol> Z \u51fd\u6570 C++<pre><code>vector&lt;int&gt; get_z(const string &amp;s) {\n  int n = s.length();\n  vector&lt;int&gt; z(n, 0);\n  z[0] = n;\n  // [l, r) \u8868\u793a\u5f53\u524d\u5339\u914d\u533a\u95f4\uff0c\u533a\u95f4\u5185 s[l...r-1] \u4e0e s[0...(r-l-1)] \u5339\u914d\n  for (int i = 1, l = 0, r = 0; i &lt; n; ++i) {\n    int len = r &gt; i ? min(z[i - l], r - i) : 0;\n    // \u5c1d\u8bd5\u6269\u5c55\u5339\u914d\u533a\u95f4\n    while (i + len &lt; n &amp;&amp; s[len] == s[i + len]) { ++len; }\n    z[i] = len;\n    // \u5982\u679c\u5339\u914d\u533a\u95f4\u6269\u5c55\u5230 r \u53f3\u8fb9\uff0c\u66f4\u65b0 [l,r)\n    if (i + len &gt; r) {\n      l = i;\n      r = i + len;\n    }\n  }\n  return z;\n}\n</code></pre> <p>E \u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u6a21\u5f0f\u5b57\u7b26\u4e32 pattern \u5728\u6587\u672c\u5b57\u7b26\u4e32 text \u4e2d\u7684\u5339\u914d\u60c5\u51b5\u3002\u5b9a\u4e49 E[i] \u4e3a\u4ece\u4f4d\u7f6e i \u5f00\u59cb\u7684\u540e\u7f00\u4e0e\u6a21\u5f0f\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002</p> <p>\u5373 E[i] = \\max \\{ k : pattern[0 \\ldots k-1] = text[i \\ldots i+k-1] \\}\u3002</p> <p>E \u51fd\u6570\u7684\u8ba1\u7b97\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316 E[0] = 0\uff0c\u8868\u793a\u6a21\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0e\u6587\u672c\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u5339\u914d\u60c5\u51b5</li> <li>\u4f7f\u7528\u4e24\u4e2a\u6307\u9488 l \u548c r\uff0c\u8868\u793a\u5f53\u524d\u5df2\u77e5\u7684\u6700\u957f\u5339\u914d\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c</li> <li>\u904d\u5386\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e i\uff1a</li> <li>\u5982\u679c i &gt; r\uff0c\u5219\u4ece\u5934\u5f00\u59cb\u5339\u914d\uff0c\u8ba1\u7b97 E[i]\uff0c\u5e76\u66f4\u65b0 l \u548c r</li> <li>\u5982\u679c i \\leq r\uff0c\u5219\u5229\u7528\u5bf9\u79f0\u6027\uff0c\u8ba1\u7b97 E[i] \u7684\u521d\u59cb\u503c\u4e3a \\min(E[i - l], r - i + 1)\uff0c\u7136\u540e\u5c1d\u8bd5\u6269\u5c55\u5339\u914d\uff0c\u5e76\u66f4\u65b0 l \u548c r\uff08\u5982\u679c\u6709\u6269\u5c55\uff09</li> </ol> E \u51fd\u6570 C++<pre><code>vector&lt;int&gt; get_e(const string &amp;text, const string &amp;pattern) {\n  int n = text.length(), m = pattern.length();\n  vector&lt;int&gt; z = get_z(pattern);\n  vector&lt;int&gt; e(n, 0);\n  // \u533a\u95f4\u5185 text[l..r-1] \u4e0e pattern[0..(r-l-1)] \u5b8c\u5168\u5339\u914d\n  for (int i = 0, l = 0, r = 0; i &lt; n; ++i) {\n    int len = r &gt; i ? min(z[i - l], r - i) : 0;\n    // \u5c1d\u8bd5\u6269\u5c55\u5339\u914d\u533a\u95f4\n    while (i + len &lt; n &amp;&amp; len &lt; m &amp;&amp; text[i + len] == pattern[len]) { ++len; }\n    e[i] = len;\n    // \u5982\u679c\u5339\u914d\u533a\u95f4\u6269\u5c55\u5230 r \u53f3\u8fb9\uff0c\u66f4\u65b0 [l,r)\n    if (i + len &gt; r) {\n      l = i;\n      r = i + len;\n    }\n  }\n  return e;\n}\n</code></pre> \u5c06\u5355\u8bcd\u6062\u590d\u521d\u59cb\u72b6\u6001\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4 II <p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 word \u548c\u4e00\u4e2a\u6574\u6570 k\u3002\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5b57\u7b26\u4e32\u7684\u524d k \u4e2a\u5b57\u7b26\u5e76\u5c06\u4efb\u610f k \u4e2a\u5b57\u7b26\u52a0\u5230\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002\u8fd4\u56de\u5c06\u5b57\u7b26\u4e32\u6062\u590d\u5230\u5176\u521d\u59cb\u72b6\u6001\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002  </p> Hint <p>\u7531\u4e8e\u540e\u9762\u52a0\u7684 k \u4e2a\u5b57\u7b26\u662f\u4efb\u610f\u7684\uff0c\u56e0\u6b64\u53ea\u8981\u8003\u8651\u6bcf\u6b21\u79fb\u9664\u524d k \u4e2a\u5b57\u7b26\u4e4b\u540e\u662f\u5426\u80fd\u591f\u5b8c\u5168\u548c\u539f\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u5339\u914d\u5373\u53ef\u3002</p> C++<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n  vector&lt;int&gt; get_z(const string &amp;s) {\n    int n = s.length();\n    vector&lt;int&gt; z(n, 0);\n    z[0] = n;\n    // [l, r) \u8868\u793a\u5f53\u524d\u5339\u914d\u533a\u95f4\uff0c\u533a\u95f4\u5185 s[l...r-1] \u4e0e s[0...(r-l-1)] \u5339\u914d\n    for (int i = 1, l = 0, r = 0; i &lt; n; ++i) {\n      int len = r &gt; i ? min(z[i - l], r - i) : 0;\n      // \u5c1d\u8bd5\u6269\u5c55\u5339\u914d\u533a\u95f4\n      while (i + len &lt; n &amp;&amp; s[len] == s[i + len]) { ++len; }\n      z[i] = len;\n      // \u5982\u679c\u5339\u914d\u533a\u95f4\u6269\u5c55\u5230 r \u53f3\u8fb9\uff0c\u66f4\u65b0 [l,r)\n      if (i + len &gt; r) {\n        l = i;\n        r = i + len;\n      }\n    }\n    return z;\n  }\n\n public:\n  int minimumTimeToInitialState(string word, int k) {\n    int n         = word.length();\n    vector&lt;int&gt; z = get_z(word);\n    for (int i = k; i &lt; n; i += k) {\n      if (z[i] + i == n) { return i / k; }\n    }\n    return (n + k - 1) / k;  // \u65e0\u6cd5\u5339\u914d, \u53ea\u80fd\u6bcf\u6b21\u79fb\u9664 k \u4e2a\u5b57\u7b26\u540e\u6dfb\u52a0\u56de\u6765\n  }\n};\n</code></pre>","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMatch/#ac-\u81ea\u52a8\u673a","title":"AC \u81ea\u52a8\u673a","text":"","tags":["String","\u5b57\u7b26\u4e32\u5339\u914d","String Match","KMP","Manacher","\u6269\u5c55 KMP","AC \u81ea\u52a8\u673a"]},{"location":"code/algorithm/String/StringMultiply/","title":"\u5b57\u7b26\u4e32\u4e58\u6cd5","text":"","tags":["String","multiply"]},{"location":"code/algorithm/String/StringMultiply/#\u5b57\u7b26\u4e32\u4e58\u6cd5","title":"\u5b57\u7b26\u4e32\u4e58\u6cd5","text":"","tags":["String","multiply"]},{"location":"code/algorithm/String/StringMultiply/#\u6a21\u62df\u7b14\u7b97\u4e58\u6cd5","title":"\u6a21\u62df\u7b14\u7b97\u4e58\u6cd5","text":"<p>\u5bf9\u4e8e\u957f\u4e3a m \u548c n \u7684\u6574\u6570\u5b57\u7b26\u4e32 num1\uff0cnum2\uff0c\u8003\u8651\u7b2c i \u4f4d\u548c\u7b2c j \u4f4d\u7684\u4e58\u79ef\uff0c\u4ea7\u751f\u4e58\u79ef\u4e2a\u4f4d\u5e94\u8be5\u843d\u5728\u7d22\u5f15 i+j+1 \u5904\uff0c\u5341\u4f4d\u5728\u7d22\u5f15 i+j \u5904\u3002 \u518d\u8003\u8651\u8fdb\u4f4d\uff0c\u90a3\u4e48\u5e94\u8be5\u5c06\u7d22\u5f15 i+j+1 \u5904\u7f6e\u4e3a (num1[i]*num2[j]+carry) \\% 10\uff0c\u7136\u540e\u7d22\u5f15 i+j \u5904\u8bb0\u4e0a\u8fdb\u4f4d (num1[i]*num2[j]+carry) / 10\u3002</p> \u6a21\u62df\u7b14\u7b97 C++<pre><code>std::string multiply(const std::string &amp;num1, const std::string &amp;num2) {\n  int m = num1.size(), n = num2.size();\n  if (num1 == \"0\" || num2 == \"0\") { return \"0\"; }\n  std::vector&lt;int&gt; res(m + n, 0);\n  for (int i = m - 1; i &gt;= 0; i--) {\n    for (int j = n - 1; j &gt;= 0; j--) {\n      // \u5012\u5e8f\u76f8\u4e58\uff0c\u4e24\u4e2a\u5faa\u73af\n      int mul = (num1[i] - '0') * (num2[j] - '0');\n      int p1 = i + j, p2 = i + j + 1;\n      int sum  = mul + res[p2];\n      res[p2]  = sum % 10;\n      res[p1] += sum / 10;\n    }\n  }\n  // \u6216\u8005\u76f4\u63a5\u7528string\u6d41(stringstream)\u6765\u62fc\u63a5\n  // \u6ce8\u610f\u8df3\u8fc7\u524d\u5bfc0\n  std::string result;\n  for (int num : res) {\n    if (!(result.empty() &amp;&amp; num == 0)) { result.push_back(num + '0'); }\n  }\n  return result.empty() ? \"0\" : result;\n}\n</code></pre>","tags":["String","multiply"]},{"location":"code/algorithm/String/StringMultiply/#\u9006\u5411\u8003\u8651","title":"\u9006\u5411\u8003\u8651","text":"<p>\u5bf9\u4e8e\u7ed3\u679c\u4e2d\u7684\u7b2c i \u4f4d\uff08\u5047\u8bbe\u4ece\u53f3\u6570\u8d77\uff09\uff0c\u7531\u6240\u6709\u6ee1\u8db3 j+q=i \u7684\u4f4d\u76f8\u4e58\u540e\u76f8\u52a0\u5f97\u5230\uff08\u518d\u52a0\u4e0a i-1 \u4f4d\u7684\u8fdb\u4f4d\uff09\u3002</p> \u9006\u5411 C++<pre><code>#include &lt;algorithm&gt;\n\nstd::string multiply(const string &amp;num1, const string &amp;num2) {\n  // \u6ce8\u610f\u8fd9\u91ccm,n\u548c\u4e0a\u9762\u8bf4\u660e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e00\u6837\uff0c\u65b9\u4fbf\u8ba1\u7b97\u4e0b\u6807\n  int m = num1.length() - 1, n = num2.length() - 1, carry = 0;\n  std::string product;\n  for (int i = 0; i &lt;= m + n || carry; ++i) {\n    // \u53ea\u9700\u8003\u8651m+n\u4f4d\uff0ccarry\u662f\u4e3a\u4e86\u8003\u8651\u6700\u540e\u4e00\u4e9b\u8fdb\u4f4d\n    for (int j = max(0, i - n); j &lt;= min(i, m); ++j){\n      // \u4ece\u53f3\u8d77\u7b2cj\u4f4d\u5bf9\u5e94\u7684\u4e0b\u6807\u5c31\u662fm-j;\u8ba1\u7b97q=i-j,\u5bf9\u5e94\u5750\u6807\u4e3an-(i-j)\n      carry += (num1[m - j] - '0') * (num2[n - i + j] - '0');\n    }\n    product += carry % 10 + '0';\n    carry   /= 10;  // \u4fdd\u7559\u8fdb\u4f4d\n  }\n  std::reverse(product.begin(), product.end());\n  return product;\n}\n</code></pre> <p>\u8003\u8651 j \u7684\u53d6\u503c\u8303\u56f4: j \u53ef\u4ee5\u4ece 0 \u5f00\u59cb\uff0c\u4f46\u4e5f\u8981\u6ee1\u8db3\u52a0\u4e0a q \u7684\u6700\u5927\u503c n \u540e\u80fd\u8fbe\u5230 i ,\u4e5f\u5373\u81f3\u5c11\u4e3a i-n\uff0c\u56e0\u6b64 i \u5e94\u8be5\u53d6\u4e8c\u8005\u7684\u6700\u5927\u503c\u5f00\u59cb\uff1bj \u4e0d\u80fd\u8d85\u8fc7 i\uff0c\u4e5f\u4e0d\u80fd\u8d85\u8fc7 num1 \u672c\u8eab\u957f\u5ea6\u3002</p>","tags":["String","multiply"]},{"location":"code/algorithm/String/Trie/","title":"\u5b57\u5178\u6811","text":"","tags":["String","Trie","\u524d\u7f00\u6811","\u5b57\u5178\u6811","0-1\u5b57\u5178\u6811"]},{"location":"code/algorithm/String/Trie/#\u5b57\u5178\u6811","title":"\u5b57\u5178\u6811","text":"<p>\u5b57\u5178\u6811\uff08\\text{Trie}\uff09\uff0c\u53c8\u79f0\u524d\u7f00\u6811\u6216\u5355\u8bcd\u67e5\u627e\u6811\uff0c\u662f\u4e00\u79cd\u7528\u4e8e\u9ad8\u6548\u5b58\u50a8\u548c\u68c0\u7d22\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u7684\u4e3b\u8981\u7279\u70b9\u662f\u901a\u8fc7\u516c\u5171\u524d\u7f00\u6765\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u652f\u6301\u5feb\u901f\u7684\u5b57\u7b26\u4e32\u67e5\u627e\u64cd\u4f5c\u3002</p> Trie \u52a8\u6001\u5185\u5b58\u5b9e\u73b0\u9759\u6001\u5185\u5b58\u5b9e\u73b0 C++<pre><code>struct Trie {\n  Trie() = default;\n\n  struct TrieNode {\n    int pass = 0;  // \u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u6570\u91cf\n    int end  = 0;  // \u4ee5\u8be5\u8282\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u6570\u91cf\n    std::unordered_map&lt;char, std::unique_ptr&lt;TrieNode&gt;&gt; children;\n  };\n\n  std::unique_ptr&lt;TrieNode&gt; root = std::make_unique&lt;TrieNode&gt;();\n\n  void Insert(const string &amp;word) {\n    TrieNode *node = root.get();\n    node-&gt;pass++;\n    for (char ch : word) {\n      if (!node-&gt;children.contains(ch)) { node-&gt;children[ch] = std::make_unique&lt;TrieNode&gt;(); }\n      node = node-&gt;children[ch].get();\n      node-&gt;pass++;\n    }\n    node-&gt;end++;\n  }\n\n  int CountWordsEqualTo(const string &amp;word) {\n    TrieNode *node = root.get();\n    for (char ch : word) {\n      if (!node-&gt;children.contains(ch)) { return 0; }\n      node = node-&gt;children[ch].get();\n    }\n    return node-&gt;end;\n  }\n\n  int CountWordsStartingWith(const string &amp;prefix) {\n    TrieNode *node = root.get();\n    for (char ch : prefix) {\n      if (!node-&gt;children.contains(ch)) { return 0; }\n      node = node-&gt;children[ch].get();\n    }\n    return node-&gt;pass;\n  }\n\n  void Erase(const string &amp;word) {\n    if (CountWordsEqualTo(word) == 0) { return; }  // \u5355\u8bcd\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u5220\u9664\n    TrieNode *node = root.get();\n    node-&gt;pass--;\n    for (char ch : word) {\n      TrieNode *next_node = node-&gt;children[ch].get();\n      next_node-&gt;pass--;\n      // \u5982\u679c\u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u4e3a0\uff0c\u8bf4\u660e\u8be5\u8282\u70b9\u4e0d\u518d\u9700\u8981\uff0c\u5220\u9664\u8be5\u8282\u70b9\u53ca\u5176\u5b50\u6811\n      if (next_node-&gt;pass == 0) {\n        node-&gt;children.erase(ch);\n        return;\n      }\n      node = next_node;\n    }\n    node-&gt;end--;\n  }\n};\n</code></pre> C++<pre><code>struct Trie {\n  const static int max_nodes = 100'000;  // \u6700\u5927\u8282\u70b9\u6570\n  // tree[i][j]\u8868\u793a\u8282\u70b9i\u7684\u7b2cj\u4e2a\u5b50\u8282\u70b9\n  inline static vector&lt;array&lt;int, 26&gt;&gt; tree = vector&lt;array&lt;int, 26&gt;&gt;(max_nodes);\n  // \u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u6570\u91cf\n  inline static vector&lt;int&gt; pass = vector&lt;int&gt;(max_nodes);\n  // \u4ee5\u8be5\u8282\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u6570\u91cf\n  inline static vector&lt;int&gt; end = vector&lt;int&gt;(max_nodes);\n\n  int count                     = 1;  // \u5f53\u524d\u8282\u70b9\u603b\u6570\uff0c\u6839\u8282\u70b9\u4e3a1\n\npublic:\n  Trie() = default;\n\n  void Insert(const string &amp;word) {\n    int current = 1;\n    pass[current]++;\n    for (char ch : word) {\n      int index = ch - 'a';\n      if (tree[current][index] == 0) { tree[current][index] = ++count; }\n      current = tree[current][index];\n      pass[current]++;\n    }\n    end[current]++;\n  }\n\n  int CountWordsEqualTo(const string &amp;word) {\n    int current = 1;\n    for (char ch : word) {\n      int index = ch - 'a';\n      if (tree[current][index] == 0) { return 0; }\n      current = tree[current][index];\n    }\n    return end[current];\n  }\n\n  int CountWordsStartingWith(const string &amp;prefix) {\n    int current = 1;\n    for (char ch : prefix) {\n      int index = ch - 'a';\n      if (tree[current][index] == 0) { return 0; }\n      current = tree[current][index];\n    }\n    return pass[current];\n  }\n\n  void Erase(const string &amp;word) {\n    if (CountWordsEqualTo(word) == 0) { return; }  // \u5355\u8bcd\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u5220\u9664\n    int current = 1;\n    pass[current]--;\n    for (char ch : word) {\n      int index     = ch - 'a';\n      int next_node = tree[current][index];\n      pass[next_node]--;\n      // \u5982\u679c\u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u4e3a0\uff0c\u8bf4\u660e\u8be5\u8282\u70b9\u4e0d\u518d\u9700\u8981\uff0c\u5220\u9664\u8be5\u8282\u70b9\u53ca\u5176\u5b50\u6811\n      if (pass[next_node] == 0) {\n        tree[current][index] = 0;\n        return;\n      }\n      current = next_node;\n    }\n    end[current]--;\n  }\n\n  // \u91cd\u7f6eTrie\u6811, \u6bcf\u6b21\u8c03\u7528\u540e\u76f8\u5f53\u4e8e\u65b0\u5efa\u4e00\u4e2aTrie\u6811\n  void Clear() {\n    count = 1;\n    std::fill(pass.begin(), pass.end(), 0);\n    std::fill(end.begin(), end.end(), 0);\n    for (auto &amp;child : tree) { std::fill(child.begin(), child.end(), 0); }\n  }\n};\n</code></pre> <p>\u5904\u7406\u6570\u5b57\u7684\u6280\u5de7</p> <p>\u5c06\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\uff0c\u7136\u540e\u6bcf\u4e2a\u6570\u5b57\u7ed3\u5c3e\u52a0\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\uff0c\u4f8b\u5982 '\\#' \u8868\u793a\u4e00\u6574\u4e2a\u6570\u5b57\u7684\u7ed3\u675f\u3002\u4f8b\u5982\u6570\u5b57 -123\uff0c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 '-123\\#'\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u589e\u52a0 tree \u7b2c\u4e8c\u7ef4\u7684\u5927\u5c0f\uff0c\u4f7f\u7528 12 \u4e2a\u5b57\u7b26('0'-'9', '-', '\\#')\u5c31\u80fd\u8868\u793a\u6240\u6709\u6570\u5b57\u3002</p> \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c <p>\\text{0-1}\u5b57\u5178\u6811</p> C++<pre><code>    #include &lt;vector&gt;\n    using namespace std;\n\n    class Solution {\n      struct Trie {\n        Trie() = default;\n\n        struct TrieNode {\n          TrieNode *left  = nullptr;  // 0\n          TrieNode *right = nullptr;  // 1\n        };\n\n        const int L    = 30;  // 31\u4f4d\u6574\u6570\uff0c\u6700\u9ad8\u4f4d\u7b26\u53f7\u4f4d\u4e0d\u8003\u8651\n        TrieNode *root = new TrieNode();\n\n        void Insert(int num) {\n          TrieNode *node = root;\n          for (int i = L; i &gt;= 0; i--) {\n            int bit = (num &gt;&gt; i) &amp; 1;\n            if (bit == 0) {\n              if (!node-&gt;left) { node-&gt;left = new TrieNode(); }\n              node = node-&gt;left;\n            } else {\n              if (!node-&gt;right) { node-&gt;right = new TrieNode(); }\n              node = node-&gt;right;\n            }\n          }\n        }\n\n        int GetMaxXor(int num) {\n          TrieNode *node = root;\n          int maxXor     = 0;\n          for (int i = L; i &gt;= 0; i--) {\n            int bit = (num &gt;&gt; i) &amp; 1;\n            if (bit == 0) {\n              if (node-&gt;right) {  // \u67091\n                node    = node-&gt;right;\n                maxXor |= (1 &lt;&lt; i);\n              } else {  // \u6ca1\u67091\n                node = node-&gt;left;\n              }\n            } else {             // bit == 1\n              if (node-&gt;left) {  // \u67090\n                node    = node-&gt;left;\n                maxXor |= (1 &lt;&lt; i);\n              } else {  // \u6ca1\u67090\n                node = node-&gt;right;\n              }\n            }\n          }\n          return maxXor;\n        }\n      };\n\n     public:\n      int findMaximumXOR(vector&lt;int&gt; &amp;nums) {\n        Trie trie;\n        for (int num : nums) { trie.Insert(num); }\n\n        int maxXor = 0;\n        for (int num : nums) { maxXor = max(maxXor, trie.GetMaxXor(num)); }\n        return maxXor;\n      }\n    };\n</code></pre>","tags":["String","Trie","\u524d\u7f00\u6811","\u5b57\u5178\u6811","0-1\u5b57\u5178\u6811"]},{"location":"code/algorithm/Tree/Centroid/","title":"\u6811\u7684\u91cd\u5fc3","text":"","tags":["Tree","\u91cd\u5fc3","Centroid"]},{"location":"code/algorithm/Tree/Centroid/#\u6811\u7684\u91cd\u5fc3","title":"\u6811\u7684\u91cd\u5fc3","text":"<p>\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u9009\u62e9\u67d0\u4e2a\u8282\u70b9\u5e76\u5220\u9664\u540e\uff0c\u6811\u4f1a\u5206\u4e3a\u82e5\u5e72\u68f5\u5b50\u6811\u3002\u7edf\u8ba1\u8fd9\u4e9b\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u5e76\u8bb0\u5f55\u5176\u4e2d\u7684\u6700\u5927\u503c\u3002\u904d\u5386\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u6700\u5927\u503c\u6700\u5c0f\u7684\u8282\u70b9\u88ab\u79f0\u4e3a\u6811\u7684\u91cd\u5fc3\u3002</p> <p>\u6811\u7684\u91cd\u5fc3\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ol> <li>\u91cd\u5fc3\u7684\u552f\u4e00\u6027\uff1a\u6811\u7684\u91cd\u5fc3\u5982\u679c\u4e0d\u552f\u4e00\uff0c\u5219\u81f3\u591a\u6709\u4e24\u4e2a\uff0c\u4e14\u8fd9\u4e24\u4e2a\u91cd\u5fc3\u662f\u76f8\u90bb\u7684</li> <li>\u5b50\u6811\u5927\u5c0f\u9650\u5236\uff1a\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u8282\u70b9\u6570\u7684\u4e00\u534a</li> <li>\u8ddd\u79bb\u548c\u6700\u5c0f\u6027\uff1a\u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f\u6700\u5c0f\u7684\u3002\u5982\u679c\u6811\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u5219\u5230\u8fd9\u4e24\u4e2a\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u76f8\u7b49</li> <li>\u91cd\u5fc3\u5728\u5408\u5e76\u6811\u4e2d\u7684\u4f4d\u7f6e\uff1a\u5c06\u4e24\u68f5\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\u5f62\u6210\u4e00\u68f5\u65b0\u7684\u6811\uff0c\u90a3\u4e48\u65b0\u6811\u7684\u91cd\u5fc3\u4e00\u5b9a\u5728\u8fde\u63a5\u539f\u6765\u4e24\u68f5\u6811\u7684\u91cd\u5fc3\u7684\u8def\u5f84\u4e0a</li> <li>\u91cd\u5fc3\u7684\u52a8\u6001\u53d8\u5316\uff1a\u5728\u4e00\u68f5\u6811\u4e0a\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u6811\u7684\u91cd\u5fc3\u6700\u591a\u53ea\u4f1a\u79fb\u52a8\u4e00\u6761\u8fb9\u7684\u8ddd\u79bb</li> </ol> <p>\u6839\u636e\u8fd9\u4e9b\u6027\u8d28\u53ef\u4ee5\u6c42\u89e3\u6811\u7684\u91cd\u5fc3\u3002</p> \u6811\u7684\u91cd\u5fc3 \u5b9a\u4e49\u6027\u8d282\u6027\u8d283 <p>\u4ee5\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u6700\u5927\u5b50\u6811\u7684\u8282\u70b9\u6570\u6700\u5c11\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u662f\u91cd\u5fc3</p> C++<pre><code>vector&lt;int&gt; find_centroid(const vector&lt;vector&lt;int&gt;&gt; &amp;tree, int root = 0) {\n  int n = tree.size();\n  vector&lt;int&gt; size(n);    // \u5b50\u6811\u8282\u70b9\u6570\n  int best = n;           // \u6700\u5c0f\u7684\u6700\u5927\u5b50\u8282\u70b9\u6570\n  vector&lt;int&gt; centroids;  // \u91cd\u5fc3\u8282\u70b9, \u6700\u591a\u4e24\u4e2a\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from) {\n    size[x]       = 1;\n    int max_child = 0;  // \u6700\u5927\u5b50\u8282\u70b9\u6570\n    for (int y : tree[x]) {\n      if (y != from) {\n        dfs(y, x);\n        size[x]   += size[y];\n        max_child  = max(max_child, size[y]);\n      }\n    }\n    max_child = max(max_child, n - size[x]);  // x\u7684\u8865\u6811\u8282\u70b9\u6570\n    if (max_child &lt; best) {\n      best      = max_child;\n      centroids = {x};\n    } else if (max_child == best) {\n      centroids.push_back(x);\n    }\n  };\n  dfs(root, -1);\n\n  return centroids;\n}\n</code></pre> <p>\u4ee5\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u6bcf\u9897\u5b50\u6811\u7684\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7\u603b\u8282\u70b9\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u662f\u91cd\u5fc3</p> C++<pre><code>vector&lt;int&gt; find_centroid(const vector&lt;vector&lt;int&gt;&gt; &amp;tree, int root = 0) {\n  int n = tree.size();\n  vector&lt;int&gt; size(n);         // \u5b50\u6811\u8282\u70b9\u6570\n  vector&lt;int&gt; max_subtree(n);  // \u6700\u5927\u5b50\u6811\u8282\u70b9\u6570\n  vector&lt;int&gt; centroids;       // \u91cd\u5fc3\u8282\u70b9, \u6700\u591a\u4e24\u4e2a\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from) {\n    size[x] = 1;\n    for (int y : tree[x]) {\n      if (y != from) {\n        dfs(y, x);\n        size[x]        += size[y];\n        max_subtree[x]  = max(max_subtree[x], size[y]);\n      }\n    }\n    max_subtree[x] = max(max_subtree[x], n - size[x]);  // x\u7684\u8865\u6811\u8282\u70b9\u6570\n  };\n  dfs(root, -1);\n  for (int i = 0; i &lt; n; ++i) {\n    if (max_subtree[i] &lt;= n / 2) { centroids.push_back(i); }\n  }\n\n  return centroids;\n}\n</code></pre> <p>\u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f\u6700\u5c0f\u7684\uff1b\u5982\u679c\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u5230\u5b83\u4eec\u7684\u8ddd\u79bb\u548c\u4e00\u6837</p> C++<pre><code>vector&lt;int&gt; find_centroid(const vector&lt;vector&lt;int&gt;&gt; &amp;tree, int root = 0) {\n  int n = tree.size();\n  vector&lt;int&gt; size(n);    // \u5b50\u6811\u8282\u70b9\u6570\n  vector&lt;int&gt; dist(n);    // \u4ee5\u8282\u70b9i\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u8282\u70b9\u5230i\u7684\u8ddd\u79bb\u548c\n  vector&lt;int&gt; centroids;  // \u91cd\u5fc3\u8282\u70b9, \u6700\u591a\u4e24\u4e2a\n\n  // \u8ba1\u7b97\u4ee5root\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u8282\u70b9\u5230root\u7684\u8ddd\u79bb\u548c\n  std::function&lt;void(int, int)&gt; dfs1 = [&amp;](int x, int from) {\n    size[x] = 1;\n    for (int y : tree[x]) {\n      if (y != from) {\n        dfs1(y, x);\n        size[x] += size[y];\n        dist[x] += dist[y] + size[y];  // dist[y] + size[y]: y\u7684\u5b50\u6811\u8282\u70b9\u5230x\u7684\u8ddd\u79bb\u548c\n      }\n    }\n  };\n  dfs1(root, -1);\n  // \u6362\u6839dp, \u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u8ddd\u79bb\u548c\n  std::function&lt;void(int, int)&gt; dfs2 = [&amp;](int x, int from) {\n    for (int y : tree[x]) {\n      if (y != from) {\n        dist[y] = dist[x] - size[y] + (n - size[y]);\n        dfs2(y, x);\n      }\n    }\n  };\n  dfs2(root, -1);\n  int best = *min_element(dist.begin(), dist.end());\n  for (int i = 0; i &lt; n; ++i) {\n    if (dist[i] == best) { centroids.push_back(i); }\n  }\n\n  return centroids;\n}\n</code></pre> Balancing Act <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 <code>n</code> \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6c42\u51fa\u5b83\u7684\u91cd\u5fc3\u8282\u70b9\u7f16\u53f7\u4ee5\u53ca\u5220\u9664\u8be5\u8282\u70b9\u540e\uff0c\u5269\u4f59\u5b50\u6811\u4e2d\u8282\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570\u3002</p> C++<pre><code>// This file is written in C++98 standard.\n\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint n;\nvector&lt;vector&lt;int&gt; &gt; tree;\nvector&lt;int&gt; subtree_size;  // \u5b50\u6811\u8282\u70b9\u6570\n\n// DFS \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5927\u5c0f\uff0c\u5e76\u627e\u91cd\u5fc3\nvoid dfs(int x, int from, int &amp;best, int &amp;center) {\n  subtree_size[x] = 1;\n  int max_child   = 0;\n  for (size_t i = 0; i &lt; tree[x].size(); ++i) {\n    int y = tree[x][i];\n    if (y != from) {\n      dfs(y, x, best, center);\n      subtree_size[x] += subtree_size[y];\n      max_child        = std::max(subtree_size[y], max_child);\n    }\n  }\n  max_child = std::max(max_child, n - subtree_size[x]);\n  if (max_child &lt; best) {\n    best   = max_child;\n    center = x;\n  } else if (max_child == best) {\n    center = std::min(x, center);\n  }\n}\n\nvoid solve() {\n  int n;\n  cin &gt;&gt; n;\n  tree         = vector&lt;vector&lt;int&gt; &gt;(n + 1);\n  subtree_size = vector&lt;int&gt;(n + 1);\n  for (int i = 0; i &lt; n - 1; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  int best   = n;   // \u6700\u5c0f\u7684\u6700\u5927\u5b50\u8282\u70b9\u6570\n  int center = -1;  // \u91cd\u5fc3\u8282\u70b9, \u627e\u5230\u7f16\u53f7\u6700\u5c0f\u7684\n\n  dfs(1, -1, best, center);\n  cout &lt;&lt; center &lt;&lt; \" \" &lt;&lt; best &lt;&lt; \"\\n\";\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int t;\n  cin &gt;&gt; t;\n  while ((t--) != 0) { solve(); }\n  return 0;\n}\n</code></pre>","tags":["Tree","\u91cd\u5fc3","Centroid"]},{"location":"code/algorithm/Tree/DSU/","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76","text":"","tags":["Tree","DSU on Tree"]},{"location":"code/algorithm/Tree/DSU/#\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76","text":"<p>\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\\text{DSU on Tree}\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u6811\u5f62\u6570\u636e\u7ed3\u6784\u4e0a\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\u7684\u6280\u672f\u3002\u5b83\u7ed3\u5408\u4e86\u5e76\u67e5\u96c6\uff08\\text{Disjoint Set Union, DSU}\uff09\u548c\u6811\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u65b9\u6cd5\uff0c\u80fd\u591f\u9ad8\u6548\u5730\u89e3\u51b3\u4e00\u4e9b\u590d\u6742\u7684\u95ee\u9898\uff0c\u5982\u5b50\u6811\u67e5\u8be2\u3001\u8def\u5f84\u67e5\u8be2\u7b49\u3002</p> <p>\u5728\u5e76\u67e5\u96c6\u4e2d\u5e38\u89c1\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u7b56\u7565\u5305\u62ec\u6309\u79e9\u5408\u5e76\u548c\u6309\u5927\u5c0f\u5408\u5e76\u3002\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5219\u5229\u7528\u4e86\u6811\u7684\u7ed3\u6784\u7279\u70b9\uff0c\u901a\u8fc7\u533a\u5206\u4e0d\u540c\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u4f18\u5148\u5408\u5e76\u8f83\u5c0f\u7684\u5b50\u6811\uff0c\u4ece\u800c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u548c\u5185\u5b58\u5f00\u9500\u3002</p> <p>\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u7279\u5f81\uff1a</p> <ol> <li>\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c</li> <li>\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u5b50\u6811\u5efa\u7acb\u4fe1\u606f\u7edf\u8ba1\uff0c\u5f97\u5230\u6240\u6709\u67e5\u8be2\u7684\u7b54\u6848</li> </ol> <p>\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u904d\u5386\u6811\u7684\u8282\u70b9\uff0c\u9644\u52a0\u4e00\u4e2a keep \u6807\u8bb0\u8868\u793a\u662f\u5426\u4fdd\u7559\u5b50\u6811\u5bf9\u4fe1\u606f\u7684\u8d21\u732e\uff0c\u5e76\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u5f53\u524d\u5b50\u6811\u7684\u4fe1\u606f\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u5148\u904d\u5386\u6240\u6709\u8f7b\u513f\u5b50\u7684\u5b50\u6811\uff0c\u904d\u5386\u7ed3\u675f\u65f6\uff0c\u6d88\u9664\u5bf9\u4fe1\u606f\u7684\u8d21\u732e\u3002\u5373\uff1adfs(\u8f7b\u513f\u5b50, false)</li> <li>\u518d\u904d\u5386\u552f\u4e00\u91cd\u513f\u5b50\u7684\u5b50\u6811\uff0c\u904d\u5386\u7ed3\u675f\u65f6\uff0c\u4fdd\u7559\u5bf9\u4fe1\u606f\u7684\u8d21\u732e\u3002\u5373\uff1adfs(\u91cd\u513f\u5b50, true)</li> <li>\u8003\u5bdf\u5355\u4e2a\u8282\u70b9 u\uff0c\u5bf9\u4fe1\u606f\u8fdb\u884c\u8d21\u732e</li> <li>\u518d\u904d\u5386\u6240\u6709\u8f7b\u513f\u5b50\u7684\u5b50\u6811\u4e0a\u9762\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u91cd\u65b0\u5bf9\u4fe1\u606f\u8fdb\u884c\u8d21\u732e</li> <li>\u5f97\u5230\u5b50\u6811 u \u7684\u7b54\u6848</li> <li>\u5982\u679c keep == false\uff0c\u6d88\u9664\u5b50\u6811 u \u7684\u8d21\u732e\uff1b\u5982\u679c keep == true\uff0c\u4fdd\u7559\u5b50\u6811 u \u7684\u8d21\u732e</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N \\log N)</p> \u6811\u4e0a\u6570\u989c\u8272 <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 N \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u989c\u8272\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u6c42\u4ee5\u8282\u70b9 u \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int64_t n;\n  cin &gt;&gt; n;\n\n  vector&lt;vector&lt;int64_t&gt;&gt; tree(n + 1);\n  for (int64_t i = 1; i &lt; n; ++i) {\n    int64_t u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    tree[u].emplace_back(v);\n    tree[v].emplace_back(u);\n  }\n\n  vector&lt;int64_t&gt; color(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) { cin &gt;&gt; color[i]; }\n\n  int64_t r = 1;  // \u6839\u8282\u70b9\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int64_t&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    parent[u]        = from;\n    size[u]          = 1;\n    int64_t max_size = 0;\n    for (int64_t v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n  dfs(dfs, r, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u989c\u8272\u8ba1\u6570\u5668, \u7b54\u6848\u6570\u7ec4\n  vector&lt;int64_t&gt; counter(n + 1), answer(n + 1);\n  int64_t unique_colors = 0;\n\n  // \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\n  auto effect = [&amp;](auto &amp;&amp;self, int64_t u) -&gt; void {\n    if (++counter[color[u]] == 1) { unique_colors++; }\n    for (int64_t v : tree[u]) {\n      if (v != parent[u]) { self(self, v); }\n    }\n  };\n\n  auto deffect = [&amp;](auto &amp;&amp;self, int64_t u) -&gt; void {\n    if (--counter[color[u]] == 0) { unique_colors--; }\n    for (int64_t v : tree[u]) {\n      if (v != parent[u]) { self(self, v); }\n    }\n  };\n\n  auto dsu = [&amp;](auto &amp;self, int64_t u, bool keep) -&gt; void {\n    // \u5904\u7406\u8f7b\u513f\u5b50\n    for (int64_t v : tree[u]) {\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, false); }\n    }\n    // \u5904\u7406\u91cd\u513f\u5b50\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], true); }\n    // \u5f53\u524d\u8282\u70b9\u4fe1\u606f\n    if (++counter[color[u]] == 1) { unique_colors++; }\n    // \u5408\u5e76\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\n    for (int64_t v : tree[u]) {\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { effect(effect, v); }\n    }\n    answer[u] = unique_colors;\n    // \u5982\u679c\u4e0d\u4fdd\u7559\u4fe1\u606f, \u5219\u6e05\u7a7a\u5f53\u524d\u5b50\u6811\u7684\u4fe1\u606f\n    if (!keep) { deffect(deffect, u); }\n  };\n  dsu(dsu, r, false);\n\n  int64_t m;\n  cin &gt;&gt; m;\n  for (int64_t i = 0; i &lt; m; ++i) {\n    int64_t u;\n    cin &gt;&gt; u;\n    cout &lt;&lt; answer[u] &lt;&lt; \"\\n\";\n  }\n}\n</code></pre>","tags":["Tree","DSU on Tree"]},{"location":"code/algorithm/Tree/Diameter/","title":"\u6811\u7684\u76f4\u5f84","text":"","tags":["Tree","\u76f4\u5f84","Diameter"]},{"location":"code/algorithm/Tree/Diameter/#\u6811\u7684\u76f4\u5f84","title":"\u6811\u7684\u76f4\u5f84","text":"<p>\u6811\u7684\u76f4\u5f84\u662f\u6307\u6811\u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002</p> <p>\u6811\u7684\u76f4\u5f84\u6709\u5982\u4e0b\u6027\u8d28\uff1a</p> <ol> <li>\u5982\u679c\u6709\u591a\u6761\u76f4\u5f84\uff0c\u90a3\u4e48\u8fd9\u4e9b\u76f4\u5f84\u4e00\u5b9a\u62e5\u6709\u5171\u540c\u7684\u4e2d\u95f4\u90e8\u5206\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u516c\u5171\u70b9\u6216\u4e00\u6bb5\u516c\u5171\u8def\u5f84</li> <li>\u6811\u4e0a\u4efb\u610f\u4e00\u70b9\uff0c\u76f8\u9694\u6700\u8fdc\u7684\u70b9\u7684\u96c6\u5408\uff0c\u76f4\u5f84\u7684\u4e24\u7aef\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u5728\u5176\u4e2d</li> </ol> \u3010\u6a21\u677f\u3011\u6811\u7684\u76f4\u5f84 \u4e24\u6b21 \\text{DFS}\u6811\u5f62 \\text{DP}\u6811\u5f62 \\text{DP}\uff08\u7b80\u5316\uff09 <p>\u9002\u7528\u4e8e\u8fb9\u6743\u975e\u8d1f\u7684\u6811\uff0c\u4e0d\u4ec5\u80fd\u5f97\u5230\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u8fd8\u80fd\u5f97\u5230\u76f4\u5f84\u6cbf\u9014\u6240\u6709\u70b9</p> <p>\u8981\u6c42\u8fb9\u6743\u975e\u8d1f</p> <p>\u672c\u9898\u4e2d\u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c\u4e0d\u80fd\u901a\u8fc7\u5168\u90e8\u6d4b\u8bd5</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  int u, v, w;\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    tree[u].emplace_back(v, w);\n    tree[v].emplace_back(u, w);\n  }\n  int root     = 1;     // \u8d77\u59cb\u8282\u70b9, \u4efb\u9009\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\n  int farthest = root;  // \u8ddd\u79bbroot\u6700\u8fdc\u7684\u8282\u70b9\n\n  vector&lt;int&gt; dist(n + 1, 0);   // \u8282\u70b9\u5230root\u7684\u8ddd\u79bb\n  vector&lt;int&gt; last(n + 1, -1);  // x\u7684\u524d\u4e00\u4e2a\u8282\u70b9, \u7528\u4e8e\u56de\u6eaf\u76f4\u5f84\u8def\u5f84\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from, int weight = 1) {\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from) {\n        last[y] = x;\n        dist[y] = dist[x] + w;\n        if (dist[y] &gt; dist[farthest]) { farthest = y; }\n        dfs(y, x);\n      }\n    }\n  };\n  // \u7b2c\u4e00\u6b21dfs\uff0c\u627e\u5230\u8ddd\u79bbroot\u6700\u8fdc\u7684\u8282\u70b9farthest\n  dfs(root, -1);\n  // \u7b2c\u4e8c\u6b21dfs\uff0c\u4ee5farthest\u4e3aroot\uff0c\u627e\u5230\u8ddd\u79bbfarthest\u6700\u8fdc\u7684\u8282\u70b9\uff0c\u8ddd\u79bb\u5373\u4e3a\u76f4\u5f84\n  fill(dist.begin(), dist.end(), 0);\n  last[farthest] = -1;  // \u91cd\u7f6efarthest\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n  root           = farthest;\n  farthest       = root;\n  dfs(root, -1);\n\n  cout &lt;&lt; dist[farthest] &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> <p>\u9002\u7528\u4e8e\u8fb9\u6743\u53ef\u4ee5\u4e3a\u8d1f\u7684\u6811\uff0c\u53ea\u80fd\u5f97\u5230\u76f4\u5f84\u7684\u957f\u5ea6</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  int u, v, w;\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    tree[u].emplace_back(v, w);\n    tree[v].emplace_back(u, w);\n  }\n  int root     = 1;  // \u8d77\u59cb\u8282\u70b9, \u4efb\u9009\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\n  int diameter = 0;  // \u76f4\u5f84\n\n  vector&lt;int&gt; max_dist(n + 1, 0);  // \u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cx\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8ddd\u79bb\n  vector&lt;int&gt; answer(n + 1, 0);    // \u7ecf\u8fc7x\u7684\u6700\u957f\u8def\u5f84\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from) {\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from) {\n        dfs(y, x);\n        answer[x]   = max(answer[x], max_dist[x] + max_dist[y] + w);  // \u66f4\u65b0\u7ecf\u8fc7x\u7684\u6700\u957f\u8def\u5f84\n        max_dist[x] = max(max_dist[x], max_dist[y] + w);              // \u66f4\u65b0x\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8ddd\u79bb\n      }\n    }\n    diameter = max(diameter, answer[x]);\n  };\n  dfs(root, -1);\n\n  cout &lt;&lt; diameter &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> <p>\u7701\u7565\u4e86 <code>answer</code> \u6570\u7ec4\uff0c\u76f4\u63a5\u5728 <code>dfs</code> \u4e2d\u66f4\u65b0\u76f4\u5f84</p> \u5b9e\u73b0\u4e00\u5b9e\u73b0\u4e8c <p></p>C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  int u, v, w;\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    tree[u].emplace_back(v, w);\n    tree[v].emplace_back(u, w);\n  }\n  int root     = 1;  // \u8d77\u59cb\u8282\u70b9, \u4efb\u9009\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\n  int diameter = 0;  // \u76f4\u5f84\n\n  vector&lt;int&gt; max_dist(n + 1, 0);  // \u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cx\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8ddd\u79bb\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from) {\n    int first_max = 0, second_max = 0;  // (1)!\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from) {\n        dfs(y, x);\n        if (max_dist[y] + w &gt;= first_max) {\n          second_max = first_max;\n          first_max  = max_dist[y] + w;\n        } else if (max_dist[y] + w &gt; second_max) {\n          second_max = max_dist[y] + w;\n        }\n      }\n    }\n    diameter    = max(diameter, first_max + second_max);\n    max_dist[x] = first_max;\n  };\n  dfs(root, -1);\n\n  cout &lt;&lt; diameter &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre><p></p> <ol> <li><code>first_max</code> \u548c <code>second_max</code> \u5206\u522b\u8bb0\u5f55\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u548c\u7b2c\u4e8c\u5927\u7684 <code>max_dist</code>\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5728\u66f4\u65b0 <code>diameter</code> \u65f6\u91cd\u590d\u8ba1\u7b97\u3002</li> </ol> <p></p>C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  int u, v, w;\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    tree[u].emplace_back(v, w);\n    tree[v].emplace_back(u, w);\n  }\n  int root     = 1;  // \u8d77\u59cb\u8282\u70b9, \u4efb\u9009\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\n  int diameter = 0;  // \u76f4\u5f84\n\n  vector&lt;int&gt; max_dist(n + 1, 0);  // \u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0cx\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8ddd\u79bb\n\n  std::function&lt;void(int, int)&gt; dfs = [&amp;](int x, int from) {\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from) {\n        dfs(y, x);\n        diameter    = max(diameter, max_dist[x] + max_dist[y] + w);  // (1)!\n        max_dist[x] = max(max_dist[x], max_dist[y] + w);             // \u66f4\u65b0x\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8ddd\u79bb\n      }\n    }\n  };\n  dfs(root, -1);\n\n  cout &lt;&lt; diameter &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u66f4\u65b0\u7ecf\u8fc7<code>x</code>\u7684\u6700\u957f\u8def\u5f84\uff0c\u5fc5\u987b\u5728\u66f4\u65b0<code>max_dist[x]</code>\u4e4b\u524d\uff0c\u56e0\u4e3a<code>max_dist[x]</code>\u6b64\u65f6\u8bb0\u5f55\u7684\u662f\u5df2\u7ecf\u904d\u5386\u8fc7\u7684\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684<code>max_dist</code>\u3002\u5426\u5219<code>y</code>\u8282\u70b9\u7684\u8d21\u732e\u4f1a\u88ab\u9519\u8bef\u8ba1\u7b97\u3002</li> </ol>","tags":["Tree","\u76f4\u5f84","Diameter"]},{"location":"code/algorithm/Tree/Diameter/#\u76f4\u5f84\u7684\u516c\u5171\u90e8\u5206","title":"\u76f4\u5f84\u7684\u516c\u5171\u90e8\u5206","text":"<p>\u7531\u4e8e\u6811\u7684\u76f4\u5f84\u53ef\u80fd\u4e0d\u552f\u4e00\uff0c\u4f46\u5b83\u4eec\u4e00\u5b9a\u62e5\u6709\u5171\u540c\u7684\u4e2d\u95f4\u90e8\u5206\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u516c\u5171\u70b9\u6216\u4e00\u6bb5\u516c\u5171\u8def\u5f84\u3002</p> <p>\u5982\u679c\u6811\u7684\u8fb9\u6743\u90fd\u4e3a\u6b63\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u6b21 \\text{DFS} \u627e\u5230\u4e00\u6761\u76f4\u5f84\uff0c\u7136\u540e\u4ece\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u540c\u65f6\u5411\u4e2d\u95f4\u79fb\u52a8\uff0c\u76f4\u5230\u76f8\u9047\uff0c\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u5373\u4e3a\u6240\u6709\u76f4\u5f84\u7684\u516c\u5171\u90e8\u5206\u3002</p> \u76f4\u5f84 <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u68f5\u6811\uff0c\u8fb9\u6743\u4e3a\u6b63\u6574\u6570\uff0c\u5176\u76f4\u5f84\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u53ca\u6709\u591a\u5c11\u6761\u8fb9\u6ee1\u8db3\u6240\u6709\u7684\u76f4\u5f84\u90fd\u7ecf\u8fc7\u8be5\u8fb9\u3002</p> <p></p>C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;pair&lt;int64_t, int64_t&gt;&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; ++i) {\n    int64_t u, v, w;\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n    tree[u].emplace_back(v, w);\n    tree[v].emplace_back(u, w);\n  }\n  int64_t root     = 1;\n  int64_t farthest = root;  // \u8ddd\u79bbroot\u6700\u8fdc\u7684\u8282\u70b9\n\n  vector&lt;int64_t&gt; dist(n + 1, 0);   // \u8282\u70b9\u5230root\u7684\u8ddd\u79bb\n  vector&lt;int64_t&gt; last(n + 1, -1);  // x\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n\n  std::function&lt;void(int64_t, int64_t)&gt; dfs = [&amp;](int64_t x, int64_t from) {\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from) {\n        last[y] = x;\n        dist[y] = dist[x] + w;\n        if (dist[y] &gt; dist[farthest]) { farthest = y; }\n        dfs(y, x);\n      }\n    }\n  };\n  dfs(root, -1);\n  fill(dist.begin(), dist.end(), 0);\n  last[farthest] = -1;  // \u91cd\u7f6efarthest\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n  root           = farthest;\n  farthest       = root;\n  dfs(root, -1);\n\n  int64_t diameter = dist[farthest];\n\n  // \u6807\u8bb0\u76f4\u5f84\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\n  vector&lt;int64_t&gt; is_on_diameter(n + 1);\n  for (int64_t i = farthest; i != -1; i = last[i]) { is_on_diameter[i] = 1; }\n  // \u67e5\u627e\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u4e0a\u70b9\u7684\u6700\u957f\u8def\u5f84\n  std::function&lt;int64_t(int64_t, int64_t)&gt; dfs_exclude_diameter\n      = [&amp;](int64_t x, int64_t from) -&gt; int64_t {\n    int64_t max_length = 0;\n    for (const auto &amp;[y, w] : tree[x]) {\n      if (y != from &amp;&amp; !is_on_diameter[y]) {  // \u53ea\u904d\u5386\u4e0d\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\n        max_length = max(max_length, dfs_exclude_diameter(y, x) + w);\n      }\n    }\n    return max_length;\n  };\n\n  int64_t left = root, right = farthest;                      // \u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\n  for (int64_t i = last[farthest]; i != root; i = last[i]) {  // \u904d\u5386\u76f4\u5f84\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\n    int64_t max_length = dfs_exclude_diameter(i, -1);\n    // \u627e\u5230\u516c\u5171\u90e8\u5206\u7684\u53f3\u8fb9\u754c, \u4e0d\u7ecf\u8fc7\u76f4\u5f84\u8def\u5f84\uff0c\u80fd\u5230\u8fbe\u8ddd\u79bb\u6070\u597d\u7b49\u4e8e\u76f4\u5f84\u53e6\u4e00\u7aef\u7684\u70b9\n    if (max_length == diameter - dist[i]) { right = i; }\n    // \u627e\u5230\u516c\u5171\u90e8\u5206\u7684\u5de6\u8fb9\u754c\n    if (max_length == dist[i] &amp;&amp; left == root) { left = i; }\n  }\n\n  // \u6536\u96c6\u6240\u6709\u7684\u76f4\u5f84\u90fd\u7ecf\u8fc7\u7684\u8fb9\n  int64_t count = 0;\n  for (int64_t i = right; i != left; i = last[i]) {  // (1)!\n    count++;\n  }\n  cout &lt;&lt; diameter &lt;&lt; \"\\n\" &lt;&lt; count &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u516c\u5171\u8fb9\u5373\u4e3a\u4ece <code>right</code> \u5230 <code>left</code> \u7684\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u6bcf\u6761\u8fb9\u53ef\u4ee5\u8868\u793a\u4e3a<code>(last[i], i)</code></li> </ol>","tags":["Tree","\u76f4\u5f84","Diameter"]},{"location":"code/algorithm/Tree/Difference/","title":"\u6811\u4e0a\u5dee\u5206","text":"","tags":["Tree","\u5dee\u5206","Difference"]},{"location":"code/algorithm/Tree/Difference/#\u6811\u4e0a\u5dee\u5206","title":"\u6811\u4e0a\u5dee\u5206","text":"<p>\u6811\u4e0a\u5dee\u5206\u662f\u6307\u5728\u6811\u7684\u8def\u5f84\u8fdb\u884c\u5dee\u5206\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u9ad8\u6548\u5730\u5904\u7406\u8def\u5f84\u66f4\u65b0\u548c\u67e5\u8be2\u95ee\u9898\u3002\u6811\u4e0a\u5dee\u5206\u53ef\u5206\u4e3a\u70b9\u5dee\u5206\u548c\u8fb9\u5dee\u5206\u4e24\u79cd\u3002</p>","tags":["Tree","\u5dee\u5206","Difference"]},{"location":"code/algorithm/Tree/Difference/#\u70b9\u5dee\u5206","title":"\u70b9\u5dee\u5206","text":"<p>\u6811\u4e0a\u70b9\u5dee\u5206\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5dee\u5206\u64cd\u4f5c\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u4fee\u6539\u503c\uff08\u9488\u5bf9\u8282\u70b9\uff09\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u5c06\u5dee\u5206\u503c\u7d2f\u52a0\uff0c\u4ece\u800c\u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u7ec8\u503c\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u4f7f\u7528\u6811\u4e0a\u500d\u589e\u6216\u8005 \\text{Tarjan} \u7b97\u6cd5\u9884\u5904\u7406\u6bcf\u6761\u67e5\u8be2\u4e2d\u8def\u5f84\u4e24\u7aef\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\\text{LCA}(1)</p> <ol> <li>\u89c1 \u6700\u8fd1\u516c\u5171\u7956\u5148</li> </ol> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84 u \\longleftrightarrow v, \u627e\u5230\u7aef\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \\text{LCA}</p> <ul> <li>\u5728 u \u548c v \u4e0a\u52a0\u4e0a\u4fee\u6539\u503c</li> <li>\u5728 \\text{LCA} \u4e0a\u51cf\u53bb\u4fee\u6539\u503c</li> <li>\u5982\u679c \\text{LCA} \u4e0d\u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5728 \\text{LCA} \u7684\u7236\u8282\u70b9\u4e0a\u4e5f\u51cf\u53bb\u4fee\u6539\u503c</li> </ul> </li> <li>\u6700\u540e\u5bf9\u6811\u8fdb\u884c\u4e00\u6b21 \\text{DFS}, \u5c06\u5dee\u5206\u503c\u8fdb\u884c\u7d2f\u52a0, \u5373\u53ef\u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u7ec8\u503c</li> </ol> Max Flow P <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 n \u4e2a\u8282\u70b9\u7684\u6811\u548c k \u6761\u8def\u5f84\uff0c\u6bcf\u6761\u8def\u5f84\u8fde\u63a5\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\u3002\u521d\u59cb\u65f6\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4e3a 0\u3002\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u52a0 1\u3002\u8bf7\u4f60\u8ba1\u7b97\u7ecf\u8fc7\u6240\u6709\u8def\u5f84\u64cd\u4f5c\u540e\uff0c\u6811\u4e0a\u8282\u70b9\u7684\u6700\u5927\u503c\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  int n, k;\n  cin &gt;&gt; n &gt;&gt; k;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  int m = 32 - __builtin_clz(n + 1);\n  vector&lt;vector&lt;int&gt;&gt; st(n + 1, vector&lt;int&gt;(m, -1));\n  vector&lt;int&gt; depth(n + 1);\n  vector&lt;int&gt; parent(n + 1, -1);\n  int root = 1;\n  // \u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\n  {\n    auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n      st[x][0] = from;\n      for (int y : tree[x]) {\n        if (y != from) {\n          depth[y]  = depth[x] + 1;\n          parent[y] = x;\n          self(self, y, x);\n        }\n      }\n    };\n    dfs(dfs, root, -1);\n    for (int j = 1; j &lt; m; ++j) {\n      for (int i = 1; i &lt;= n; ++i) {\n        if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n      }\n    }\n  }\n  // \u83b7\u53d6\u8282\u70b9x\u7684\u7b2ck\u4e2a\u7956\u5148\n  auto get_kth_ancestor = [&amp;](int node, int k) -&gt; int {\n    for (; (k != 0) &amp;&amp; (node != -1); k &amp;= k - 1) { node = st[node][__builtin_ctz(k)]; }\n    return node;\n  };\n  // \u83b7\u53d6\u8282\u70b9x\u548c\u8282\u70b9y\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n  auto get_lca = [&amp;](int x, int y) -&gt; int {\n    if (depth[x] &gt; depth[y]) { swap(x, y); }\n    y = get_kth_ancestor(y, depth[y] - depth[x]);\n    if (y == x) { return x; }\n    for (int i = m - 1; i &gt;= 0; --i) {\n      int px = st[x][i];\n      int py = st[y][i];\n      if (px != py) {\n        x = px;\n        y = py;\n      }\n    }\n    return st[x][0];\n  };\n\n  vector&lt;int&gt; values(n + 1, 0);  // \u6811\u4e0a\u70b9\u5dee\u5206\u6570\u7ec4, \u5982\u679c\u6709\u70b9\u6743\u503c\uff0c\u53ef\u4ee5\u5148\u5c06\u70b9\u6743\u503c\u52a0\u5230values\u4e2d\n  // \u5904\u7406\u6bcf\u6761\u8def\u5f84: \u70b9\u5dee\u5206\n  for (int i = 0; i &lt; k; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    int lca      = get_lca(x, y);\n    values[x]   += 1;\n    values[y]   += 1;\n    values[lca] -= 1;\n    if (lca != root) { values[parent[lca]] -= 1; }\n  }\n\n  // dfs\u7d2f\u52a0\u5dee\u5206\u503c\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    for (int y : tree[x]) {\n      if (y != from) {\n        self(self, y, x);\n        values[x] += values[y];  // \u7d2f\u52a0\u5b50\u8282\u70b9\u7684\u5dee\u5206\u503c\n      }\n    }\n  };\n  dfs(dfs, root, -1);\n\n  // values\u6570\u7ec4\u5373\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u7ec8\u503c\n  cout &lt;&lt; *max_element(values.begin() + 1, values.end()) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>","tags":["Tree","\u5dee\u5206","Difference"]},{"location":"code/algorithm/Tree/Difference/#\u8fb9\u5dee\u5206","title":"\u8fb9\u5dee\u5206","text":"<p>\u6811\u4e0a\u8fb9\u5dee\u5206\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5dee\u5206\u64cd\u4f5c\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u4fee\u6539\u503c\uff08\u9488\u5bf9\u8fb9\uff09\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u5c06\u5dee\u5206\u503c\u7d2f\u52a0\uff0c\u4ece\u800c\u5f97\u5230\u6bcf\u6761\u8fb9\u7684\u6700\u7ec8\u503c\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u4f7f\u7528\u6811\u4e0a\u500d\u589e\u6216\u8005 \\text{Tarjan} \u7b97\u6cd5\u9884\u5904\u7406\u6bcf\u6761\u67e5\u8be2\u4e2d\u8def\u5f84\u4e24\u7aef\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\\text{LCA}(1)</p> <ol> <li>\u89c1 \u6700\u8fd1\u516c\u5171\u7956\u5148</li> </ol> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84 u \\longleftrightarrow v, \u627e\u5230\u7aef\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \\text{LCA}</p> <ul> <li>\u5728 u \u548c v \u4e0a\u52a0\u4e0a\u4fee\u6539\u503c</li> <li>\u5728 \\text{LCA} \u4e0a\u51cf\u53bb\u4e24\u500d\u7684\u4fee\u6539\u503c</li> </ul> </li> <li>\u6700\u540e\u5bf9\u6811\u8fdb\u884c\u4e00\u6b21 \\text{DFS}, \u5047\u8bbe\u8fb9 e \u4ece\u7236\u8282\u70b9 u \u8fde\u5411\u5b50\u8282\u70b9 v\uff0c\u4ee4 \\text{weight}[e] += \\text{num}[v] \u5373\u53ef\u5f97\u5230\u6bcf\u6761\u8fb9\u7684\u6700\u7ec8\u503c\u3002\u7136\u540e\u5c06\u70b9\u6743\u7d2f\u52a0\u5230\u7236\u8282\u70b9\u4e0a\u3002</li> </ol> Network <p>\u7ed9\u5b9a\u4e00\u68f5\u542b N \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u548c M \u6761\u65b0\u589e\u8fb9\u3002\u6bcf\u6b21\u5220\u9664\u4e00\u6761\u539f\u6811\u8fb9\u548c\u4e00\u6761\u65b0\u589e\u8fb9\uff0c\u6c42\u4f7f\u7f51\u7edc\u53d8\u4e3a\u4e0d\u8fde\u901a\u7684\u65b9\u6848\u6570\u3002</p> Hint <p>\u6bcf\u6761\u65b0\u589e\u8fb9\u5728\u6811\u4e0a\u5bf9\u5e94\u4e00\u6761\u8def\u5f84\u3002\u82e5\u67d0\u6811\u8fb9\u88ab k \u6761\u65b0\u589e\u8fb9\u8de8\u8fc7\uff0c\u5219\u5220\u6389\u5b83\u540e\u4ecd\u8fde\u901a\u7684\u65b0\u8fb9\u6709 k \u6761\u3002</p> <p>\u7528\u6811\u4e0a\u5dee\u5206 + \\text{LCA} \u7edf\u8ba1\u6bcf\u6761\u6811\u8fb9\u88ab\u8de8\u8fc7\u7684\u6b21\u6570 k\uff0c \u7b54\u6848\u4e3a\u5bf9\u6bcf\u6761\u6811\u8fb9\u6c42\u8d21\u732e\uff1a</p> <ol> <li>k = 0 \\Rightarrow +M</li> <li>k = 1 \\Rightarrow +1</li> <li>k &gt; 1 \\Rightarrow +0</li> </ol> <p>\u6570\u636e\u8303\u56f4</p> <p>1 \\leq N \\leq 10^5, 1 \\leq M \\leq 10^5</p> <p>\u5361\u5e38\u4e25\u91cd\uff1f</p> <p>\u4f3c\u4e4e<code>vector</code>\u4f1aTLE\uff0c\u6539\u7528\u94fe\u5f0f\u524d\u5411\u661f\uff1b<code>cin/cout</code>\u4e5f\u4f1aTLE\uff0c\u6539\u7528<code>scanf</code>/<code>printf</code></p> C++<pre><code>// This file is written in C++98 standard.\n\n#include &lt;algorithm&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int MAXN = 1e5 + 5;\nconst int MAXM = 2e5 + 5;  // 2*(N-1)\nconst int LOGN = 18;       // log2(1e5) \u2248 17\n\nstruct Edge {\n  int to, next;\n} edges[MAXM];\n\nint head[MAXN], tot;\n\n// Tree &amp; LCA\nint N, M;\nint st[MAXN][LOGN];\nint depth[MAXN];\nint values[MAXN];\nint parent[MAXN];\n\n// for add_edge\ninline void add_edge(int u, int v) {\n  edges[++tot].to = v;\n  edges[tot].next = head[u];\n  head[u]         = tot;\n}\n\nvoid dfs_lca(int x, int fa) {\n  st[x][0] = fa;\n  for (int j = 1; j &lt; LOGN; ++j) {\n    if (st[x][j - 1] != -1) {\n      st[x][j] = st[st[x][j - 1]][j - 1];\n    } else {\n      st[x][j] = -1;\n    }\n  }\n  for (int i = head[x]; i != 0; i = edges[i].next) {\n    int y = edges[i].to;\n    if (y == fa) { continue; }\n    depth[y] = depth[x] + 1;\n    dfs_lca(y, x);\n  }\n}\n\nint get_kth_ancestor(int node, int k) {\n  for (int i = 0; i &lt; LOGN &amp;&amp; node != -1; ++i) {\n    if ((k &amp; (1 &lt;&lt; i)) != 0) { node = st[node][i]; }\n  }\n  return node;\n}\n\nint get_lca(int x, int y) {\n  if (depth[x] &lt; depth[y]) { swap(x, y); }\n  int diff = depth[x] - depth[y];\n  for (int i = 0; i &lt; LOGN; ++i) {\n    if ((diff &amp; (1 &lt;&lt; i)) != 0) { x = st[x][i]; }\n  }\n  if (x == y) { return x; }\n  for (int i = LOGN - 1; i &gt;= 0; --i) {\n    if (st[x][i] != st[y][i]) {\n      x = st[x][i];\n      y = st[y][i];\n    }\n  }\n  return st[x][0];\n}\n\nint ans;\n\nint dfs_diff(int x, int fa) {\n  for (int i = head[x]; i != 0; i = edges[i].next) {\n    int y = edges[i].to;\n    if (y == fa) { continue; }\n    dfs_diff(y, x);\n    int weight = values[y];\n    if (weight == 0) {\n      ans += M;\n    } else if (weight == 1) {\n      ans += 1;\n    }\n    values[x] += values[y];\n  }\n  return values[x];\n}\n\nint main() {\n  scanf(\"%d%d\", &amp;N, &amp;M);\n  memset(head, 0, sizeof(head));\n  memset(st, -1, sizeof(st));\n  tot = 0;\n\n  for (int i = 1; i &lt; N; ++i) {\n    int u, v;\n    scanf(\"%d%d\", &amp;u, &amp;v);\n    add_edge(u, v);\n    add_edge(v, u);\n  }\n\n  depth[1] = 0;\n  dfs_lca(1, -1);\n\n  for (int i = 0; i &lt; M; ++i) {\n    int u, v;\n    scanf(\"%d%d\", &amp;u, &amp;v);\n    int lca      = get_lca(u, v);\n    values[u]   += 1;\n    values[v]   += 1;\n    values[lca] -= 2;\n  }\n\n  ans = 0;\n  dfs_diff(1, -1);\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n</code></pre>","tags":["Tree","\u5dee\u5206","Difference"]},{"location":"code/algorithm/Tree/HLD/","title":"\u91cd\u94fe\u5256\u5206","text":"","tags":["Tree","\u91cd\u94fe\u5256\u5206","HLD","Heavy Light Decomposition"]},{"location":"code/algorithm/Tree/HLD/#\u91cd\u94fe\u5256\u5206","title":"\u91cd\u94fe\u5256\u5206","text":"<p>\u91cd\u94fe\u5256\u5206\uff08\\text{Heavy Light Decomposition}\uff0c\\text{HLD}\uff09\u662f\u4e00\u79cd\u5c06\u6811\u5212\u5206\u4e3a\u82e5\u5e72\u6761\u94fe\u7684\u6280\u672f\uff0c\u65e8\u5728\u5c06\u6811\u4e0a\u7684\u8def\u5f84\u67e5\u8be2\u548c\u66f4\u65b0\u95ee\u9898\u8f6c\u5316\u4e3a\u94fe\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u95ee\u9898\uff0c\u4ece\u800c\u5229\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u9ad8\u6548\u5730\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u3002</p> <p>\u91cd\u94fe\u5256\u5206\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5212\u5206\u4e3a\"\u91cd\u8fb9\"\u548c\"\u8f7b\u8fb9\"\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9009\u62e9\u5176\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u8fb9\u4f5c\u4e3a\u91cd\u8fb9\uff0c\u5176\u4f59\u7684\u8fb9\u4f5c\u4e3a\u8f7b\u8fb9\u3002\u8fd9\u6837\uff0c\u4ece\u6839\u8282\u70b9\u5230\u4efb\u610f\u53f6\u8282\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u91cd\u8fb9\u7684\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7 \\log n\uff0c\u5176\u4e2d n \u662f\u6811\u7684\u8282\u70b9\u6570\u3002</p> <p>\u901a\u8fc7\u91cd\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u5c06\u6811\u4e0a\u7684\u8def\u5f84\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\u8f6c\u5316\u4e3a\u82e5\u5e72\u6761\u94fe\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\uff0c\u4ece\u800c\u5229\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u9ad8\u6548\u5730\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u91cd\u94fe\u5256\u5206\u7684\u6b65\u9aa4\u5305\u62ec\uff1a</p> <ol> <li>\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f\uff1a\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f</li> <li>\u5212\u5206\u91cd\u8fb9\u548c\u8f7b\u8fb9\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9009\u62e9\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u8fb9\u4f5c\u4e3a\u91cd\u8fb9\uff0c\u5176\u4f59\u7684\u8fb9\u4f5c\u4e3a\u8f7b\u8fb9</li> <li>\u7f16\u53f7\uff1a\u5bf9\u6bcf\u6761\u94fe\u4f7f\u7528\uff08\\text{DFS}\uff09\u7f16\u53f7\u5f97\u5230 \\text{DFS} \u5e8f\uff0c\u4fdd\u8bc1\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u5728 \\text{DFS} \u5e8f\u4e2d\u662f\u8fde\u7eed\u7684</li> <li>\u6784\u5efa\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff1a\u6839\u636e\u94fe\u7684\u7f16\u53f7\u548c\u4f4d\u7f6e\uff0c\u6784\u5efa\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u4ee5\u652f\u6301\u94fe\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c</li> <li>\u8def\u5f84\u67e5\u8be2\u548c\u66f4\u65b0\uff1a\u5c06\u6811\u4e0a\u7684\u8def\u5f84\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\u8f6c\u5316\u4e3a\u82e5\u5e72\u6761\u94fe\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5e76\u5229\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u9ad8\u6548\u5730\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c</li> </ol> <p>\\text{DFN}</p> <p>\\text{DFN}\uff08\\text{Depth-First Numbering}\uff09\u662f\u6307\u5728\u5bf9\u6811\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u904d\u5386\u65f6\uff0c\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u7f16\u53f7\u7684\u987a\u5e8f\u4e0e\u8282\u70b9\u88ab\u8bbf\u95ee\u7684\u987a\u5e8f\u4e00\u81f4\u3002\u901a\u8fc7 \\text{DFN}\uff0c\u53ef\u4ee5\u5c06\u6811\u4e0a\u7684\u8282\u70b9\u6620\u5c04\u5230\u4e00\u4e2a\u7ebf\u6027\u6570\u7ec4\u4e2d\uff0c\u4ece\u800c\u65b9\u4fbf\u5730\u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\u3002</p> <p>\u5bf9\u4e8e\u8def\u5f84\u67e5\u8be2\u548c\u66f4\u65b0\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u5212\u5206\u4e3a\u82e5\u5e72\u6761\u94fe\uff0c\u5e76\u5728\u6bcf\u6761\u94fe\u4e0a\u4f7f\u7528 \\text{DFN} \u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u3002</p> <p>\u5b50\u6811\u8282\u70b9\u7684 \\text{DFN} \u662f\u8fde\u7eed\u7684\u3002\u5047\u8bbe\u8282\u70b9 u \u7684 \\text{DFN} \u7f16\u53f7\u4e3a dfn[u]\uff0c\u5176\u5b50\u6811\u7684\u5927\u5c0f\u4e3a size[u]\uff0c\u90a3\u4e48\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811 \\text{DFN} \u7684\u8303\u56f4\u53ef\u4ee5\u8868\u793a\u4e3a [dfn[u], dfn[u] + size[u] - 1]\u3002\u5b50\u6811\u64cd\u4f5c\u5bf9\u5e94\u8be5\u533a\u95f4\u3002</p> <p>\u5982\u679c\u662f\u8fb9\u7684\u6027\u8d28\uff0c\u5219\u4e0b\u653e\u5230\u5b50\u8282\u70b9\uff0c\u7136\u540e\uff1a</p> <ul> <li>\u5bf9\u4e8e\u8def\u5f84\u64cd\u4f5c\uff0c\u6700\u540e\u4e00\u6b65\u6392\u9664 \\text{LCA} \u8282\u70b9\uff0c\u5373\u6700\u540e\u67e5\u8be2\u7684\u662f [dfn[u] + 1, dfn[v]]\u3002</li> <li>\u5bf9\u4e8e\u5b50\u6811\u64cd\u4f5c\uff0c\u6392\u9664\u6839\u8282\u70b9\uff0c\u5373\u67e5\u8be2\u7684\u662f [dfn[u] + 1, dfn[u] + size[u] - 1]\u3002</li> </ul> \u3010\u6a21\u677f\u3011\u91cd\u94fe\u5256\u5206/\u6811\u94fe\u5256\u5206 <p>\u5df2\u77e5\u4e00\u68f5\u5305\u542b N \u4e2a\u7ed3\u70b9\u7684\u6811\uff08\u8fde\u901a\u4e14\u65e0\u73af\uff09\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5305\u542b\u4e00\u4e2a\u6570\u503c\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ol> <li>\u5c06\u8def\u5f84 u \u5230 v \u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u6570\u503c\u52a0\u4e0a k\u3002</li> <li>\u67e5\u8be2\u8def\u5f84 u \u5230 v \u4e0a\u6240\u6709\u8282\u70b9\u7684\u6570\u503c\u4e4b\u548c\u3002</li> <li>\u5c06\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u6570\u503c\u52a0\u4e0a k\u3002</li> <li>\u67e5\u8be2\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u6570\u503c\u4e4b\u548c\u3002</li> </ol> <p></p>C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; tag_add;  // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n\n  int64_t p;  // \u6a21\u6570\n\n  explicit segment_tree(int64_t n, int64_t p) : sum(n * 4), tag_add(n * 4), p(p) {}\n\n  void push_up(int64_t i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums,\n             const vector&lt;int64_t&gt; &amp;rank) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316, \u5c06dfn\u6620\u5c04\u56de\u8282\u70b9\u7f16\u53f7\n      sum[i] = nums[rank[left]] % p;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums, rank);\n    build(2 * i + 1, mid + 1, right, nums, rank);\n    push_up(i);\n  }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     = (sum[i] + count * val) % p;\n    tag_add[i] = (tag_add[i] + val) % p;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res = (res + range_sum(ql, qr, 2 * i, l, mid)) % p; }\n    if (qr &gt; mid) { res = (res + range_sum(ql, qr, 2 * i + 1, mid + 1, r)) % p; }\n    return res;\n  }\n};\n\nint main() {\n  int n, m, r, p;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; p;\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n  vector&lt;vector&lt;int64_t&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    tree[u].push_back(v);\n    tree[v].push_back(u);\n  }\n\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int64_t&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    parent[u]        = from;\n    size[u]          = 1;\n    int64_t max_size = 0;\n    for (int64_t v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n  dfs(dfs, r, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u94fe\u9876, dfs\u5e8f, dfs\u53cd\u5e8f(dfn\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\n  vector&lt;int64_t&gt; top(n + 1), dfn(n + 1), rank(n + 1);\n  int64_t timer  = 0;\n  auto decompose = [&amp;](auto &amp;self, int64_t u, int64_t t) -&gt; void {\n    top[u]      = t;\n    dfn[u]      = ++timer;\n    rank[timer] = u;\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], t); }  // (1)!\n    for (int64_t v : tree[u]) {  // \u5904\u7406\u8f7b\u513f\u5b50, \u8f7b\u513f\u5b50\u5404\u81ea\u6210\u94fe\uff0c\u94fe\u9876\u4e3a\u81ea\u5df1\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, v); }\n    }\n  };\n  decompose(decompose, r, r);  // \u91cd\u94fe\u5256\u5206, \u6839\u8282\u70b9\u4e3ar, \u94fe\u9876\u4e3a\u81ea\u5df1\n\n  segment_tree seg(n, p);\n  seg.build(1, 1, n, nums, rank);  // \u6839\u636edfn\u6784\u5efa\u7ebf\u6bb5\u6811, \u6ce8\u610frank\u5c06dfn\u6620\u5c04\u56de\u8282\u70b9\u7f16\u53f7\n\n  auto path_sum = [&amp;](int64_t u, int64_t v) {\n    int64_t res = 0;\n    while (top[u] != top[v]) {  // (2)!\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      res = (res + seg.range_sum(dfn[top[u]], dfn[u], 1, 1, n)) % p;\n      u   = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }  // (3)!\n    res = (res + seg.range_sum(dfn[u], dfn[v], 1, 1, n)) % p;\n    return res;\n  };\n\n  auto path_add = [&amp;](int64_t u, int64_t v, int64_t val) {\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      seg.range_add(dfn[top[u]], dfn[u], val, 1, 1, n);\n      u = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    seg.range_add(dfn[u], dfn[v], val, 1, 1, n);\n  };\n\n  for (int i = 0; i &lt; m; ++i) {\n    int op;\n    cin &gt;&gt; op;\n    if (op == 1) {\n      int x, y, z;\n      cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n      path_add(x, y, z);\n    } else if (op == 2) {\n      int x, y;\n      cin &gt;&gt; x &gt;&gt; y;\n      cout &lt;&lt; path_sum(x, y) &lt;&lt; \"\\n\";\n    } else if (op == 3) {\n      int x, z;\n      cin &gt;&gt; x &gt;&gt; z;\n      seg.range_add(dfn[x], dfn[x] + size[x] - 1, z, 1, 1, n);  // (4)!\n    } else {\n      int x;\n      cin &gt;&gt; x;\n      cout &lt;&lt; seg.range_sum(dfn[x], dfn[x] + size[x] - 1, 1, 1, n) &lt;&lt; \"\\n\";\n    }\n  }\n  return 0;\n}\n</code></pre><p></p> <ol> <li>\u4f18\u5148\u5904\u7406\u91cd\u513f\u5b50, \u4fdd\u8bc1\u91cd\u94fe\u4e0a\u7684\u8282\u70b9\u5728 \\text{DFS} \u5e8f\u4e2d\u662f\u8fde\u7eed\u7684, \u91cd\u94fe\u4e0a\u6240\u6709\u8282\u70b9\u7684\u94fe\u9876\u4e3a top</li> <li>\u5f53 u \u548c v \u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u63d0\u5347\u8f83\u6df1\u8282\u70b9\u6240\u5728\u94fe\u7684\u94fe\u9876\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230 u \u548c v \u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002    \u63d0\u5347\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u533a\u95f4\u548c\u6216\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\u3002</li> <li>\u5f53 u \u548c v \u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u76f4\u63a5\u8ba1\u7b97\u533a\u95f4\u548c\u6216\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\u3002\u6ce8\u610f u \u548c v \u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002</li> <li>\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5728 \\text{DFS} \u5e8f\u4e2d\u7684\u8303\u56f4\u4e3a [dfn[u], dfn[u] + size[u] - 1]\uff0c\u76f4\u63a5\u5bf9\u8be5\u533a\u95f4\u8fdb\u884c\u67e5\u8be2\u6216\u66f4\u65b0\u3002</li> </ol> \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09 <p>\u5df2\u77e5\u4e00\u68f5\u5305\u542b N \u4e2a\u7ed3\u70b9\u7684\u6811\uff08\u8fde\u901a\u4e14\u65e0\u73af\uff09\uff0c\u9700\u8981\u5904\u7406 M \u6b21\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08\\text{LCA}\uff09\u67e5\u8be2\u3002</p> <p>\u5176\u4ed6\u89e3\u6cd5\u89c1\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m, s;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  for (int i = 0; i &lt; n - 1; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int64_t&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    parent[u]        = from;\n    size[u]          = 1;\n    int64_t max_size = 0;\n    for (int64_t v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n  dfs(dfs, s, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u94fe\u9876, dfs\u5e8f, dfn\u53cd\u5e8f(dfn\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\n  vector&lt;int64_t&gt; top(n + 1), dfn(n + 1), rank(n + 1);\n  int64_t timer  = 0;\n  auto decompose = [&amp;](auto &amp;self, int64_t u, int64_t t) -&gt; void {\n    top[u]      = t;\n    dfn[u]      = ++timer;\n    rank[timer] = u;\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], t); }\n    for (int64_t v : tree[u]) {\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, v); }\n    }\n  };\n  decompose(decompose, s, s);  // \u91cd\u94fe\u5256\u5206\n\n  auto get_lca = [&amp;](int64_t u, int64_t v) -&gt; int64_t {\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      u = parent[top[u]];\n    }\n    return depth[u] &lt; depth[v] ? u : v;\n  };\n\n  for (int i = 0; i &lt; m; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    cout &lt;&lt; get_lca(x, y) &lt;&lt; \"\\n\";\n  }\n\n  return 0;\n}\n</code></pre> \u6811\u4e0a\u6700\u5c0f\u516c\u500d\u6570\u8ffd\u8e2a <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 N \u4e2a\u8282\u70b9\u7684\u6811\u548c M \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e3a\u9ed1\u8272\u6216\u767d\u8272\uff0c\u64cd\u4f5c\u5305\u62ec\u4e24\u79cd\uff1a</p> <ol> <li>\u5c06\u8282\u70b9 x \u7684\u989c\u8272\u5728\u9ed1\u8272\u548c\u767d\u8272\u4e4b\u95f4\u5207\u6362\u3002</li> <li>\u67e5\u8be2\u8282\u70b9 x \u548c\u8282\u70b9 y \u4e4b\u95f4\u8def\u5f84\u4e0a\u6240\u6709\u9ed1\u8272\u8282\u70b9\u503c\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002</li> </ol> <p>\u9700\u8981\u7f51\u7ad9\u4f1a\u5458\u63d0\u4ea4</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int64_t MOD = 1e9 + 7;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; lcm;  // \u533a\u95f4\u6700\u5c0f\u516c\u500d\u6570\n\n  explicit segment_tree(int64_t n) : lcm(n * 4) {}\n\n  void push_up(int64_t i) { lcm[i] = std::lcm(lcm[2 * i], lcm[2 * i + 1]); }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int64_t i, int64_t left, int64_t right, const vector&lt;int64_t&gt; &amp;nums,\n             const vector&lt;int64_t&gt; &amp;rank, const vector&lt;int64_t&gt; &amp;colors) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316, \u5c06dfn\u6620\u5c04\u56de\u8282\u70b9\u7f16\u53f7\n      int64_t index = rank[left];\n      lcm[i]        = colors[index] == 1 ? nums[index] : 1;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    build(2 * i, left, mid, nums, rank, colors);\n    build(2 * i + 1, mid + 1, right, nums, rank, colors);\n    push_up(i);\n  }\n\n  // \u5355\u70b9\u4fee\u6539: point_set(x, val, 1, 1, n) \u5c06\u4e0b\u6807 x \u7684\u503c\u4fee\u6539\u4e3a val\n  void point_set(int64_t index, int64_t val, int64_t i, int64_t left, int64_t right) {\n    if (left == index &amp;&amp; right == index) {  // \u5230\u53f6\u5b50\uff0c\u76f4\u63a5\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u503c\n      lcm[i] = val;\n      return;\n    }\n    int64_t mid = left + ((right - left) / 2);\n    if (index &lt;= mid) {\n      point_set(index, val, 2 * i, left, mid);\n    } else {\n      point_set(index, val, 2 * i + 1, mid + 1, right);\n    }\n    push_up(i);\n  }\n\n  int64_t range_lcm(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return lcm[i]; }\n    int64_t mid = l + ((r - l) / 2);\n    int64_t res = 1;\n    if (ql &lt;= mid) { res = std::lcm(res, range_lcm(ql, qr, 2 * i, l, mid)); }\n    if (qr &gt; mid) { res = std::lcm(res, range_lcm(ql, qr, 2 * i + 1, mid + 1, r)); }\n    return res;\n  }\n};\n\nint main() {\n  int64_t n, q;\n  cin &gt;&gt; n &gt;&gt; q;\n\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int64_t i = 1; i &lt;= n; ++i) { cin &gt;&gt; nums[i]; }\n\n  vector&lt;int64_t&gt; colors(n + 1);  // 0\u8868\u793a\u767d\u8272, 1\u8868\u793a\u9ed1\u8272\n  for (int64_t i = 1; i &lt;= n; ++i) {\n    char color;\n    cin &gt;&gt; color;\n    colors[i] = (color == 'B') ? 1 : 0;\n  }\n\n  vector&lt;vector&lt;int64_t&gt;&gt; tree(n + 1);\n  for (int64_t i = 1; i &lt; n; ++i) {\n    int64_t u;\n    int64_t v;\n    cin &gt;&gt; u &gt;&gt; v;\n    tree[u].push_back(v);\n    tree[v].push_back(u);\n  }\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int64_t&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    parent[u]        = from;\n    size[u]          = 1;\n    int64_t max_size = 0;\n    for (int64_t v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n\n  dfs(dfs, 1, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u94fe\u9876, dfs\u5e8f, dfn\u53cd\u5e8f(dfn\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\n  vector&lt;int64_t&gt; top(n + 1), dfn(n + 1), rank(n + 1);\n  int64_t timer  = 0;\n  auto decompose = [&amp;](auto &amp;self, int64_t u, int64_t t) -&gt; void {\n    top[u]      = t;\n    dfn[u]      = ++timer;\n    rank[timer] = u;\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], t); }\n    for (int64_t v : tree[u]) {\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, v); }\n    }\n  };\n  decompose(decompose, 1, 1);  // \u91cd\u94fe\u5256\u5206, \u6839\u8282\u70b9\u4e3a1, \u94fe\u9876\u4e3a\u81ea\u5df1\n\n  segment_tree seg(n);\n  seg.build(1, 1, n, nums, rank, colors);\n\n  auto query_path = [&amp;](int64_t u, int64_t v) {\n    int64_t res = 1;\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      res = std::lcm(res, seg.range_lcm(dfn[top[u]], dfn[u], 1, 1, n));\n      u   = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    res = std::lcm(res, seg.range_lcm(dfn[u], dfn[v], 1, 1, n));\n    return res;\n  };\n\n  for (int64_t i = 0; i &lt; q; ++i) {\n    int64_t op;\n    int64_t x;\n    cin &gt;&gt; op &gt;&gt; x;\n    if (op == 1) {  // \u4fee\u6539\u989c\u8272, \u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539\n      colors[x]   ^= 1;\n      int64_t val  = colors[x] == 1 ? nums[x] : 1;\n      seg.point_set(dfn[x], val, 1, 1, n);\n    } else if (op == 2) {\n      // \u53ea\u5bf9\u7ed3\u679c\u53d6\u6a21\uff01\uff01\uff01\n      cout &lt;&lt; query_path(1, x) % MOD &lt;&lt; '\\n';\n    }\n  }\n\n  return 0;\n}\n</code></pre> Grass Planting G <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4ee5\u53ca m \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u8981\u4e48\u5728 u \u548c v \u4e4b\u95f4\u7684\u8fb9\u6743\u52a0 1\uff0c\u8981\u4e48\u67e5\u8be2 u \u548c v \u4e4b\u95f4\u7684\u8fb9\u6743\u548c\u3002\u521d\u59cb\u65f6\uff0c\u6240\u6709\u8fb9\u6743\u5747\u4e3a 0\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII  = pair&lt;int, int&gt;;\nusing TIII = tuple&lt;int, int, int&gt;;\n\nstruct segment_tree {\n  vector&lt;int64_t&gt; sum;      // \u533a\u95f4\u548c\n  vector&lt;int64_t&gt; tag_add;  // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n\n  explicit segment_tree(int64_t n) : sum(n * 4), tag_add(n * 4) {}\n\n  void push_up(int64_t i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }\n\n  void lazy_add(int64_t i, int64_t val, int64_t count) {\n    sum[i]     += count * val;\n    tag_add[i] += val;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int64_t i, int64_t left_count, int64_t right_count) {\n    if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n      lazy_add(2 * i, tag_add[i], left_count);\n      lazy_add(2 * i + 1, tag_add[i], right_count);\n      tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n  void range_add(int64_t ql, int64_t qr, int64_t val, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_add(i, val, r - l + 1);\n      return;\n    }\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int64_t range_sum(int64_t ql, int64_t qr, int64_t i, int64_t l, int64_t r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int64_t mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int64_t res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  for (int i = 1; i &lt; n; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    tree[u].push_back(v);\n    tree[v].push_back(u);\n  }\n  // \u91cd\u94fe\u5256\u5206\u51c6\u5907\n  int r = 1;  // \u4ee51\u53f7\u8282\u70b9\u4e3a\u6839\u8282\u70b9\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int64_t&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int64_t u, int64_t from) -&gt; void {\n    parent[u]        = from;\n    size[u]          = 1;\n    int64_t max_size = 0;\n    for (int64_t v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n  dfs(dfs, r, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u94fe\u9876, dfs\u5e8f, dfs\u53cd\u5e8f(dfn\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\n  vector&lt;int64_t&gt; top(n + 1), dfn(n + 1), rank(n + 1);\n  int64_t timer  = 0;\n  auto decompose = [&amp;](auto &amp;self, int64_t u, int64_t t) -&gt; void {\n    top[u]      = t;\n    dfn[u]      = ++timer;\n    rank[timer] = u;\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], t); }\n    for (int64_t v : tree[u]) {  // \u5904\u7406\u8f7b\u513f\u5b50, \u8f7b\u513f\u5b50\u5404\u81ea\u6210\u94fe\uff0c\u94fe\u9876\u4e3a\u81ea\u5df1\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, v); }\n    }\n  };\n  decompose(decompose, r, r);  // \u91cd\u94fe\u5256\u5206, \u6839\u8282\u70b9\u4e3ar, \u94fe\u9876\u4e3a\u81ea\u5df1\n  // \u6784\u5efa\u7ebf\u6bb5\u6811, \u4e00\u5f00\u59cb\u90fd\u662f\u5173\u952e\u8fb9, \u6240\u4ee5\u70b9\u6743\u90fd\u4e3a1\n  segment_tree seg(n);\n  // \u67e5\u8be2u-v\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u548c\n  auto path_sum = [&amp;](int64_t u, int64_t v) {\n    int64_t res = 0;\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      res = (res + seg.range_sum(dfn[top[u]], dfn[u], 1, 1, n));\n      u   = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    res = (res + seg.range_sum(dfn[u] + 1, dfn[v], 1, 1, n));\n    return res;\n  };\n  // \u5c06u-v\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u52a0\u4e0aval\n  auto path_add = [&amp;](int64_t u, int64_t v, int64_t val) {\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      seg.range_add(dfn[top[u]], dfn[u], val, 1, 1, n);\n      u = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    seg.range_add(dfn[u] + 1, dfn[v], val, 1, 1, n);\n  };\n\n  for (int i = 0; i &lt; m; ++i) {\n    char op;\n    int u, v;\n    cin &gt;&gt; op &gt;&gt; u &gt;&gt; v;\n    if (op == 'P') {\n      path_add(u, v, 1);\n    } else {\n      int64_t ans = path_sum(u, v);\n      cout &lt;&lt; ans &lt;&lt; \"\\n\";\n    }\n  }\n\n  return 0;\n}\n</code></pre>","tags":["Tree","\u91cd\u94fe\u5256\u5206","HLD","Heavy Light Decomposition"]},{"location":"code/algorithm/Tree/LCA/","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"","tags":["Tree","\u6700\u8fd1\u516c\u5171\u7956\u5148","LCA","Lowest Common Ancestor"]},{"location":"code/algorithm/Tree/LCA/#\u6700\u8fd1\u516c\u5171\u7956\u5148","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08\\text{Lowest Common Ancestor}\uff0c\\text{LCA}\uff09\u662f\u6307\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u7684\u5171\u540c\u7956\u5148\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e2d\u6709\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u5c31\u662f\u5b83\u4eec\u7684 \\text{LCA}\u3002</p>","tags":["Tree","\u6700\u8fd1\u516c\u5171\u7956\u5148","LCA","Lowest Common Ancestor"]},{"location":"code/algorithm/Tree/LCA/#\u500d\u589e\u6cd5","title":"\u500d\u589e\u6cd5","text":"<p>\u500d\u589e\u6cd5\u901a\u8fc7\u9884\u5904\u7406\u6811\u7684\u8282\u70b9\u4fe1\u606f\uff0c\u4f7f\u5f97\u6bcf\u6b21\u67e5\u8be2LCA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230 O(\\log N)\uff0c\u5176\u4e2d N \u662f\u6811\u7684\u8282\u70b9\u6570\u3002</p> <p>\u500d\u589e\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u9884\u5148\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684 2^i \u7ea7\u7956\u5148\uff0c\u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u3002\u8fd9\u6837\uff0c\u5728\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u7684 \\text{LCA} \u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u63d0\u5347\u8282\u70b9\u5230\u5176\u7956\u5148\u6765\u627e\u5230\u5b83\u4eec\u7684\u5171\u540c\u7956\u5148\u3002</p> \u9884\u5904\u7406 \\text{LCA} <p>\u6839\u636e\u7ed9\u5b9a\u6811\u7684\u7236\u8282\u70b9\u6570\u7ec4 parent \u6216\u90bb\u63a5\u8868 tree\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 2^i \u7ea7\u7956\u5148\uff0c\u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u3002</p> \u7236\u8282\u70b9\u6570\u7ec4\u90bb\u63a5\u8868 <p>parent[i] \u8868\u793a\u8282\u70b9 i \u7684\u7236\u8282\u70b9\uff0c \u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e3a -1\u3002 \u5982\u679c\u9700\u8981\u5f97\u5230\u8282\u70b9 u \u7684 2^j \u7ea7\u7956\u5148\uff0c\u53ef\u4ee5\u5148\u627e\u5230\u8282\u70b9 u \u7684 2^{j-1} \u7ea7\u7956\u5148\uff0c\u7136\u540e\u518d\u627e\u5230\u8be5\u7956\u5148\u7684 2^{j-1} \u7ea7\u7956\u5148\u3002</p> C++<pre><code>vector&lt;vector&lt;int&gt;&gt; prepare_LCA(const vector&lt;int&gt; &amp;parent) {\n  int n = parent.size();\n  int m = 32 - __builtin_clz(n);  // \u7956\u5148\u7684\u6700\u5927\u6df1\u5ea6(2^m &gt;= n) (1)\n  vector&lt;vector&lt;int&gt;&gt; st(n, vector&lt;int&gt;(m, -1));  // st[i][j]\u8868\u793a\u8282\u70b9i\u76842^j\u7ea7\u7956\u5148\n\n  // \u521d\u59cb\u5316\u7b2c2^0\u4e2a\u7956\u5148, \u5373\u7236\u8282\u70b9\n  for (int i = 0; i &lt; n; ++i) { st[i][0] = parent[i]; }\n  // \u9012\u63a8\u8ba1\u7b97\u7b2c2^j\u4e2a\u7956\u5148\n  for (int j = 1; j &lt; m; ++j) {\n    for (int i = 0; i &lt; n; ++i) {\n      if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n    }\n  }\n\n  return st;\n}\n</code></pre> <ol> <li>64 \u4f4d\u6570\u636e: <code>int64_t m = 64 - __builtin_clzll(n);</code></li> </ol> <p>tree[i] \u8868\u793a\u8282\u70b9 i \u7684\u6240\u6709\u5b50\u8282\u70b9\u3002 \u9884\u5904\u7406\u65f6\u9700\u8981\u901a\u8fc7 DFS \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7136\u540e\u518d\u901a\u8fc7\u7236\u8282\u70b9\u6570\u7ec4\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684 2^i \u7ea7\u7956\u5148\u3002</p> C++<pre><code>vector&lt;vector&lt;int&gt;&gt; prepare_LCA(const vector&lt;vector&lt;int&gt;&gt; &amp;tree, int root = 0) {\n  int n = tree.size();\n  int m = 32 - __builtin_clz(n);  // \u7956\u5148\u7684\u6700\u5927\u6df1\u5ea6(2^m &gt;= n) (1)\n  vector&lt;vector&lt;int&gt;&gt; st(n, vector&lt;int&gt;(m, -1));  // st[i][j]\u8868\u793a\u8282\u70b9i\u76842^j\u7ea7\u7956\u5148\n\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    st[x][0] = from;         // \u521d\u59cb\u5316\u7b2c2^0\u4e2a\u7956\u5148, \u5373\u7236\u8282\u70b9\n    for (int y : tree[x]) {\n      if (y != from) {\n        self(self, y, x);\n      }\n    }\n  };\n  dfs(dfs, root, -1);  // \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\n  // \u9012\u63a8\u8ba1\u7b97\u7b2c2^j\u4e2a\u7956\u5148\n  for (int j = 1; j &lt; m; ++j) {\n    for (int i = 0; i &lt; n; ++i) {\n      if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n    }\n  }\n\n  return st;\n}\n</code></pre> <ol> <li>64 \u4f4d\u6570\u636e: <code>int64_t m = 64 - __builtin_clzll(n);</code></li> </ol> <p>\u67e5\u8be2\u8282\u70b9 u \u7684 k \u7ea7\u7956\u5148</p> <p>\u5982\u679c\u8981\u67e5\u8be2\u8282\u70b9 u \u7684 k \u7ea7\u7956\u5148\uff0c\u53ef\u4ee5\u5c06 k \u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u5f62\u5f0f k = b_mb_{m-1}...b_1b_0\uff0c\u7136\u540e\u901a\u8fc7\u4e0d\u65ad\u63d0\u5347\u8282\u70b9\u5230\u5176 2^i \u7ea7\u7956\u5148\u6765\u5b9e\u73b0\u3002</p> <p>Example</p> <p>k = 13\uff0c\u5219\u53ef\u4ee5\u8868\u793a\u4e3a 1101_2\uff0c\u5373 2^3 + 2^2 + 2^0\u3002\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u4e09\u6b21\u63d0\u5347\u64cd\u4f5c\u6765\u627e\u5230\u8282\u70b9 u \u7684 13 \u7ea7\u7956\u5148\uff0c\u5373\u5148\u63d0\u5347\u5230 2^0 \u7ea7\u7956\u5148\uff0c\u518d\u4ece\u8be5\u7956\u5148\u63d0\u5347\u5230 2^2 \u7ea7\u7956\u5148\uff0c\u6700\u540e\u518d\u63d0\u5347\u5230 2^3 \u7ea7\u7956\u5148\u3002</p> \u6811\u8282\u70b9\u7684\u7b2c K \u4e2a\u7956\u5148 <p>\u7ed9\u5b9a\u4e00\u68f5\u6811\u7684\u8282\u70b9\u6570 n \u548c\u4e00\u4e2a\u6570\u7ec4 parent\uff0c\u5176\u4e2d parent[i] \u662f\u8282\u70b9 i \u7684\u7236\u8282\u70b9\u3002\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e3a -1\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u67e5\u8be2\u8282\u70b9 u \u7684\u7b2c k \u4e2a\u7956\u5148\u8282\u70b9\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u7956\u5148\u8282\u70b9\uff0c\u8fd4\u56de -1\u3002</p> C++<pre><code>class TreeAncestor {\n public:\n  TreeAncestor(int n, vector&lt;int&gt;&amp; parent) {\n    int m = 32 - __builtin_clz(n);\n    st.resize(n, vector&lt;int&gt;(m, -1));\n    for (int i = 0; i &lt; n; ++i) { st[i][0] = parent[i]; }\n    for (int j = 1; j &lt; m; ++j) {\n      for (int i = 0; i &lt; n; ++i) {\n        if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n      }\n    }\n  }\n\n  int getKthAncestor(int node, int k) { // (1)!\n    for (; (k != 0) &amp;&amp; (node != -1); k &amp;= k - 1) { node = st[node][__builtin_ctz(k)]; }\n    return node;\n  }\n\n private:\n  vector&lt;vector&lt;int&gt;&gt; st;\n};\n</code></pre> <ol> <li> <p><code>__builtin_ctz(k)</code>\uff08\\text{count tailing zero}\uff09 \u8fd4\u56de\u6574\u6570 k \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u8fde\u7eed\u7684 0 \u7684\u4e2a\u6570\uff0c\u5373 k \u4e2d\u6700\u4f4e\u4f4d\u7684 1 \u6240\u5728\u7684\u4f4d\u7f6e\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u3002</p> <p>Example</p> <p><code>__builtin_ctz(12)</code> \u8fd4\u56de 2\uff0c\u56e0\u4e3a 12 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 1100_2\uff0c\u6700\u4f4e\u4f4d\u7684 1 \u5728\u4f4d\u7f6e 2\u3002</p> <p><code>k &amp;= k - 1</code> \u8fd9\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u662f\u5c06\u6574\u6570 k \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u4f4e\u4f4d\u7684 1 \u53d8\u4e3a 0\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 k \u7684\u9010\u4f4d\u5904\u7406\u3002</p> </li> </ol> <p>\u67e5\u8be2\u8282\u70b9 u \u548c v \u7684 \\text{LCA}</p> <p>\u5982\u679c\u8282\u70b9 u \u548c v \u5728\u76f8\u540c\u6df1\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u63d0\u5347\u8282\u70b9 u \u548c v \u5230\u5176 2^i \u7ea7\u7956\u5148\uff0c\u76f4\u5230\u5b83\u4eec\u7684\u7956\u5148\u8282\u70b9\u76f8\u540c\u4e3a\u6b62\u3002</p> <p>\u5982\u679c\u8282\u70b9 u \u548c v \u5728\u4e0d\u540c\u6df1\u5ea6\uff0c\u53ef\u4ee5\u5148\u5c06\u8f83\u6df1\u7684\u8282\u70b9\u63d0\u5347\u5230\u4e0e\u8f83\u6d45\u8282\u70b9\u76f8\u540c\u7684\u6df1\u5ea6\uff08\u5373\u67e5\u8be2\u8f83\u6df1\u8282\u70b9\u7684 k = |depth(u) - depth(v)| \u7ea7\u7956\u5148\uff09\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u3002</p> <p>\u67e5\u8be2 \\text{LCA} \u9700\u8981\u8ba1\u7b97\u8282\u70b9\u7684\u6df1\u5ea6 depth\uff0c\u56e0\u6b64\u5728\u9884\u5904\u7406\u65f6\u9700\u8981\u901a\u8fc7 DFS \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u3002</p> \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09 <p>\u7ed9\u5b9a\u4e00\u68f5\u6709 N \u4e2a\u8282\u70b9\u7684\u6811\u548c M \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5305\u542b\u4e24\u4e2a\u8282\u70b9 x \u548c y\uff0c\u8981\u6c42\u627e\u51fa\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684 \\text{LCA}\u3002\u6811\u7684\u6839\u8282\u70b9\u4e3a S\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5230 N\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int N, M, S;\n  cin &gt;&gt; N &gt;&gt; M &gt;&gt; S;\n  vector&lt;vector&lt;int&gt;&gt; tree(N + 1);\n  for (int i = 0; i &lt; N - 1; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  int m = 32 - __builtin_clz(N + 1);\n  vector&lt;vector&lt;int&gt;&gt; st(N + 1, vector&lt;int&gt;(m, -1));\n  vector&lt;int&gt; depth(N + 1);\n\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    st[x][0] = from;\n    for (int y : tree[x]) {\n      if (y != from) {\n        depth[y] = depth[x] + 1;\n        self(self, y, x);\n      }\n    }\n  };\n  dfs(dfs, S, -1);\n  // \u9012\u63a8\u8ba1\u7b97\u7b2c2^j\u4e2a\u7956\u5148\n  for (int j = 1; j &lt; m; ++j) {\n    for (int i = 1; i &lt;= N; ++i) {\n      if (st[i][j - 1] != -1) { st[i][j] = st[st[i][j - 1]][j - 1]; }\n    }\n  }\n\n  auto get_kth_ancestor = [&amp;](int node, int k) -&gt; int {\n    for (; (k != 0) &amp;&amp; (node != -1); k &amp;= k - 1) { node = st[node][__builtin_ctz(k)]; }\n    return node;\n  };\n\n  auto get_lca = [&amp;](int x, int y) -&gt; int {\n    if (depth[x] &gt; depth[y]) { swap(x, y); }       // \u786e\u4fddx\u6df1\u5ea6\u66f4\u5c0f\n    y = get_kth_ancestor(y, depth[y] - depth[x]);  // \u4f7f y \u548c x \u5728\u540c\u4e00\u6df1\u5ea6\n    if (y == x) { return x; }                      // \u5df2\u7ecf\u662f\u540c\u4e00\u4e2a\u7956\u5148\n    // \u4ece\u7b2c2^(m-1)\u4e2a\u7956\u5148\u5f00\u59cb\u5c1d\u8bd5, \u82e5\u7956\u5148\u76f8\u540c\u5219\u53ef\u80fd\u5230\u8fbeLCA\u6216\u8005\u66f4\u9ad8\uff0c\u7f29\u5c0f\u6b65\u4f10\n    for (int i = m - 1; i &gt;= 0; --i) {\n      int px = st[x][i];\n      int py = st[y][i];\n      if (px != py) {  // \u82e5\u4e0d\u540c, \u5219\u8fd8\u5728\u66f4\u4e0a\u9762, \u5c06 x \u548c y \u63d0\u5347\u5230\u5b83\u4eec\u7684 2^i \u7ea7\u7956\u5148\n        x = px;\n        y = py;\n      }\n    }\n    return st[x][0];  // \u6b64\u65f6x\u548cy\u88ab\u63d0\u5347\u5230LCA\u7684\u5b50\u8282\u70b9, \u8fd4\u56de\u5b83\u4eec\u7684\u7236\u8282\u70b9\u5373\u4e3aLCA\n  };\n\n  for (int i = 0; i &lt; M; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    cout &lt;&lt; get_lca(x, y) &lt;&lt; \"\\n\";\n  }\n\n  return 0;\n}\n</code></pre>","tags":["Tree","\u6700\u8fd1\u516c\u5171\u7956\u5148","LCA","Lowest Common Ancestor"]},{"location":"code/algorithm/Tree/LCA/#tarjan-\u79bb\u7ebf\u7b97\u6cd5","title":"Tarjan \u79bb\u7ebf\u7b97\u6cd5","text":"<p>\\text{Tarjan} \u79bb\u7ebf\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6811\u6216\u56fe\u4e2d\u9ad8\u6548\u5730\u5904\u7406\u591a\u4e2a\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08\\text{LCA}\uff09\u67e5\u8be2\u7684\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u5229\u7528\u5e76\u67e5\u96c6\uff08\\text{Union-Find}\uff09\u6570\u636e\u7ed3\u6784\u6765\u52a8\u6001\u7ef4\u62a4\u8282\u70b9\u7684\u8fde\u901a\u6027\uff0c\u4ece\u800c\u5728\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\\text{DFS}\uff09\u904d\u5386\u4e2d\u5904\u7406\u6240\u6709\u7684 \\text{LCA} \u67e5\u8be2\u3002</p> <p>\\text{Tarjan} \u79bb\u7ebf\u7b97\u6cd5\u7684\u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u4e3a\u6bcf\u4e2a\u8282\u70b9\u521b\u5efa\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5e76\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u7956\u5148\u521d\u59cb\u5316\u4e3a\u5176\u81ea\u8eab\u3002\u8fd8\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\uff08\u672a\u8bbf\u95ee\u3001\u6b63\u5728\u8bbf\u95ee\u3001\u5df2\u8bbf\u95ee\uff09</li> <li> <p>DFS\uff1a\u4ece\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u8fdb\u884c DFS \u904d\u5386\u3002\u5728\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u65f6\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u6b63\u5728\u8bbf\u95ee\u72b6\u6001</li> <li>\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9\uff0c\u9012\u5f52\u5730\u8fdb\u884c DFS \u8c03\u7528</li> <li>\u5728\u8fd4\u56de\u5230\u5f53\u524d\u8282\u70b9\u540e\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u4e0e\u5176\u5b50\u8282\u70b9\u5728\u5e76\u67e5\u96c6\u4e2d\u5408\u5e76\uff0c\u5e76\u5c06\u5f53\u524d\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5176\u7956\u5148</li> <li>\u6807\u8bb0\u5f53\u524d\u8282\u70b9\u4e3a\u5df2\u8bbf\u95ee\u72b6\u6001\uff08\u5b9e\u9645\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4e0d\u533a\u5206\u6b63\u5728\u8bbf\u95ee\u548c\u5df2\u8bbf\u95ee\uff09</li> <li>\u5904\u7406\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u5173\u7684\u6240\u6709 \\text{LCA} \u67e5\u8be2\u3002\u5982\u679c\u67e5\u8be2\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u4f7f\u7528\u5e76\u67e5\u96c6\u627e\u5230\u5b83\u4eec\u7684\u5171\u540c\u7956\u5148\uff0c\u5e76\u8bb0\u5f55\u7ed3\u679c</li> </ul> </li> <li> <p>\u5728 DFS \u904d\u5386\u5b8c\u6210\u540e\uff0c\u6240\u6709\u7684 \\text{LCA} \u67e5\u8be2\u7ed3\u679c\u90fd\u5df2\u7ecf\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de</p> </li> </ol> \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09 C++<pre><code>#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int N, M, S;\n  cin &gt;&gt; N &gt;&gt; M &gt;&gt; S;\n  vector&lt;vector&lt;int&gt;&gt; tree(N + 1);\n  vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; query(N + 1);\n  vector&lt;int&gt; answer(M);\n  for (int i = 0; i &lt; N - 1; ++i) {\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    tree[x].push_back(y);\n    tree[y].push_back(x);\n  }\n\n  for (int i = 0; i &lt; M; ++i) {  // \u8bb0\u5f55\u6240\u6709\u67e5\u8be2\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    query[x].emplace_back(y, i);\n    query[y].emplace_back(x, i);\n  }\n\n  vector&lt;bool&gt; visited(N + 1);\n  vector&lt;int&gt; uf_root(N + 1);\n  iota(uf_root.begin(), uf_root.end(), 0);\n  auto find = [&amp;](auto &amp;&amp;self, int x) -&gt; int {\n    if (x != uf_root[x]) { uf_root[x] = self(self, uf_root[x]); }\n    return uf_root[x];\n  };\n\n  auto dfs = [&amp;](auto &amp;&amp;self, int x, int from) -&gt; void {\n    visited[x] = true;\n    for (int y : tree[x]) {\n      if (y != from) {\n        self(self, y, x);\n        uf_root[y] = x;  // \u5408\u5e76 y \u548c x\n      }\n    }\n    for (auto [y, idx] : query[x]) {                    // \u5904\u7406\u6240\u6709\u548c x \u6709\u5173\u7684\u67e5\u8be2\n      if (visited[y]) { answer[idx] = find(find, y); }  // y \u5df2\u7ecf\u8bbf\u95ee\u8fc7, \u8bf4\u660e LCA \u5df2\u7ecf\u786e\u5b9a\n    }\n  };\n  dfs(dfs, S, -1);\n\n  for (int i = 0; i &lt; M; ++i) { cout &lt;&lt; answer[i] &lt;&lt; \"\\n\"; }\n\n  return 0;\n}\n</code></pre>","tags":["Tree","\u6700\u8fd1\u516c\u5171\u7956\u5148","LCA","Lowest Common Ancestor"]},{"location":"code/algorithm/Tree/LCA/#\u91cd\u94fe\u5256\u5206","title":"\u91cd\u94fe\u5256\u5206","text":"<p>\u89c1\u91cd\u94fe\u5256\u5206\uff08HLD\uff09\u3002</p>","tags":["Tree","\u6700\u8fd1\u516c\u5171\u7956\u5148","LCA","Lowest Common Ancestor"]},{"location":"code/algorithm/Tree/Pseudotree/","title":"\u57fa\u73af\u6811","text":"","tags":["Tree","\u57fa\u73af\u6811","Pseudotree"]},{"location":"code/algorithm/Tree/Pseudotree/#\u57fa\u73af\u6811","title":"\u57fa\u73af\u6811","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u56fe G\uff0c\u5982\u679c\u5176\u70b9\u6570\u4e0e\u8fb9\u6570\u76f8\u7b49\uff0c\u79f0\u5b83\u4e3a\u4e00\u4e2a\u57fa\u73af\u6811\uff08\\text{Pseudotree}\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u57fa\u73af\u6811\u662f\u4e00\u4e2a\u5305\u542b\u6070\u597d\u4e00\u4e2a\u73af\u7684\u8fde\u901a\u56fe\u3002</p> \u53d1\u73b0\u73af <p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u70b9\u548c n \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u56fe\u4e2d\u6070\u6709\u4e00\u4e2a\u73af\u3002\u8bf7\u4f60\u627e\u51fa\u73af\u4e0a\u7684\u6240\u6709\u70b9\u3002</p> Hint <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u53ef\u4ee5\u5c06\u6bcf\u6761\u8fb9\u89c6\u4e3a\u53cc\u5411\u8fb9\u3002\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\uff0c\u73af\u4e0a\u7684\u70b9\u5ea6\u6570\u81f3\u5c11\u4e3a 2\uff0c\u800c\u6811\u679d\u4e0a\u7684\u70b9\u5ea6\u6570\u4e3a 1\u3002\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u5c06\u6240\u6709\u6811\u679d\u4e0a\u7684\u70b9\u5254\u9664\uff0c\u5269\u4e0b\u7684\u5373\u4e3a\u73af\u4e0a\u7684\u70b9\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n  vector&lt;int&gt; in_degree(n + 1, 0);\n  for (int i = 1; i &lt;= n; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    g[u].push_back(v);\n    in_degree[v]++;\n    g[v].push_back(u);\n    in_degree[u]++;\n  }\n\n  vector&lt;bool&gt; visited(n + 1, false);\n  queue&lt;int&gt; q;\n  for (int i = 1; i &lt;= n; ++i) {\n    if (in_degree[i] == 1) {  // \u6811\u679d\u4e0a\u7684\u70b9\u5165\u5ea6\u4e3a 1\n      q.push(i);\n      visited[i] = true;\n    }\n  }\n  while (!q.empty()) {\n    int x = q.front();\n    q.pop();\n    for (int y : g[x]) {\n      if (--in_degree[y] == 1) {\n        q.push(y);\n        visited[y] = true;\n      }\n    }\n  }\n  for (int i = 1; i &lt;= n; ++i) {  // \u73af\u4e0a\u7684\u70b9\u672a\u88ab\u8bbf\u95ee\n    if (!visited[i]) { cout &lt;&lt; i &lt;&lt; ' '; }\n  }\n  return 0;\n}\n</code></pre>","tags":["Tree","\u57fa\u73af\u6811","Pseudotree"]},{"location":"code/algorithm/Tree/Pseudotree/#\u5185\u5411\u57fa\u73af\u6811","title":"\u5185\u5411\u57fa\u73af\u6811","text":"<p>\u57fa\u73af\u5185\u5411\u6811\uff08\\text{Inward Pseudotree}\uff09\uff1a\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u90fd\u4e3a 1\u3002</p> <p>\u5e38\u5e38\u5c06\u5185\u5411\u57fa\u73af\u6811\u4e0e\u62d3\u6251\u6392\u5e8f\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u73af\u7684\u8ddd\u79bb\u3002\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9\uff0c\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u73af\u7684\u5927\u5c0f\uff1b\u5bf9\u4e8e\u6811\u679d\u4e0a\u7684\u70b9\uff0c\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u5176\u5230\u73af\u4e0a\u6700\u8fd1\u70b9\u7684\u8ddd\u79bb\u3002</p> <p>\u73af\u4e0a\u7684\u70b9\u4e0e\u6811\u679d\u4e0a\u7684\u70b9\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u5165\u5ea6\u6765\u533a\u5206\u3002\u73af\u4e0a\u7684\u70b9\u5165\u5ea6\u81f3\u5c11\u4e3a 1\uff0c\u800c\u6811\u679d\u4e0a\u7684\u70b9\u5165\u5ea6\u4e3a 0\u3002\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u5c06\u6240\u6709\u6811\u679d\u4e0a\u7684\u70b9\u5254\u9664\uff0c\u5269\u4e0b\u7684\u5373\u4e3a\u73af\u4e0a\u7684\u70b9\u3002\u968f\u540e\u53ef\u4ee5\u901a\u8fc7 BFS \u4ece\u73af\u4e0a\u70b9\u5f00\u59cb\uff0c\u5411\u6811\u679d\u4e0a\u6269\u5c55\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u73af\u7684\u8ddd\u79bb\u3002</p> \u53c2\u52a0\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570 <p>\u4e00\u4e2a\u516c\u53f8\u51c6\u5907\u7ec4\u7ec7\u4e00\u573a\u4f1a\u8bae\uff0c\u9080\u8bf7\u540d\u5355\u4e0a\u6709 n \u4f4d\u5458\u5de5\u3002\u516c\u53f8\u51c6\u5907\u4e86\u4e00\u5f20\u5706\u5f62\u7684\u684c\u5b50\uff0c\u53ef\u4ee5\u5750\u4e0b\u4efb\u610f\u6570\u76ee\u7684\u5458\u5de5\u3002</p> <p>\u5458\u5de5\u7f16\u53f7\u4e3a 0 \u5230 n - 1 \u3002\u6bcf\u4f4d\u5458\u5de5\u90fd\u6709\u4e00\u4f4d\u559c\u6b22\u7684\u5458\u5de5\uff0c\u6bcf\u4f4d\u5458\u5de5\u5f53\u4e14\u4ec5\u5f53\u4ed6\u88ab\u5b89\u6392\u5728\u559c\u6b22\u5458\u5de5\u7684\u65c1\u8fb9\uff0c\u4ed6\u624d\u4f1a\u53c2\u52a0\u4f1a\u8bae\u3002\u6bcf\u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5\u4e0d\u4f1a\u662f\u4ed6\u81ea\u5df1\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 favorite\uff0c\u5176\u4e2d favorite[i] \u8868\u793a\u7b2c i \u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5\u3002\u8bf7\u4f60\u8fd4\u56de\u53c2\u52a0\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570\u76ee\u3002</p> <p></p>C++<pre><code>#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int maximumInvitations(vector&lt;int&gt; &amp;favorite) {\n    int n = favorite.size();\n    vector&lt;int&gt; in_degree(n);\n    for (int edge : favorite) { ++in_degree[edge]; }\n    queue&lt;int&gt; q;\n    for (int i = 0; i &lt; n; ++i) {\n      if (in_degree[i] == 0) { q.push(i); }\n    }\n    vector&lt;int&gt; depth(n, 1);\n    while (!q.empty()) {  // (1)!\n      int x = q.front();\n      q.pop();\n      int y    = favorite[x];\n      depth[y] = max(depth[y], depth[x] + 1);\n      if (--in_degree[y] == 0) { q.push(y); }\n    }\n    int max_ring_size = 0, sum_chain_size = 0;\n    for (int i = 0; i &lt; n; ++i) {\n      if (in_degree[i] == 0) { continue; }\n\n      in_degree[i]  = 0;  // \u5c06\u57fa\u73af\u4e0a\u7684\u70b9\u7684\u5165\u5ea6\u6807\u8bb0\u4e3a 0\uff0c\u907f\u514d\u91cd\u590d\u8bbf\u95ee\n      int ring_size = 1;\n      for (int v = favorite[i]; v != i; v = favorite[v]) {  // \u904d\u5386\u57fa\u73af\u4e0a\u7684\u70b9\n        in_degree[v] = 0;\n        ++ring_size;\n      }\n      if (ring_size == 2) {  // \u57fa\u73af\u5927\u5c0f\u4e3a 2\uff0c\u7d2f\u52a0\u4e24\u6761\u6700\u957f\u94fe\u7684\u957f\u5ea6\n        sum_chain_size += depth[i] + depth[favorite[i]];\n      } else {  // \u57fa\u73af\u5927\u5c0f\u5927\u4e8e 2\uff0c\u53ea\u80fd\u72ec\u7acb\u6210\u56e2\uff0c\u66f4\u65b0\u6700\u5927\u57fa\u73af\u5927\u5c0f\n        max_ring_size = max(max_ring_size, ring_size);\n      }\n    }\n    return max(max_ring_size, sum_chain_size);\n  }\n};\n</code></pre><p></p> <ol> <li>\u5bf9\u4e8e\u5176\u4ed6\u66f4\u590d\u6742\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5728\u62d3\u6251\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u6784\u5efa\u53cd\u56fe\uff0c\u53cd\u56fe\u4e2d\u53ea\u5305\u542b\u6811\u679d\u4e0a\u7684\u70b9\uff0c\u4ece\u800c\u5728\u540e\u7eed\u5904\u7406\u4e2d\u53ef\u4ee5\u533a\u5206\u73af\u4e0a\u70b9\u4e0e\u6811\u679d\u4e0a\u70b9\u3002</li> </ol>","tags":["Tree","\u57fa\u73af\u6811","Pseudotree"]},{"location":"code/algorithm/Tree/Pseudotree/#\u5916\u5411\u57fa\u73af\u6811","title":"\u5916\u5411\u57fa\u73af\u6811","text":"<p>\u57fa\u73af\u5916\u5411\u6811\uff08\\text{Outward Pseudotree}\uff09\uff1a\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a 1\u3002</p> <p>\u5904\u7406\u65b9\u5f0f\u4e0e\u5185\u5411\u57fa\u73af\u6811\u7c7b\u4f3c\uff0c\u53ea\u9700\u5c06\u5165\u5ea6\u6539\u4e3a\u51fa\u5ea6\u5373\u53ef\u3002</p>","tags":["Tree","\u57fa\u73af\u6811","Pseudotree"]},{"location":"code/algorithm/Tree/Traversal/","title":"\u6811\u7684\u904d\u5386","text":"","tags":["Tree","\u904d\u5386","Traverse","\u91cd\u5efa\u4e8c\u53c9\u6811","Build Tree","Morris \u904d\u5386"]},{"location":"code/algorithm/Tree/Traversal/#\u6811\u7684\u904d\u5386","title":"\u6811\u7684\u904d\u5386","text":"<p>\u6811\u7684\u904d\u5386\u662f\u6307\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u8bbf\u95ee\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002\u5e38\u89c1\u7684\u6811\u7684\u904d\u5386\u65b9\u5f0f\u6709\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08\\text{DFS}\uff09\u548c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08\\text{BFS}\uff09\u3002</p>","tags":["Tree","\u904d\u5386","Traverse","\u91cd\u5efa\u4e8c\u53c9\u6811","Build Tree","Morris \u904d\u5386"]},{"location":"code/algorithm/Tree/Traversal/#\u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52dfs","title":"\u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52DFS","text":"<p>\u975e\u9012\u5f52 \\text{DFS} \u4f7f\u7528\u6808\u6765\u6a21\u62df\u9012\u5f52\u8fc7\u7a0b\u3002</p> \u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52 \\text{DFS} \u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5b9a\u4e49 C++<pre><code>struct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n\n  TreeNode() : val(0), left(nullptr), right(nullptr) {}\n\n  explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n\n  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n</code></pre> \u524d\u5e8f\u904d\u5386\u4e2d\u5e8f\u904d\u5386\u540e\u5e8f\u904d\u5386 C++<pre><code>vector&lt;int&gt; pre_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  stack&lt;TreeNode *&gt; st;\n  while ((root != nullptr) || !st.empty()) {  // \u5982\u679c\u6839\u8282\u70b9\u4e3a\u7a7a\u5219\u4ece\u6808\u4e2d\u53d6\u8282\u70b9\n    while (root != nullptr) {\n      traverse.emplace_back(root-&gt;val);  // \u5148\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\n      st.emplace(root);                  // \u518d\u5c06\u5f53\u524d\u8282\u70b9\u5165\u6808, \u65b9\u4fbf\u56de\u6eaf\n      root = root-&gt;left;                 // \u5904\u7406\u5de6\u5b50\u6811\n    }\n    // \u5230\u8fbe\u6700\u5de6\u8282\u70b9\u7684\u5de6\u5b50\u6811(nullptr)\uff0c\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9(\u4e5f\u5c31\u662f\u6700\u5de6\u8282\u70b9), \u8f6c\u5411\u5176\u53f3\u5b50\u6811\n    root = st.top()-&gt;right;\n    st.pop();  // \u5f39\u51fa\u5df2\u7ecf\u56de\u6eaf\u7684\u8282\u70b9\n  }\n  return traverse;\n}\n</code></pre> C++<pre><code>vector&lt;int&gt; in_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  stack&lt;TreeNode *&gt; st;\n  while ((root != nullptr) || !st.empty()) {\n    while (root != nullptr) {\n      st.push(root);      // \u5148\u5c06\u5f53\u524d\u8282\u70b9\u5165\u6808, \u65b9\u4fbf\u56de\u6eaf\n      root = root-&gt;left;  // \u5904\u7406\u5de6\u5b50\u6811\n    }\n    root = st.top();  // \u5230\u8fbe\u6700\u5de6\u8282\u70b9\u7684\u5de6\u5b50\u6811(nullptr)\uff0c\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9(\u4e5f\u5c31\u662f\u6700\u5de6\u8282\u70b9)\n    traverse.push_back(root-&gt;val);  // \u8bbf\u95ee\u8be5\u8282\u70b9\n    st.pop();                       // \u5f39\u51fa\u5df2\u8bbf\u95ee\u8282\u70b9\n    root = root-&gt;right;             // \u8bbf\u95ee\u8282\u70b9\u540e\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n  }\n  return traverse;\n}\n</code></pre> C++<pre><code>vector&lt;int&gt; post_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  std::stack&lt;TreeNode *&gt; st;\n  TreeNode *last = nullptr;  // \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\n  while (root != nullptr || !st.empty()) {\n    while (root != nullptr) {\n      st.emplace(root);   // \u5148\u5c06\u5f53\u524d\u8282\u70b9\u5165\u6808, \u65b9\u4fbf\u56de\u6eaf\n      root = root-&gt;left;  // \u5904\u7406\u5de6\u5b50\u6811\n    }\n    // \u5230\u8fbe\u6700\u5de6\u8282\u70b9\u7684\u5de6\u5b50\u6811(nullptr)\uff0c\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9(\u4e5f\u5c31\u662f\u6700\u5de6\u8282\u70b9)\n    if (st.top()-&gt;right == nullptr || st.top()-&gt;right == last) {  // \u53f3\u5b50\u6811\u4e3a\u7a7a\u6216\u5df2\u8bbf\u95ee\u8fc7\n      last = st.top();\n      traverse.emplace_back(st.top()-&gt;val);  // \u8bbf\u95ee\u8be5\u8282\u70b9\n      st.pop();                              // \u5f39\u51fa\u5df2\u8bbf\u95ee\u8282\u70b9\n    } else {                                 // \u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\u4e14\u672a\u8bbf\u95ee\u8fc7\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      root = st.top()-&gt;right;\n    }\n  }\n  return traverse;\n}\n</code></pre>","tags":["Tree","\u904d\u5386","Traverse","\u91cd\u5efa\u4e8c\u53c9\u6811","Build Tree","Morris \u904d\u5386"]},{"location":"code/algorithm/Tree/Traversal/#\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811","title":"\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811","text":"<p>\u6839\u636e\u6811\u7684\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6216\u540e\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6765\u91cd\u5efa\u4e8c\u53c9\u6811\u3002\u6ce8\u610f\uff0c\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u3002</p> <p>\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u65e0\u6cd5\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u6811</p> <p>\u4ee5\u4e0b\u4e24\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u5747\u4e3a [1, 2, 3]\uff0c\u540e\u5e8f\u904d\u5386\u5747\u4e3a [3, 2, 1]\uff0c\u4f46\u7ed3\u6784\u4e0d\u540c\u3002</p> <pre><code>graph TD\n    %% === \u7b2c\u4e00\u68f5\u6811 ===\n    A1((\"1\"))\n    A2((\"2\"))\n    A_null1((\"null\"))\n    A_null2((\"null\"))\n    A3((\"3\"))\n\n    A1 --&gt; A2\n    A1 --&gt; A_null1\n    A2 --&gt; A_null2\n    A2 --&gt; A3\n\n    %% === \u7b2c\u4e8c\u68f5\u6811 ===\n    B1((\"1\"))\n    B_null1((\"null\"))\n    B2((\"2\"))\n    B3((\"3\"))\n    B_null2((\"null\"))\n\n    B1 --&gt; B_null1\n    B1 --&gt; B2\n    B2 --&gt; B3\n    B2 --&gt; B_null2\n\n    %% === \u6837\u5f0f\u8bbe\u7f6e ===\n    classDef nullNode fill:#eee,stroke:#ccc,color:#666;\n    class A_null1,A_null2,B_null1,B_null2 nullNode;</code></pre> <p>\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\u7684\u8282\u70b9\u65e0\u6cd5\u786e\u5b9a\u5b50\u6811\u6302\u5728\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u3002</p> <p>\u552f\u4e00\u786e\u5b9a\u4e8c\u53c9\u6811\u7684\u6761\u4ef6</p> <p>\u53ea\u6709\u5f53\u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u5747\u4e3a 2 \u6216 0\uff08\u5373\u771f\u4e8c\u53c9\u6811\uff09\u65f6\uff0c\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u624d\u80fd\u552f\u4e00\u786e\u5b9a\u4e8c\u53c9\u6811\u3002\u82e5\u5b58\u5728\u5ea6\u4e3a 1 \u7684\u8282\u70b9\uff0c\u5219\u65e0\u6cd5\u552f\u4e00\u8fd8\u539f\u3002</p> \u6839\u636e\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811 \u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5b9a\u4e49 C++<pre><code>struct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n\n  TreeNode() : val(0), left(nullptr), right(nullptr) {}\n\n  explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n\n  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n</code></pre> \u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811\u540e\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 <p>\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811</p> C++<pre><code>TreeNode *build_tree(const vector&lt;int&gt; &amp;pre_order, const vector&lt;int&gt; &amp;in_order) {\n  int root_index = 0;\n  // \u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u7b80\u5316std::find\n  std::function&lt;TreeNode *(int, int)&gt; build = [&amp;](int in_begin, int in_end) -&gt; TreeNode * {\n    if (in_begin &gt;= in_end) { return nullptr; }\n    auto *root = new TreeNode(pre_order[root_index]);\n    root_index++;\n    // \u4ece\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u548c\u5f53\u524d\u6839\u8282\u70b9\u5bf9\u5e94\u7684\u4e0b\u6807\n    // \u5176\u5de6\u8fb9\u5c31\u662f\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u53f3\u8fb9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570+1\n    int in_index = find(in_order.begin() + in_begin, in_order.begin() + in_end, root-&gt;val)\n                - in_order.begin();\n    // \u5148\u5efa\u5de6\u5b50\u6811\u518d\u5efa\u53f3\u5b50\u6811\n    root-&gt;left  = build(in_begin, in_index);\n    root-&gt;right = build(in_index + 1, in_end);\n    return root;\n  };\n  return build(0, in_order.size());\n}\n</code></pre> <p>\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811</p> C++<pre><code>TreeNode *build_tree(const vector&lt;int&gt; &amp;post_order, const vector&lt;int&gt; &amp;in_order) {\n  int root_index = post_order.size() - 1;\n  // \u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u7b80\u5316std::find\n  std::function&lt;TreeNode *(int, int)&gt; build = [&amp;](int in_begin, int in_end) -&gt; TreeNode * {\n    if (in_begin &gt;= in_end) { return nullptr; }\n    auto *root = new TreeNode(post_order[root_index]);\n    root_index--;\n    // \u4ece\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u548c\u5f53\u524d\u6839\u8282\u70b9\u5bf9\u5e94\u7684\u4e0b\u6807\n    // \u5176\u5de6\u8fb9\u5c31\u662f\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u53f3\u8fb9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6ce8\u610f\u7b2c\u4e00\u4e2a\u53c2\u6570+1\n    int in_index = find(in_order.begin() + in_begin, in_order.begin() + in_end, root-&gt;val)\n                - in_order.begin();\n    // \u5148\u5efa\u53f3\u5b50\u6811\u518d\u5efa\u5de6\u5b50\u6811\n    root-&gt;right = build(in_index + 1, in_end);\n    root-&gt;left  = build(in_begin, in_index);\n    return root;\n  };\n  return build(0, in_order.size());\n}\n</code></pre> <p>\u4f18\u5316</p> <p>\u7531\u4e8e\u6811\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u52a0\u901f\u67e5\u627e\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> \u6062\u590d\u591a\u53c9\u6811 <p>\u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u8282\u70b9\u7684\u6709\u6839\u591a\u53c9\u6811\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\uff0c\u6c42\u5176\u6bcf\u4e00\u5c42\u7684\u6700\u53f3\u4fa7\u8282\u70b9\u7684\u7f16\u53f7\u3002</p> Hint <ul> <li>\u591a\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u4f9d\u6b21\u8bbf\u95ee\u6bcf\u4e2a\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u7ed3\u679c root \\longrightarrow children(1..k)</li> <li>\u591a\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff1a\u4f9d\u6b21\u8bbf\u95ee\u6bcf\u4e2a\u5b50\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9 children(1..k) \\longrightarrow root</li> </ul> <p>\u4ec5\u51ed\u8fd9\u4e24\u79cd\u904d\u5386\u65e0\u6cd5\u552f\u4e00\u786e\u5b9a\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e00\u5c42\u7684\u6700\u53f3\u4fa7\u8282\u70b9\u7f16\u53f7\u662f\u552f\u4e00\u7684\u3002\u4e0d\u9700\u8981\u552f\u4e00\u7684\u6811\u7ed3\u6784\uff0c\u53ea\u8981\u80fd\u5f97\u5230\"\u904d\u5386\u7684\u5c42\u6b21\u8fb9\u754c\"\uff0c\u5c31\u80fd\u6b63\u786e\u8f93\u51fa\u6bcf\u5c42\u6700\u53f3\u8282\u70b9\u3002</p> <p>NOT FULLY TESTED</p> <p>\u8be5\u4ee3\u7801\u672a\u7ecf\u5145\u5206\u6d4b\u8bd5\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\nstruct Node {\n  int val;\n  vector&lt;Node *&gt; children;\n\n  Node(int v) : val(v) {}\n};\n\nNode *build_tree(const vector&lt;int&gt; &amp;pre_order, const vector&lt;int&gt; &amp;post_order) {\n  int n = pre_order.size();\n  unordered_map&lt;int, int&gt; pos;\n  for (int i = 0; i &lt; n; ++i) { pos[post_order[i]] = i; }  // \u540e\u5e8f\u4f4d\u7f6e\u7d22\u5f15\n\n  int root_index = 0;  // \u5f53\u524d\u5904\u7406\u7684\u524d\u5e8f\u4e0b\u6807\n  // \u5de6\u95ed\u53f3\u95ed\u533a\u95f4\n  function&lt;Node *(int, int)&gt; build = [&amp;](int left, int right) -&gt; Node * {\n    if (left &gt; right) { return nullptr; }\n    Node *root = new Node(pre_order[root_index]);\n    root_index++;\n    if (left == right) { return root; }\n\n    while (root_index &lt; n &amp;&amp; left &lt;= right - 1) {\n      int child_val = pre_order[root_index];\n      int j         = pos[child_val];\n      if (j &gt; right - 1) break;\n      root-&gt;children.push_back(build(left, j));\n      left = j + 1;\n    }\n    return root;\n  };\n\n  return build(0, n - 1);\n}\n\nvector&lt;int&gt; level_order(Node *root) {\n  if (root == nullptr) return {};\n  // \u5c42\u5e8f\u904d\u5386\u627e\u6bcf\u5c42\u6700\u53f3\u8282\u70b9\n  queue&lt;pair&lt;Node *, int&gt;&gt; q;\n  q.push({root, 0});\n  vector&lt;int&gt; rightmost;\n\n  while (!q.empty()) {\n    auto [node, depth] = q.front();\n    q.pop();\n    if ((int)rightmost.size() &lt;= depth)\n      rightmost.push_back(node-&gt;val);\n    else\n      rightmost[depth] = node-&gt;val;\n    for (auto ch : node-&gt;children) q.push({ch, depth + 1});\n  }\n  return rightmost;\n}\n\nint main() {\n  int n;\n  {\n    n                      = 7;\n    vector&lt;int&gt; pre_order  = {1, 2, 4, 5, 3, 6, 7};\n    vector&lt;int&gt; post_order = {4, 5, 2, 6, 7, 3, 1};\n\n    Node *root             = build_tree(pre_order, post_order);\n    vector&lt;int&gt; rightmost  = level_order(root);\n    // 1 3 7\n    for (int x : rightmost) { cout &lt;&lt; x &lt;&lt; \" \"; };\n    cout &lt;&lt; \"\\n\";\n  }\n  {\n    cin &gt;&gt; n;\n    vector&lt;int&gt; pre_order(n), post_order(n);\n    for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; pre_order[i]; }\n    for (int i = 0; i &lt; n; ++i) { cin &gt;&gt; post_order[i]; }\n\n    Node *root            = build_tree(pre_order, post_order);\n    vector&lt;int&gt; rightmost = level_order(root);\n    for (int x : rightmost) { cout &lt;&lt; x &lt;&lt; \" \"; };\n    cout &lt;&lt; \"\\n\";\n  }\n  return 0;\n}\n</code></pre>","tags":["Tree","\u904d\u5386","Traverse","\u91cd\u5efa\u4e8c\u53c9\u6811","Build Tree","Morris \u904d\u5386"]},{"location":"code/algorithm/Tree/Traversal/#morris-\u904d\u5386","title":"Morris \u904d\u5386","text":"<p>\\text{Morris} \u904d\u5386\u662f\u4e00\u79cd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4e8c\u53c9\u6811\u904d\u5386\u7684\u65b9\u6cd5\u3002\u5b83\u901a\u8fc7\u4fee\u6539\u6811\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u904d\u5386\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9</li> <li>\u5f53\u5f53\u524d\u8282\u70b9\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<ol> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u5e76\u5c06\u5f53\u524d\u8282\u70b9\u79fb\u52a8\u5230\u53f3\u5b50\u8282\u70b9</li> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5219\u627e\u5230\u5f53\u524d\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\uff08\u5373\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u7684\u8282\u70b9\uff09<ol> <li>\u5982\u679c\u6700\u53f3\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u5c06\u5176\u53f3\u5b50\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u79fb\u52a8\u5230\u5de6\u5b50\u8282\u70b9</li> <li>\u5982\u679c\u6700\u53f3\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u5219\u5c06\u5176\u53f3\u5b50\u8282\u70b9\u8bbe\u4e3a\u7a7a\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u79fb\u52a8\u5230\u53f3\u5b50\u8282\u70b9</li> </ol> </li> </ol> </li> <li>\u91cd\u590d\u6b65\u9aa4 2 \u76f4\u5230\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a</li> </ol> \\text{Morris} \u904d\u5386 \u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5b9a\u4e49 C++<pre><code>struct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n\n  TreeNode() : val(0), left(nullptr), right(nullptr) {}\n\n  explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n\n  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n</code></pre> Morris \u904d\u5386\u524d\u5e8f\u904d\u5386\u4e2d\u5e8f\u904d\u5386\u540e\u5e8f\u904d\u5386 C++<pre><code>vector&lt;int&gt; morris_traversal(TreeNode *root) {\n  vector&lt;int&gt; morris_traverse;\n  TreeNode *current = root;\n  while (current != nullptr) {\n    morris_traverse.emplace_back(current-&gt;val);  // \u6536\u96c6morris\u904d\u5386\u987a\u5e8f\n    if (current-&gt;left == nullptr) {              // \u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      current = current-&gt;right;\n      continue;\n    }\n    // \u6709\u5de6\u5b50\u6811\n    TreeNode *most_right = current-&gt;left;  // \u627e\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n    while (most_right-&gt;right != nullptr &amp;&amp; most_right-&gt;right != current) {\n      most_right = most_right-&gt;right;\n    }\n    if (most_right-&gt;right == nullptr) {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u4e3a\u7a7a\uff0c\u5efa\u7acb\u7ebf\u7d22\uff0c\u8f6c\u5411\u5de6\u5b50\u6811\n      most_right-&gt;right = current;\n      current           = current-&gt;left;\n    } else {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u8bf4\u660e\u5de6\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u65ad\u5f00\u7ebf\u7d22\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      most_right-&gt;right = nullptr;\n      current           = current-&gt;right;\n    }\n  }\n  return morris_traverse;\n}\n</code></pre> C++<pre><code>vector&lt;int&gt; morris_pre_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  TreeNode *current = root;\n  while (current != nullptr) {\n    if (current-&gt;left == nullptr) {         // \u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      traverse.emplace_back(current-&gt;val);  // \u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u8282\u70b9\u65f6\u8bbf\u95ee\n      current = current-&gt;right;\n      continue;\n    }\n    // \u6709\u5de6\u5b50\u6811\n    TreeNode *most_right = current-&gt;left;  // \u627e\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n    while (most_right-&gt;right != nullptr &amp;&amp; most_right-&gt;right != current) {\n      most_right = most_right-&gt;right;\n    }\n    if (most_right-&gt;right == nullptr) {     // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u4e3a\u7a7a\uff0c\u5efa\u7acb\u7ebf\u7d22\uff0c\u8f6c\u5411\u5de6\u5b50\u6811\n      traverse.emplace_back(current-&gt;val);  // \u5de6\u5b50\u6811\u4ecd\u672a\u904d\u5386, \u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u8282\u70b9\u65f6\u8bbf\u95ee\n      most_right-&gt;right = current;\n      current           = current-&gt;left;\n    } else {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u8bf4\u660e\u5de6\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u65ad\u5f00\u7ebf\u7d22\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      most_right-&gt;right = nullptr;\n      current           = current-&gt;right;\n    }\n  }\n  return traverse;\n}\n</code></pre> C++<pre><code>vector&lt;int&gt; morris_in_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  TreeNode *current = root;\n  while (current != nullptr) {\n    if (current-&gt;left == nullptr) {         // \u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      traverse.emplace_back(current-&gt;val);  // \u8bbf\u95ee\u5f53\u524d\u8282\u70b9\n      current = current-&gt;right;\n      continue;\n    }\n    // \u6709\u5de6\u5b50\u6811\n    TreeNode *most_right = current-&gt;left;  // \u627e\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n    while (most_right-&gt;right != nullptr &amp;&amp; most_right-&gt;right != current) {\n      most_right = most_right-&gt;right;\n    }\n    if (most_right-&gt;right == nullptr) {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u4e3a\u7a7a\uff0c\u5efa\u7acb\u7ebf\u7d22\uff0c\u8f6c\u5411\u5de6\u5b50\u6811\n      most_right-&gt;right = current;\n      current           = current-&gt;left;\n    } else {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u8bf4\u660e\u5de6\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u65ad\u5f00\u7ebf\u7d22\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      most_right-&gt;right = nullptr;\n      traverse.emplace_back(current-&gt;val);  // \u5de6\u5b50\u6811\u5df2\u904d\u5386, \u8bbf\u95ee\u5f53\u524d\u8282\u70b9\n      current = current-&gt;right;\n    }\n  }\n  return traverse;\n}\n</code></pre> C++<pre><code>vector&lt;int&gt; morris_post_order_traversal(TreeNode *root) {\n  vector&lt;int&gt; traverse;\n  TreeNode *current = root;\n\n  // \u9006\u5e8f\u8f93\u51fa\u94fe\u8868\u4e0a\u7684\u8282\u70b9\u503c\n  auto reverse = [](TreeNode *from) {\n    TreeNode *x = nullptr, *y = nullptr;\n    while (from != nullptr) {\n      y           = from-&gt;right;\n      from-&gt;right = x;\n      x           = from;\n      from        = y;\n    }\n    return x;\n  };\n\n  // \u9006\u5e8f\u6536\u96c6 from -&gt; ... -&gt; \u8fd9\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u503c\n  auto collect = [&amp;](TreeNode *from) {\n    TreeNode *tail    = reverse(from);  // \u53cd\u8f6c\u94fe\u8868\n    TreeNode *current = tail;\n    while (current != nullptr) {\n      traverse.emplace_back(current-&gt;val);\n      current = current-&gt;right;\n    }\n    reverse(tail);  // \u6062\u590d\u94fe\u8868\u987a\u5e8f\n  };\n\n  while (current != nullptr) {\n    if (current-&gt;left == nullptr) {  // \u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      current = current-&gt;right;\n      continue;\n    }\n    // \u6709\u5de6\u5b50\u6811\n    TreeNode *most_right = current-&gt;left;  // \u627e\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n    while (most_right-&gt;right != nullptr &amp;&amp; most_right-&gt;right != current) {\n      most_right = most_right-&gt;right;\n    }\n    if (most_right-&gt;right == nullptr) {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u4e3a\u7a7a\uff0c\u5efa\u7acb\u7ebf\u7d22\uff0c\u8f6c\u5411\u5de6\u5b50\u6811\n      most_right-&gt;right = current;\n      current           = current-&gt;left;\n    } else {  // \u6700\u53f3\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u8bf4\u660e\u5de6\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u65ad\u5f00\u7ebf\u7d22\uff0c\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u8f6c\u5411\u53f3\u5b50\u6811\n      most_right-&gt;right = nullptr;\n      collect(current-&gt;left);  // \u6536\u96c6\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8def\u5f84\n      current = current-&gt;right;\n    }\n  }\n  collect(root);  // \u6700\u540e\u6536\u96c6\u6574\u68f5\u6811\u7684\u53f3\u94fe\n  return traverse;\n}\n</code></pre>","tags":["Tree","\u904d\u5386","Traverse","\u91cd\u5efa\u4e8c\u53c9\u6811","Build Tree","Morris \u904d\u5386"]},{"location":"code/algorithm/Trick/BackInTime/","title":"\u65f6\u5149\u5012\u6d41","text":"","tags":["BackInTime"]},{"location":"code/algorithm/Trick/BackInTime/#\u65f6\u5149\u5012\u6d41","title":"\u65f6\u5149\u5012\u6d41","text":"<p>\u65f6\u5149\u5012\u6d41\u662f\u4e00\u79cd\u5904\u7406\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u7684\u6280\u5de7\u3002\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u64cd\u4f5c\u987a\u5e8f\u53cd\u8f6c\uff0c\u901a\u8fc7\u4ece\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u5f00\u59cb\u9006\u5e8f\u5904\u7406\u64cd\u4f5c\uff0c\u4ece\u800c\u7b80\u5316\u95ee\u9898\u7684\u590d\u6742\u5ea6\u3002</p> \u822a\u7ebf\u89c4\u5212 <p>\u7ed9\u5b9a\u4e00\u5f20\u6709 n \u4e2a\u8282\u70b9\u548c m \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002\u521d\u59cb\u65f6\u56fe\u4e2d\u5305\u542b\u6240\u6709\u8fb9\u3002\u73b0\u5728\u6709 q \u6b21\u64cd\u4f5c, \u6bcf\u6b21\u64cd\u4f5c\u8981\u4e48\u5220\u9664\u4e00\u6761\u8fb9, \u8981\u4e48\u8be2\u95ee\u4e24\u70b9\u95f4\u7684\u5173\u952e\u8fb9\u6570\u91cf\uff08u \u548c v \u4e4b\u95f4\u7684\u8fb9, \u5982\u679c\u5220\u9664\u8be5\u8fb9\u4f1a\u4f7f\u5f97 u \u548c v \u4e0d\u8fde\u901a, \u5219\u8be5\u8fb9\u4e3a\u5173\u952e\u8fb9\uff09\u3002\u8bf7\u4f60\u56de\u7b54\u6240\u6709\u8be2\u95ee\u3002\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u56fe\u4ecd\u7136\u8fde\u901a\u3002</p> Hint <p>\u7531\u4e8e\u5220\u9664\u8fb9\u6700\u540e\u4ecd\u7136\u8fde\u901a\uff0c\u8bf4\u660e\u5220\u9664\u7684\u8fb9\u90fd\u662f\u975e\u5173\u952e\u8fb9\u3002\u56e0\u6b64\u53ef\u4ee5\u5c06\u6240\u6709\u5220\u9664\u64cd\u4f5c\u9006\u5e8f\u5904\u7406, \u76f8\u5f53\u4e8e\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\u3002\u800c\u52a0\u5165\u8fb9\u4e0d\u4f1a\u589e\u52a0\u5173\u952e\u8fb9\u7684\u6570\u91cf, \u53ea\u4f1a\u51cf\u5c11\u5173\u952e\u8fb9\u7684\u6570\u91cf\u3002\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u5f53\u524d\u56fe\u7684\u5173\u952e\u8fb9\u6570\u91cf\u3002</p> <p>\u6ce8\u610f\u5220\u9664\u64cd\u4f5c\u5b8c\u6210\u540e\u56fe\u4ecd\u53ef\u80fd\u6709\u975e\u5173\u952e\u8fb9\uff0c\u8fd9\u4e9b\u8fb9\u4f1a\u5bf9\u6811\u8fb9\u7684\u5173\u952e\u6027\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u6b64\u5728\u9006\u5e8f\u5904\u7406\u65f6\u4e5f\u9700\u8981\u5c06\u8fd9\u4e9b\u975e\u5173\u952e\u8fb9\u52a0\u5165\u56fe\u4e2d\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;set&gt;\n#include &lt;tuple&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nusing PII  = pair&lt;int, int&gt;;\nusing TIII = tuple&lt;int, int, int&gt;;\n\nstruct segment_tree {\n  vector&lt;int&gt; sum;          // \u533a\u95f4\u548c\n  vector&lt;int&gt; tag_set;      // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\n  vector&lt;int&gt; tag_set_val;  // \u533a\u95f4\u8d4b\u503c\u61d2\u6807\u8bb0\u503c, \u53ea\u6709tag_set\u4e3atrue\u65f6\u8be5\u503c\u624d\u6709\u610f\u4e49\n\n  explicit segment_tree(int n) : sum(n * 4), tag_set(n * 4), tag_set_val(n * 4) {}\n\n  void push_up(int i) { sum[i] = sum[2 * i] + sum[2 * i + 1]; }\n\n  // \u6784\u5efa\u7ebf\u6bb5\u6811\n  void build(int i, int left, int right) {\n    if (left == right) {  // \u53f6\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u521d\u59cb\u5316, \u5c06dfn\u6620\u5c04\u56de\u8282\u70b9\u7f16\u53f7\n      sum[i] = 1;\n      return;\n    }\n    int mid = left + ((right - left) / 2);\n    build(2 * i, left, mid);\n    build(2 * i + 1, mid + 1, right);\n    push_up(i);\n  }\n\n  void lazy_set(int i, int val, int count) {\n    sum[i]         = count * val;\n    tag_set[i]     = 1;\n    tag_set_val[i] = val;\n  }\n\n  // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n  void push_down(int i, int left_count, int right_count) {\n    if (tag_set[i] != 0) {  // \u5904\u7406\u8d4b\u503c\n      lazy_set(2 * i, tag_set_val[i], left_count);\n      lazy_set(2 * i + 1, tag_set_val[i], right_count);\n      tag_set[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u8d4b\u503c\u6807\u8bb0\n    }\n  }\n\n  // \u533a\u95f4\u8d4b\u503c: range_set(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u4fee\u6539\u4e3a val\n  void range_set(int ql, int qr, int val, int i, int l, int r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n      lazy_set(i, val, r - l + 1);\n      return;\n    }\n    int mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    if (ql &lt;= mid) { range_set(ql, qr, val, 2 * i, l, mid); }\n    if (qr &gt; mid) { range_set(ql, qr, val, 2 * i + 1, mid + 1, r); }\n    push_up(i);\n  }\n\n  // \u533a\u95f4\u6c42\u548c: range_sum(x, y, 1, 1, n) \u67e5\u8be2\u533a\u95f4 [x,y] \u7684\u548c\n  int range_sum(int ql, int qr, int i, int l, int r) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) { return sum[i]; }  // \u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\n    int mid = l + ((r - l) / 2);\n    push_down(i, mid - l + 1, r - mid);\n    // \u6c47\u603b\u7ed3\u679c\n    int res = 0;\n    if (ql &lt;= mid) { res += range_sum(ql, qr, 2 * i, l, mid); }\n    if (qr &gt; mid) { res += range_sum(ql, qr, 2 * i + 1, mid + 1, r); }\n    return res;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  set&lt;PII&gt; edges;  // \u5b58\u50a8\u5f53\u524d\u56fe\u4e2d\u7684\u8fb9, \u6bcf\u6761\u8fb9\u53ea\u5b58\u4e00\u6b21, (u,v): u&lt;v\n  for (int i = 0; i &lt; m; ++i) {\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    edges.insert({min(u, v), max(u, v)});\n  }\n\n  vector&lt;TIII&gt; operations;\n  int op;\n  while (cin &gt;&gt; op) {\n    if (op == -1) { break; }\n    int u, v;\n    cin &gt;&gt; u &gt;&gt; v;\n    if (op == 0) {  // \u5220\u9664\u64cd\u4f5c\n      operations.emplace_back(0, min(u, v), max(u, v));\n      edges.erase({min(u, v), max(u, v)});  // \u4e0d\u80fd\u5728\u751f\u6210\u6811\u4e2d\u4f7f\u7528\u8be5\u8fb9\n    } else {\n      operations.emplace_back(1, min(u, v), max(u, v));  // \u67e5\u8be2\n    }\n  }\n\n  // \u5e76\u67e5\u96c6, \u6784\u9020\u751f\u6210\u6811\n  vector&lt;int&gt; root(n + 1);\n  iota(root.begin(), root.end(), 0);\n  function&lt;int(int)&gt; find;\n  find = [&amp;](int x) { return root[x] == x ? x : root[x] = find(root[x]); };\n\n  vector&lt;vector&lt;int&gt;&gt; tree(n + 1);\n  for (const auto &amp;[u, v] : edges) {\n    int ru = find(u);\n    int rv = find(v);\n    if (ru != rv) {  // \u6811\u8fb9\n      root[rv] = ru;\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    } else {                             // \u5269\u4e0b\u7684\u975e\u6811\u8fb9\n      operations.emplace_back(0, u, v);  // \u76f8\u5f53\u4e8e\u5220\u9664\u64cd\u4f5c, \u6700\u540e\u9700\u8981\u4f18\u5148\u5220\u9664\u64cd\u4f5c\u7684\u8fb9\u8fdb\u884c\u64cd\u4f5c\n    }\n  }\n  // \u91cd\u94fe\u5256\u5206\u51c6\u5907\n  int r = 1;  // \u4ee51\u53f7\u8282\u70b9\u4e3a\u6839\u8282\u70b9\n  // \u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n  vector&lt;int&gt; parent(n + 1), depth(n + 1), size(n + 1), heavy_son(n + 1, -1);\n  auto dfs = [&amp;](auto &amp;self, int u, int from) -&gt; void {\n    parent[u]    = from;\n    size[u]      = 1;\n    int max_size = 0;\n    for (int v : tree[u]) {\n      if (v != from) {\n        depth[v] = depth[u] + 1;\n        self(self, v, u);\n        size[u] += size[v];\n        if (size[v] &gt; max_size) {\n          max_size     = size[v];\n          heavy_son[u] = v;\n        }\n      }\n    }\n  };\n  dfs(dfs, r, -1);  // \u8ba1\u7b97\u7236\u8282\u70b9, \u6df1\u5ea6, \u5b50\u6811\u5927\u5c0f, \u91cd\u513f\u5b50\n\n  // \u94fe\u9876, dfs\u5e8f, dfs\u53cd\u5e8f(dfn\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\n  vector&lt;int&gt; top(n + 1), dfn(n + 1), rank(n + 1);\n  int timer      = 0;\n  auto decompose = [&amp;](auto &amp;self, int u, int t) -&gt; void {\n    top[u]      = t;\n    dfn[u]      = ++timer;\n    rank[timer] = u;\n    if (heavy_son[u] != -1) { self(self, heavy_son[u], t); }\n    for (int v : tree[u]) {  // \u5904\u7406\u8f7b\u513f\u5b50, \u8f7b\u513f\u5b50\u5404\u81ea\u6210\u94fe\uff0c\u94fe\u9876\u4e3a\u81ea\u5df1\n      if (v != parent[u] &amp;&amp; v != heavy_son[u]) { self(self, v, v); }\n    }\n  };\n  decompose(decompose, r, r);  // \u91cd\u94fe\u5256\u5206, \u6839\u8282\u70b9\u4e3ar, \u94fe\u9876\u4e3a\u81ea\u5df1\n  // \u6784\u5efa\u7ebf\u6bb5\u6811, \u4e00\u5f00\u59cb\u90fd\u662f\u5173\u952e\u8fb9, \u6240\u4ee5\u70b9\u6743\u90fd\u4e3a1\n  segment_tree seg(n);\n  seg.build(1, 1, n);\n  // \u8fb9\u6743\u4e0b\u653e\u5230\u5b50\u8282\u70b9\u7684\u70b9\u6743\u4e0a, \u6839\u8282\u70b9\u6e050\n  seg.range_set(1, 1, 0, 1, 1, n);\n  // \u67e5\u8be2u-v\u8def\u5f84\u4e0a\u7684\u5173\u952e\u8fb9\u6570\n  auto path_sum = [&amp;](int u, int v) {\n    int res = 0;\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      res = (res + seg.range_sum(dfn[top[u]], dfn[u], 1, 1, n));\n      u   = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    res = (res + seg.range_sum(dfn[u] + 1, dfn[v], 1, 1, n));\n    return res;\n  };\n  // \u8def\u5f84\u8d4b\u503c, \u6b64\u5904\u7528\u4e8e\u5c06u-v\u4e4b\u95f4\u7684\u8fb9\u6743\u6e050\n  auto path_set = [&amp;](int u, int v, int val) {\n    while (top[u] != top[v]) {\n      if (depth[top[u]] &lt; depth[top[v]]) { swap(u, v); }\n      seg.range_set(dfn[top[u]], dfn[u], val, 1, 1, n);\n      u = parent[top[u]];\n    }\n    if (depth[u] &gt; depth[v]) { swap(u, v); }\n    seg.range_set(dfn[u] + 1, dfn[v], val, 1, 1, n);\n  };\n\n  vector&lt;int&gt; answer;\n  for (int i = operations.size() - 1; i &gt;= 0; --i) {\n    auto [op, u, v] = operations[i];\n    if (op == 0) {  // \u5220\u9664\u64cd\u4f5c, \u9006\u7740\u5c31\u662f\u5c06\u8fb9\u52a0\u56de\u53bb, uv\u4e4b\u95f4\u7684\u6811\u8fb9\u90fd\u53d8\u6210\u975e\u5173\u952e\u8fb9\n      path_set(u, v, 0);\n    } else {\n      int ans = path_sum(u, v);\n      answer.push_back(ans);\n    }\n  }\n  reverse(answer.begin(), answer.end());\n  for (int ans : answer) { cout &lt;&lt; ans &lt;&lt; \"\\n\"; }\n\n  return 0;\n}\n</code></pre>","tags":["BackInTime"]},{"location":"code/algorithm/Trick/ElementCount/","title":"\u5143\u7d20\u8ba1\u6570","text":"","tags":["Element Count","Unique Count","Balanced Frequency"]},{"location":"code/algorithm/Trick/ElementCount/#\u5143\u7d20\u8ba1\u6570","title":"\u5143\u7d20\u8ba1\u6570","text":"","tags":["Element Count","Unique Count","Balanced Frequency"]},{"location":"code/algorithm/Trick/ElementCount/#\u4e0d\u540c\u5143\u7d20\u8ba1\u6570","title":"\u4e0d\u540c\u5143\u7d20\u8ba1\u6570","text":"<p>\u5728\u533a\u95f4\u67e5\u8be2\u4e2d\uff0c\u7edf\u8ba1\u533a\u95f4\u5185\u4e0d\u540c\u5143\u7d20\u7684\u6838\u5fc3\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a</p> <p>\u5728\u5904\u7406\u533a\u95f4\u67e5\u8be2\u65f6\uff0c\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u9010\u6b65\u6269\u5c55\u53f3\u7aef\u70b9\u3002\u5f53\u53d1\u73b0\u76f8\u540c\u5143\u7d20\u65f6\uff0c\u64a4\u9500\u5176\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u5728\u5f53\u524d\u533a\u95f4\u5185\u53ea\u88ab\u8ba1\u6570\u4e00\u6b21\u3002</p> <p>\u56e0\u4e3a\u662f\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u88ab\u64a4\u9500\u7684\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u67e5\u8be2\u7ed3\u679c\u3002</p> HH \u7684\u9879\u94fe <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217\u548c m \u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u8ba1\u7b97\u5b50\u533a\u95f4 [l, r] \u4e2d\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570\u3002</p> \u79bb\u7ebf\u67e5\u8be2\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct BIT {\n  explicit BIT(int64_t n) : n(n), tree(n + 1) {}\n\n  void point_add(int64_t x, int64_t delta) {\n    for (; x &lt;= n; x += lowbit(x)) { tree[x] += delta; }\n  }\n\n  int64_t sum(int64_t x) {\n    int64_t ret = 0;\n    for (; x &gt; 0; x -= lowbit(x)) { ret += tree[x]; }\n    return ret;\n  }\n\n  int64_t range_sum(int64_t x, int64_t y) { return sum(y) - sum(x - 1); }\n\n  static int64_t lowbit(int64_t x) { return x &amp; (-x); }\n\n  int64_t n;\n  vector&lt;int64_t&gt; tree;  // one-based indexing\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  BIT bit(n);\n  vector&lt;int64_t&gt; nums(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n\n  vector&lt;int64_t&gt; sorted_nums = nums;\n  sort(sorted_nums.begin() + 1, sorted_nums.end());\n  auto get_rank = [&amp;](int64_t x) {  // \u8fd4\u56dex\u7684\u6392\u540d\uff0c\u6392\u540d\u4ece1\u5f00\u59cb\n    return lower_bound(sorted_nums.begin() + 1, sorted_nums.end(), x) - sorted_nums.begin();\n  };\n\n  bit = BIT(n);\n  vector&lt;int64_t&gt; last(n + 1, 0);  // last[i]\u8868\u793a\u7b2ci\u4e2a\u6570\u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n\n  using TIII = tuple&lt;int64_t, int64_t, int64_t&gt;;  // left, right, id\n\n  int64_t m;\n  cin &gt;&gt; m;\n  vector&lt;TIII&gt; queries(m);\n  for (int64_t i = 0; i &lt; m; i++) {\n    int64_t left, right;\n    cin &gt;&gt; left &gt;&gt; right;\n    queries[i] = make_tuple(left, right, i);\n  }\n  sort(queries.begin(), queries.end(),\n       [](const TIII &amp;a, const TIII &amp;b) { return get&lt;1&gt;(a) &lt; get&lt;1&gt;(b); });\n\n  vector&lt;int64_t&gt; answers(m);\n  int i = 1;\n  for (auto [left, right, id] : queries) {\n    // \u5904\u7406\u6bcf\u4e2a\u67e5\u8be2\n    for (; i &lt;= right; i++) {\n      int64_t rank = get_rank(nums[i]);\n      // \u53d6\u6d88\u4e0a\u6b21\u51fa\u73b0\n      if (last[rank] != 0) { bit.point_add(last[rank], -1); }\n      bit.point_add(i, 1);  // \u6dfb\u52a0\u672c\u6b21\u51fa\u73b0\n      last[rank] = i;\n    }\n    answers[id] = bit.range_sum(left, right);\n  }\n\n  for (const auto &amp;ans : answers) { cout &lt;&lt; ans &lt;&lt; '\\n'; }\n\n  return 0;\n}\n</code></pre> <p>\u7248\u672c</p> <p>\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u7248\u672c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u6765\u8bb0\u5f55\u5143\u7d20\u7684\u51fa\u73b0\u60c5\u51b5\u3002\u5f53\u4e00\u4e2a\u5143\u7d20\u518d\u6b21\u51fa\u73b0\u65f6\uff0c\u66f4\u65b0\u5176\u4e0a\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u4f4d\u7f6e\u7684\u503c\u8bbe\u4e3a0\uff0c\u4ece\u800c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u5728\u5f53\u524d\u533a\u95f4\u5185\u53ea\u88ab\u8ba1\u6570\u4e00\u6b21\u3002</p> <p>TLE</p> <p>\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7248\u672c\u53ef\u4ee5\u5b9e\u73b0\u5728\u7ebf\u67e5\u8be2\uff0c\u6269\u5c55\u5230\u65b0\u7684\u53f3\u7aef\u70b9\u65f6\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002\u7136\u800c\uff0c\u8fd9\u6837\u5b9e\u73b0\u5728\u4f1a TLE \u4e24\u4e2a\u6d4b\u8bd5\u70b9\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8be5\u95ee\u9898\u8fd8\u662f\u4f7f\u7528\u79bb\u7ebf\u67e5\u8be2\u3002</p> C++<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n  int left;\n  int right;\n  int size;  // \u8bb0\u5f55\u8be5\u8282\u70b9\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u5143\u7d20\n};\n\nvector&lt;node&gt; nodes;  // \u6240\u6709\u8282\u70b9\n\nstruct p_segment_tree {\n  p_segment_tree() {\n    nodes.clear();               // \u6e05\u7a7a\u8282\u70b9\n    nodes.emplace_back(node{});  // \u5360\u4f4d, \u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb\n  }\n\n  // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u51fa\u73b0\u6b21\u6570\n  static void push_up(int i) {\n    nodes[i].size = nodes[nodes[i].left].size + nodes[nodes[i].right].size;\n  }\n\n  static int clone(int i) {\n    int new_node = nodes.size();   // \u65b0\u8282\u70b9\u7f16\u53f7\n    nodes.emplace_back(nodes[i]);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    return new_node;\n  }\n\n  // \u4fee\u6539\u8282\u70b9\u7684\u503c, \u8fd4\u56de\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\n  int update(int index, int val, int i, int l, int r) {\n    int new_node = clone(i);  // \u514b\u9686\u5f53\u524d\u8282\u70b9\n    if (l == r) {\n      nodes[new_node].size += val;\n      return new_node;\n    }\n    int mid = l + ((r - l) / 2);\n    if (index &lt;= mid) {\n      nodes[new_node].left = update(index, val, nodes[i].left, l, mid);\n    } else {\n      nodes[new_node].right = update(index, val, nodes[i].right, mid + 1, r);\n    }\n    push_up(new_node);\n    return new_node;\n  }\n\n  // \u67e5\u8be2\u5230\u5de6\u7aef\u70b9ql\u4e3a\u6b62\u7684\u533a\u95f4\u5143\u7d20\u4e2a\u6570\n  int query(int ql, int root_v, int l, int r) {\n    if (l == r) { return nodes[root_v].size; }\n    int mid = l + ((r - l) / 2);\n    if (ql &lt;= mid) {\n      return query(ql, nodes[root_v].left, l, mid) + nodes[nodes[root_v].right].size;\n    }\n    return query(ql, nodes[root_v].right, mid + 1, r);\n  };\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n;\n  cin &gt;&gt; n;\n  nodes.reserve(40 * n);  // \u9884\u4f30\u8282\u70b9\u6570\u91cf\uff0c\u907f\u514d\u591a\u6b21\u6269\u5bb9\n  vector&lt;int&gt; nums(n + 1);\n  for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; nums[i]; }\n\n  vector&lt;int&gt; sorted_nums = nums;\n  sort(sorted_nums.begin() + 1, sorted_nums.end());\n  auto get_rank = [&amp;](int x) {  // \u8fd4\u56dex\u7684\u6392\u540d\uff0c\u6392\u540d\u4ece1\u5f00\u59cb\n    return lower_bound(sorted_nums.begin() + 1, sorted_nums.end(), x) - sorted_nums.begin();\n  };\n\n  p_segment_tree pst;\n  vector&lt;int&gt; roots(n + 1);    // roots[i]\u8868\u793a\u524di\u4e2a\u6570\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\n  int v = 0;                   // \u5f53\u524d\u5904\u7406\u5230\u7b2cv\u4e2a\u6570, roots[0]\u8868\u793a\u7a7a\u6811\n  vector&lt;int&gt; last(n + 1, 0);  // last[i]\u8868\u793a\u7b2ci\u4e2a\u6570\u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n\n  int m;\n  cin &gt;&gt; m;\n\n  using TIII = tuple&lt;int, int, int&gt;;  // left, right, id\n  vector&lt;TIII&gt; queries(m);\n  for (int i = 0; i &lt; m; i++) {\n    int left, right;\n    cin &gt;&gt; left &gt;&gt; right;\n    queries[i] = make_tuple(left, right, i);\n  }\n  sort(queries.begin(), queries.end(),\n       [](const TIII &amp;a, const TIII &amp;b) { return get&lt;1&gt;(a) &lt; get&lt;1&gt;(b); });\n\n  vector&lt;int&gt; answers(m);\n  for (auto [left, right, id] : queries) {\n    while (v &lt; right) {\n      ++v;\n      int rank         = get_rank(nums[v]);\n      int current_root = roots[v - 1];\n      // \u53d6\u6d88\u4e0a\u6b21\u51fa\u73b0\n      if (last[rank] != 0) { current_root = pst.update(last[rank], -1, current_root, 1, n); }\n      current_root = pst.update(v, 1, current_root, 1, n);  // \u6dfb\u52a0\u672c\u6b21\u51fa\u73b0\n      roots[v]     = current_root;\n      last[rank]   = v;\n    }\n    answers[id] = pst.query(left, roots[right], 1, n);\n  }\n\n  for (const auto &amp;ans : answers) { cout &lt;&lt; ans &lt;&lt; '\\n'; }\n\n  return 0;\n}\n</code></pre>","tags":["Element Count","Unique Count","Balanced Frequency"]},{"location":"code/algorithm/Trick/ElementCount/#\u9891\u6b21\u5e73\u8861\u5b50\u6570\u7ec4","title":"\u9891\u6b21\u5e73\u8861\u5b50\u6570\u7ec4","text":"<p>\u9891\u6b21\u5e73\u8861\u7c7b\u95ee\u9898\u901a\u5e38\u6d89\u53ca\u5bfb\u627e\u4e00\u4e2a\u5b50\u533a\u95f4\u6ee1\u8db3\u67d0\u79cd\u8ba1\u6570\u5e73\u8861\u6761\u4ef6\u3002</p> <p>\u5bf9\u8fd9\u7c7b\u95ee\u9898\u901a\u5e38\u6bcf\u4e2a\u4f4d\u7f6e\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72b6\u6001\uff0c\u5e76\u5728\u524d\u7f00\u72b6\u6001\u4e0a\u4f7f\u7528\u54c8\u5e0c\u8868\u5bfb\u627e\u5339\u914d\u7684\u524d\u7f00\uff0c\u4ece\u800c\u786e\u5b9a\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u533a\u95f4\u3002</p> <p>\u5f62\u5f0f\u5316\u5730\uff1a</p>  \\text{feature}[i] = f(\\text{count}_1(i), \\text{count}_2(i), \\dots)  <p>\u82e5\u5b58\u5728 l &lt; r \u4f7f\u5f97</p>  \\text{feature}[r] = \\text{feature}[l],  <p>\u5219\u8bf4\u660e\u533a\u95f4 (l+1, r] \u662f\u4e00\u4e2a\u5e73\u8861\u533a\u95f4\u3002</p> <p>\u4e8e\u662f\u53ea\u9700\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7528\u4e8e\u8ba1\u7b97\u6700\u957f\u8ddd\u79bb\u3002</p> \u8fde\u7eed\u6570\u7ec4 <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums , \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u524d\u7f00\u548c</p> <p>\u5c06\u6570\u7ec4\u4e2d\u7684 0 \u66ff\u6362\u4e3a -1\uff0c\u7136\u540e\u8ba1\u7b97\u524d\u7f00\u548c\u3002\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u524d\u7f00\u548c\u76f8\u7b49\u7684\u4f4d\u7f6e i \u548c j\uff0c\u5b50\u6570\u7ec4 nums[i+1 \\ldots j] \u4e2d 0 \u548c 1 \u7684\u6570\u91cf\u76f8\u540c\u3002\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u524d\u7f00\u548c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5728\u904d\u5386\u6570\u7ec4\u65f6\u8ba1\u7b97\u51fa\u6700\u957f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u3002</p> C++<pre><code>#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int findMaxLength(vector&lt;int&gt; &amp;nums) {\n    unordered_map&lt;int, int&gt; first;\n    first[0]   = -1;  // \u524d\u7f00\u548c\u4e3a0\u65f6\uff0c\u8d77\u70b9\u5728 -1\n    int prefix = 0, res = 0;\n    for (int i = 0; i &lt; nums.size(); ++i) {\n      prefix += (nums[i] == 1 ? 1 : -1);\n      if (first.count(prefix)) {\n        res = max(res, i - first[prefix]);\n      } else {\n        first[prefix] = i;\n      }\n    }\n    return res;\n  }\n};\n</code></pre> \u6bcf\u4e2a\u5143\u97f3\u5305\u542b\u5076\u6570\u6b21\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32 <p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230\u542b\u6709\u6bcf\u4e2a\u5143\u97f3\u5b57\u6bcd\uff08a, e, i, o, u\uff09\u51fa\u73b0\u5076\u6570\u6b21\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u524d\u7f00\u548c</p> <p>\u5c06\u6bcf\u4e2a\u5143\u97f3\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u89c6\u4e3a\u4e00\u4e2a\u72b6\u6001\uff0c\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u72b6\u6001\u7684\u5947\u5076\u6027\u3002\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5728\u904d\u5386\u5b57\u7b26\u4e32\u65f6\u8ba1\u7b97\u51fa\u6700\u957f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5b57\u7b26\u4e32\u957f\u5ea6\u3002</p> C++<pre><code>#include &lt;string&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int findTheLongestSubstring(string s) {\n    unordered_map&lt;int, int&gt; first;\n    first[0] = -1;\n    int mask = 0, res = 0;\n\n    for (int i = 0; i &lt; s.size(); ++i) {\n      if (string(\"aeiou\").find(s[i]) != string::npos) { mask ^= 1 &lt;&lt; (s[i] - 'a'); }\n      if (first.count(mask)) {\n        res = max(res, i - first[mask]);\n      } else {\n        first[mask] = i;\n      }\n    }\n    return res;\n  }\n};\n</code></pre> \u6700\u957f\u7684\u5e73\u8861\u5b50\u4e32 II <p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b\u5b57\u7b26 'a'\u3001'b' \u548c 'c' \u7684\u5b57\u7b26\u4e32 s\u3002\u5982\u679c\u4e00\u4e2a\u5b50\u4e32\u4e2d\u6240\u6709\u4e0d\u540c\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u5b50\u4e32\u4e3a\u5e73\u8861\u5b50\u4e32\u3002\u8bf7\u8fd4\u56de s \u7684\u6700\u957f\u5e73\u8861\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u4e8c\u7ef4\u524d\u7f00\u5dee</p> <p>\u5206\u522b\u8ba8\u8bba\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u3001\u4e24\u79cd\u5b57\u7b26\u548c\u4e09\u79cd\u5b57\u7b26\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u4e24\u79cd\u5b57\u7b26\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u6cd5\uff0c\u8ba1\u7b97\u4e24\u4e2a\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u7684\u5dee\u503c\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u5dee\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u4e09\u79cd\u5b57\u7b26\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u72b6\u6001\u8868\u793a\u4e09\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5dee\u503c\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002</p> C++<pre><code>#include &lt;cstdint&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nclass Solution {\n public:\n  int longestBalanced(string s) {\n    int n   = s.size();\n    int res = 0;\n    {  // \u4e00\u79cd\u5b57\u6bcd\u76f8\u540c\n      for (int i = 0; i &lt; n;) {\n        int start = i;\n        for (i++; i &lt; n &amp;&amp; s[i] == s[i - 1]; i++);\n        res = max(res, i - start);\n      }\n    }\n    {  // \u4e24\u79cd\u5b57\u6bcd\u76f8\u540c\n      auto count = [&amp;](char x, char y) -&gt; void {\n        for (int i = 0; i &lt; n; i++) {  // \u679a\u4e3e\u8d77\u70b9, \u8df3\u8fc7\u4e0d\u5305\u542b x \u548c y \u7684\u5b57\u7b26\n          unordered_map&lt;int, int&gt; first;\n          first[0]   = i - 1;  // \u524d\u7f00\u548c\u4e3a0\u65f6\uff0c\u8d77\u70b9\u5728 i - 1\n          int prefix = 0;      // x \u7684\u4e2a\u6570\u51cf\u53bb y \u7684\u4e2a\u6570\n          for (; i &lt; n &amp;&amp; (s[i] == x || s[i] == y); i++) {\n            prefix += s[i] == x ? 1 : -1;\n            if (first.contains(prefix)) {\n              res = max(res, i - first[prefix]);\n            } else {\n              first[prefix] = i;\n            }\n          }\n        }\n      };\n      count('a', 'b');\n      count('a', 'c');\n      count('b', 'c');\n    }\n    {  // \u4e09\u79cd\u5b57\u6bcd\u76f8\u540c\n      unordered_map&lt;int64_t, int&gt; first;\n      int64_t cnt0 = 0, cnt1 = 0, cnt2 = 0;\n\n      auto encode\n          = [&amp;](int64_t x, int64_t y) -&gt; int64_t { return (x &lt;&lt; 32) ^ (y &amp; 0xFF'FF'FF'FF); };\n\n      first[encode(0, 0)] = -1;  // \u521d\u59cb\u72b6\u6001\n\n      for (int i = 0; i &lt; s.size(); ++i) {\n        if (s[i] == 'a') {\n          cnt0++;\n        } else if (s[i] == 'b') {\n          cnt1++;\n        } else {\n          cnt2++;\n        }\n        int64_t key = encode(cnt1 - cnt0, cnt2 - cnt0);\n        if (first.count(key)) {\n          res = max(res, i - first[key]);\n        } else {\n          first[key] = i;\n        }\n      }\n\n      return res;\n    }\n  }\n};\n</code></pre> \u6700\u957f\u5e73\u8861\u5b50\u6570\u7ec4 II <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u5982\u679c\u5b50\u6570\u7ec4\u4e2d\u4e0d\u540c\u5076\u6570\u7684\u6570\u91cf\u7b49\u4e8e\u4e0d\u540c\u5947\u6570\u7684\u6570\u91cf\uff0c\u5219\u79f0\u8be5\u5b50\u6570\u7ec4\u662f\u5e73\u8861\u7684\u3002</p> <p>\u8fd4\u56de\u6700\u957f\u5e73\u8861\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u7ebf\u6bb5\u6811 + \u524d\u7f00\u548c</p> <p>\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\u548c\u4fe1\u606f\u3002\u904d\u5386\u6570\u7ec4\u65f6\uff0c\u8ba1\u7b97\u5f53\u524d\u524d\u7f00\u548c\uff0c\u5e76\u6839\u636e\u5f53\u524d\u5143\u7d20\u7684\u5947\u5076\u6027\u66f4\u65b0\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u524d\u7f00\u548c\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u67e5\u8be2\u6700\u65e9\u51fa\u73b0\u8be5\u524d\u7f00\u548c\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa\u6700\u957f\u7684\u5e73\u8861\u5b50\u6570\u7ec4\u957f\u5ea6\u3002</p> <p>\u524d\u7f00\u548c\u7684\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u4e8e\u4f4d\u7f6e i\uff0c\u82e5 nums[i] \u4e3a\u5076\u6570\uff0c\u5219\u524d\u7f00\u548c\u52a0 1\uff0c\u5426\u5219\u51cf 1\u3002\u8fd9\u6837\uff0c\u524d\u7f00\u548c\u76f8\u7b49\u7684\u4f4d\u7f6e\u8868\u793a\u5728\u8be5\u533a\u95f4\u5185\u5076\u6570\u548c\u5947\u6570\u7684\u6570\u91cf\u76f8\u7b49(1)\u3002\u7531\u4e8e\u6bcf\u6b21\u66f4\u65b0\u65f6\u53ea\u4f1a\u52a0\u51cf 1\uff0c\u56e0\u6b64\u901a\u8fc7\u7ef4\u62a4\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u67e5\u8be2\u524d\u7f00\u548c\u7684\u4f4d\u7f6e\u3002</p> <p>\u6ce8\u610f\u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u5728\u5904\u7406\u524d\u7f00\u548c\u65f6\u9700\u8981\u8fdb\u884c\u9002\u5f53\u7684\u504f\u79fb\u3002</p> <ol> <li>\u5982\u679c\u533a\u95f4\u7684 min \\leq target \\leq max\uff0c\u90a3\u5fc5\u7136\u5b58\u5728\u67d0\u4e2a\u4f4d\u7f6e pos \u7b49\u4e8e target\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u66f4\u65b0\u53ea\u4f1a\u52a0\u51cf 1\uff0c\u6240\u4ee5\u533a\u95f4\u5185\u7684\u503c\u662f\u8fde\u7eed\u7684\u3002</li> </ol> C++<pre><code>#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Solution {\n  struct segment_tree {\n    vector&lt;int&gt; min;      // \u533a\u95f4\u6700\u5c0f\u503c\n    vector&lt;int&gt; max;      // \u533a\u95f4\u6700\u5927\u503c\n    vector&lt;int&gt; tag_add;  // \u533a\u95f4\u52a0\u6cd5\u61d2\u6807\u8bb0\n\n    explicit segment_tree(int n) : min(n * 4), max(n * 4), tag_add(n * 4) {}\n\n    void push_up(int i) {\n      min[i] = std::min(min[2 * i], min[2 * i + 1]);\n      max[i] = std::max(max[2 * i], max[2 * i + 1]);\n    }\n\n    void lazy_add(int i, int val, int count) {\n      tag_add[i] += val;\n\n      min[i]     += val;\n      max[i]     += val;\n    }\n\n    // \u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0\n    void push_down(int i, int left_count, int right_count) {\n      if (tag_add[i] != 0) {  // \u5c06\u52a0\u6cd5\u6807\u8bb0\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\n        lazy_add(2 * i, tag_add[i], left_count);\n        lazy_add(2 * i + 1, tag_add[i], right_count);\n        tag_add[i] = 0;  // \u6e05\u7a7a\u6839\u8282\u70b9\u52a0\u6cd5\u6807\u8bb0\n      }\n    }\n\n    // \u533a\u95f4\u52a0\u6cd5: range_add(x, y, val, 1, 1, n) \u5c06\u533a\u95f4 [x,y] \u7684\u503c\u52a0\u4e0a val\n    void range_add(int ql, int qr, int val, int i, int l, int r) {\n      if (ql &lt;= l &amp;&amp; r &lt;= qr) {  // \u533a\u95f4\u8986\u76d6, \u76f4\u63a5\u66f4\u65b0\n        lazy_add(i, val, r - l + 1);\n        return;\n      }\n      int mid = l + ((r - l) / 2);\n      push_down(i, mid - l + 1, r - mid);\n      if (ql &lt;= mid) { range_add(ql, qr, val, 2 * i, l, mid); }\n      if (qr &gt; mid) { range_add(ql, qr, val, 2 * i + 1, mid + 1, r); }\n      push_up(i);\n    }\n\n    // \u67e5\u627e\u533a\u95f4\u5185\u7b2c\u4e00\u4e2a\u7b49\u4e8e target \u7684\u4f4d\u7f6e, \u627e\u4e0d\u5230\u8fd4\u56de -1\n    int find_first(int ql, int qr, int target, int i, int l, int r) {\n      if (l &gt; qr || r &lt; ql || target &lt; min[i] || target &gt; max[i]) {  // \u65e0\u6548\u533a\u95f4\n        return -1;\n      }\n      if (l == r) {  // \u6b64\u5904\u5fc5\u7136\u7b49\u4e8e target\n        return l;\n      }\n      int mid = l + ((r - l) / 2);\n      push_down(i, mid - l + 1, r - mid);\n      int res = find_first(ql, qr, target, 2 * i, l, mid);\n      if (res &lt; 0) {  // \u53bb\u53f3\u5b50\u6811\u627e\n        res = find_first(ql, qr, target, 2 * i + 1, mid + 1, r);\n      }\n      return res;\n    }\n  };\n\n public:\n  int longestBalanced(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    segment_tree seg_tree(n + 1);  // \u524d\u7f00\u548c\uff0c\u533a\u95f4\u4e3a [0, n]\n    unordered_map&lt;int, int&gt; last;\n    int ans = 0, sum = 0;\n    for (int i = 0; i &lt; n; ++i) {\n      int x = nums[i];\n      int v = (x % 2 == 0) ? 1 : -1;\n      if (!last.contains(x)) {\n        sum += v;  // \u7ef4\u62a4\u524d\u7f00\u548c\n        // [i+1, n], \u7b2ci+1\u4e2a\u4f4d\u7f6e\u8868\u793a\u524di\u4e2a\u6570\u7684\u524d\u7f00\u548c\n        seg_tree.range_add(i + 1, n, v, 1, 0, n);\n      } else {\n        int pre = last[x];  // \u4e0a\u6b21\u51fa\u73b0\u4f4d\u7f6e\n        // \u53d6\u6d88\u4e0a\u6b21\u51fa\u73b0\u7684\u5f71\u54cd, \u4e0a\u4e00\u6b21x\u51fa\u73b0\u7684\u4f4d\u7f6e\u5f71\u54cd\u4e86\u533a\u95f4 [pre+1, n]\n        // \u5f53\u524dx\u7684\u4f4d\u7f6e\u5f71\u54cd\u4e86\u533a\u95f4 [i+1, n]\uff0c\u628a[pre+1, i]\u7684\u503c\u51cf\u53bbv\n        seg_tree.range_add(pre + 1, i, -v, 1, 0, n);\n      }\n      last[x] = i;\n      // \u67e5\u627e\u524d\u7f00\u548c\u7b49\u4e8esum\u7684\u6700\u5de6\u4f4d\u7f6e, \u7b2ci\u4e2a\u4f4d\u7f6e\u8868\u793a\u524di-1\u4e2a\u6570\u7684\u524d\u7f00\u548c\n      int pos = seg_tree.find_first(0, i, sum, 1, 0, n);\n      if (pos &gt;= 0) { ans = std::max(ans, i - pos + 1); }\n    }\n    return ans;\n  }\n};\n</code></pre>","tags":["Element Count","Unique Count","Balanced Frequency"]}]}